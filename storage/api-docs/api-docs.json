{
    "openapi": "3.0.0",
    "info": {
        "title": "API Documentation for Your ISO GO Application",
        "description": "This is the OpenAPI definition for your application's APIs, including endpoints for managing resources like Boxes and Users and more.",
        "contact": {
            "email": "support@yourapp.com"
        },
        "version": "1.0.0"
    },
    "paths": {
        "/api/login": {
            "post": {
                "tags": [
                    "Authentication"
                ],
                "summary": "Log in a user",
                "description": "Log in a user.",
                "operationId": "44212a9096e4b09358281e9ec8a0701d",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "username",
                                    "password"
                                ],
                                "properties": {
                                    "username": {
                                        "description": "User's email or username",
                                        "type": "string",
                                        "example": "user@example.com"
                                    },
                                    "password": {
                                        "description": "User's password",
                                        "type": "string",
                                        "example": "password123"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful login with access token",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "access_token": {
                                            "description": "OAuth access token",
                                            "type": "string"
                                        },
                                        "token_type": {
                                            "description": "Type of token",
                                            "type": "string",
                                            "example": "Bearer"
                                        },
                                        "expires_in": {
                                            "description": "Token expiration time in seconds",
                                            "type": "integer",
                                            "example": 3600
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Invalid credentials",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "message": {
                                            "description": "Error message",
                                            "type": "string",
                                            "example": "Invalid credentials"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/boxes": {
            "get": {
                "tags": [
                    "Boxes"
                ],
                "summary": "List all boxes",
                "description": "Retrieve all boxes.",
                "operationId": "0ea3013aa6b98aa32464d4e3edb6749b",
                "responses": {
                    "200": {
                        "description": "List of boxes retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/BoxResource"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "post": {
                "tags": [
                    "Boxes"
                ],
                "summary": "Create a new box",
                "description": "Create a new box.",
                "operationId": "033a4c11c4212524a44cc48058c46815",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BoxRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Box created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BoxResource"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation error"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/api/boxes/{id}": {
            "get": {
                "tags": [
                    "Boxes"
                ],
                "summary": "Get a box by ID",
                "description": "Retrieve a specific box by ID.",
                "operationId": "5e04d3b404af3651aee7bf6500973437",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Box ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Box retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BoxResource"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Box not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "Boxes"
                ],
                "summary": "Update a box",
                "description": "Update an existing box.",
                "operationId": "861ee318ec07ef9d6b6e91482d9e2dd1",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Box ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BoxRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Box updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BoxResource"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation error"
                    },
                    "404": {
                        "description": "Box not found"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Boxes"
                ],
                "summary": "Delete a box",
                "description": "Delete a box.",
                "operationId": "565ee2b1af810cef9eec34af59955b2e",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Box ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Box deleted successfully"
                    },
                    "404": {
                        "description": "Box not found"
                    }
                }
            }
        },
        "/api/contracts": {
            "get": {
                "tags": [
                    "Contracts"
                ],
                "summary": "Get all Contracts",
                "description": "List all contracts.",
                "operationId": "a6a61306221aa5342fc310b63c1660ed",
                "responses": {
                    "200": {
                        "description": "List of Contracts retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ContractResource"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "post": {
                "tags": [
                    "Contracts"
                ],
                "summary": "Create a new Contract",
                "description": "Create a new contract.",
                "operationId": "9a25642079c5690665a3bd85798ad224",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ContractRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Contract created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ContractResource"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/api/contracts/{id}": {
            "get": {
                "tags": [
                    "Contracts"
                ],
                "summary": "Retrieve a Contract by ID",
                "description": "Retrieve a contract by its ID.",
                "operationId": "fab8961798ece4e150cd892e94c895c7",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Contract ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Contract details retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ContractResource"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Contract not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "Contracts"
                ],
                "summary": "Update an existing Contract",
                "description": "Update an existing contract.",
                "operationId": "f679100a9bbad41ce98ba57faa77a50e",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Contract ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ContractRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Contract updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ContractResource"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Contracts"
                ],
                "summary": "Delete a Contract",
                "description": "Delete a contract.",
                "operationId": "2bfe2f120e1b14cbfb023f0aa34bff7d",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Contract ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Contract deleted successfully"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/api/addresses": {
            "get": {
                "tags": [
                    "Addresses"
                ],
                "summary": "Get all addresses",
                "description": "Get all addresses.",
                "operationId": "c2c9c55150f568a32c86f5ebeb271a77",
                "responses": {
                    "200": {
                        "description": "List of addresses retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/AddressResource"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "post": {
                "tags": [
                    "Addresses"
                ],
                "summary": "Create a new address",
                "description": "Create a new address.",
                "operationId": "8c56e86cf90cbf8a0a25e3d7906e551b",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AddressRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Address created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AddressResource"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/api/addresses/{id}": {
            "get": {
                "tags": [
                    "Addresses"
                ],
                "summary": "Get an address by ID",
                "description": "Get an address by ID.",
                "operationId": "17d7aeb309cfcdfea3c38987e4244514",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Address ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Address retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AddressResource"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Address not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "Addresses"
                ],
                "summary": "Update an address",
                "description": "Update an address.",
                "operationId": "8d6ebc3b921582ad59e98a8a318cc7d2",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Address ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AddressRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Address updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AddressResource"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Addresses"
                ],
                "summary": "Delete an address",
                "description": "Delete an address.",
                "operationId": "03ce73d65046faead36578045f024115",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Address ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Address deleted successfully"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/api/customers": {
            "get": {
                "tags": [
                    "Customers"
                ],
                "summary": "List all customers",
                "description": "Get all customers.",
                "operationId": "f324f0c621bf707898979899be974942",
                "responses": {
                    "200": {
                        "description": "List of customers successfully retrieved",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/CustomerResource"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "post": {
                "tags": [
                    "Customers"
                ],
                "summary": "Create a new customer",
                "description": "Create a new customer.",
                "operationId": "0f6a0a7c4d0fd4e1f924796ff6c011b2",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CustomerRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Customer created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CustomerResource"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation Error"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/api/customers/{id}": {
            "get": {
                "tags": [
                    "Customers"
                ],
                "summary": "Retrieve a customer by ID",
                "description": "Get a customer by ID.",
                "operationId": "e5948c45885f473a3fcd19d65023fbd2",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Customer ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Customer successfully retrieved",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CustomerResource"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Customer not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "Customers"
                ],
                "summary": "Update a customer",
                "description": "Update a customer.",
                "operationId": "fd729d22846992e8fe4bc8c2caee1d28",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Customer ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CustomerRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Customer successfully updated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CustomerResource"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation Error"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Customers"
                ],
                "summary": "Delete a customer",
                "description": "Delete a customer.",
                "operationId": "195c0c3fdd1432125e8655d1912d96d9",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Customer ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Customer successfully deleted"
                    },
                    "404": {
                        "description": "Customer not found"
                    }
                }
            }
        },
        "/api/document-types": {
            "get": {
                "tags": [
                    "Document Types"
                ],
                "summary": "List all document types",
                "description": "Retrieve all document types.",
                "operationId": "f8ea15f8fdd1c937db00d2dffc9eb778",
                "responses": {
                    "200": {
                        "description": "List of document types retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/DocumentTypeResource"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "post": {
                "tags": [
                    "Document Types"
                ],
                "summary": "Create a new document type",
                "description": "Create a new document type.",
                "operationId": "22fe47cf5b83cee4cc08a5d6a7b6b32d",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DocumentTypeRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Document type created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DocumentTypeResource"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation Error"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/api/document-types/{id}": {
            "get": {
                "tags": [
                    "Document Types"
                ],
                "summary": "Get a document type by ID",
                "description": "Retrieve a document type by ID.",
                "operationId": "67d6ba0c16867a1f95bc0e34098fb03c",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Document type ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Document type retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DocumentTypeResource"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Document type not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "Document Types"
                ],
                "summary": "Update a document type",
                "description": "Update an existing document type.",
                "operationId": "6dcfce6402e6edb09ee75b7efee270dc",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Document type ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DocumentTypeRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Document type updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DocumentTypeResource"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation Error"
                    },
                    "404": {
                        "description": "Document type not found"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Document Types"
                ],
                "summary": "Delete a document type",
                "description": "Delete a document type.",
                "operationId": "d52735627f5b176206fcdc5c066a183c",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Document type ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Document type deleted successfully"
                    },
                    "404": {
                        "description": "Document type not found"
                    }
                }
            }
        },
        "/api/fiscal-regimes": {
            "get": {
                "tags": [
                    "Fiscal Regimes"
                ],
                "summary": "List all fiscal regimes",
                "description": "Retrieve all fiscal regimes.",
                "operationId": "29fbe5c5cd939dba2da14141d1d34815",
                "responses": {
                    "200": {
                        "description": "List of fiscal regimes retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/FiscalRegimeResource"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "post": {
                "tags": [
                    "Fiscal Regimes"
                ],
                "summary": "Create a new fiscal regime",
                "description": "Create a new fiscal regime.",
                "operationId": "87414c13e2019076d2ae5feadac3c424",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/FiscalRegimeRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Fiscal regime created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FiscalRegimeResource"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation Error"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/api/fiscal-regimes/{id}": {
            "get": {
                "tags": [
                    "Fiscal Regimes"
                ],
                "summary": "Get a fiscal regime by ID",
                "description": "Retrieve a fiscal regime by ID.",
                "operationId": "4d2ff184c20f7d5725069df5bc2342eb",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Fiscal regime ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Fiscal regime retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FiscalRegimeResource"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Fiscal regime not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "Fiscal Regimes"
                ],
                "summary": "Update a fiscal regime",
                "description": "Update an existing fiscal regime.",
                "operationId": "df3f871bdb912eedfb6e7fd1d28f8eef",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Fiscal regime ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/FiscalRegimeRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Fiscal regime updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FiscalRegimeResource"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation Error"
                    },
                    "404": {
                        "description": "Fiscal regime not found"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Fiscal Regimes"
                ],
                "summary": "Delete a fiscal regime",
                "description": "Delete a fiscal regime.",
                "operationId": "d2460b75606647f8ae3f71750f538ca2",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Fiscal regime ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Fiscal regime deleted successfully"
                    },
                    "404": {
                        "description": "Fiscal regime not found"
                    }
                }
            }
        },
        "/api/tax-details": {
            "get": {
                "tags": [
                    "Tax Details"
                ],
                "summary": "List all tax details",
                "description": "Retrieve all tax details.",
                "operationId": "a92c547954161ce13bf867364e90c094",
                "responses": {
                    "200": {
                        "description": "List of tax details retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/TaxDetailResource"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "post": {
                "tags": [
                    "Tax Details"
                ],
                "summary": "Create a new tax detail",
                "description": "Create a new tax detail.",
                "operationId": "599df74bf8a3da7900027ddd3e19f81b",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TaxDetailRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Tax detail created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TaxDetailResource"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation Error"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/api/tax-details/{id}": {
            "get": {
                "tags": [
                    "Tax Details"
                ],
                "summary": "Get a tax detail by ID",
                "description": "Retrieve a specific tax detail by ID.",
                "operationId": "e2e91b8232cc4e8bfcb74c3dffeda3a5",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Tax detail ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Tax detail retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TaxDetailResource"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Tax detail not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "Tax Details"
                ],
                "summary": "Update a tax detail",
                "description": "Update an existing tax detail.",
                "operationId": "e4423c03b36a4b5974be688b1e731eaa",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Tax detail ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TaxDetailRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Tax detail updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TaxDetailResource"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation Error"
                    },
                    "404": {
                        "description": "Tax detail not found"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Tax Details"
                ],
                "summary": "Delete a tax detail",
                "description": "Delete a tax detail.",
                "operationId": "36acf90c0d196f08176587f328aa8f94",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Tax detail ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Tax detail deleted successfully"
                    },
                    "404": {
                        "description": "Tax detail not found"
                    }
                }
            }
        },
        "/api/tax-identification-types": {
            "get": {
                "tags": [
                    "Tax Identification Types"
                ],
                "summary": "List all tax identification types",
                "description": "Retrieve all tax identification types.",
                "operationId": "e773c20ea3d223f6f24c83b81a3a43fa",
                "responses": {
                    "200": {
                        "description": "List of tax identification types retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/TaxIdentificationTypeResource"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "post": {
                "tags": [
                    "Tax Identification Types"
                ],
                "summary": "Create a new tax identification type",
                "description": "Create a new tax identification type.",
                "operationId": "06550630ae1485a3e73b3bde68f8f2c9",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TaxIdentificationTypeRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Tax identification type created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TaxIdentificationTypeResource"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation Error"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/api/tax-identification-types/{id}": {
            "get": {
                "tags": [
                    "Tax Identification Types"
                ],
                "summary": "Get a tax identification type by ID",
                "description": "Retrieve a specific tax identification type by ID.",
                "operationId": "3b431ad6e333362dd313d286b98c46bb",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Tax identification type ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Tax identification type retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TaxIdentificationTypeResource"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Tax identification type not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "Tax Identification Types"
                ],
                "summary": "Update a tax identification type",
                "description": "Update an existing tax identification type.",
                "operationId": "f701bb2cfb1b6396bd701d2be16dd7b8",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Tax identification type ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TaxIdentificationTypeRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Tax identification type updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TaxIdentificationTypeResource"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation Error"
                    },
                    "404": {
                        "description": "Tax identification type not found"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Tax Identification Types"
                ],
                "summary": "Delete a tax identification type",
                "description": "Delete a tax identification type.",
                "operationId": "f91ff2a6a1d23b969142187c0e97cd31",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Tax identification type ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Tax identification type deleted successfully"
                    },
                    "404": {
                        "description": "Tax identification type not found"
                    }
                }
            }
        },
        "/api/taxpayer-types": {
            "get": {
                "tags": [
                    "Taxpayer Types"
                ],
                "summary": "List all taxpayer types",
                "description": "Retrieve all taxpayer types.",
                "operationId": "a9cef686db7f11094631d7875569fea5",
                "responses": {
                    "200": {
                        "description": "List of taxpayer types retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/TaxpayerTypeResource"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "post": {
                "tags": [
                    "Taxpayer Types"
                ],
                "summary": "Create a new taxpayer type",
                "description": "Create a new taxpayer type.",
                "operationId": "03e0de967181d3ab9929d4c80cde6ff2",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TaxpayerTypeRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Taxpayer type created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TaxpayerTypeResource"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation Error"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/api/taxpayer-types/{id}": {
            "get": {
                "tags": [
                    "Taxpayer Types"
                ],
                "summary": "Get a taxpayer type by ID",
                "description": "Retrieve a specific taxpayer type by ID.",
                "operationId": "3dd34304822d414ba525bb286f32dee9",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Taxpayer type ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Taxpayer type retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TaxpayerTypeResource"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Taxpayer type not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "Taxpayer Types"
                ],
                "summary": "Update a taxpayer type",
                "description": "Update an existing taxpayer type.",
                "operationId": "2f9eabdb5ac9b20fb104596a972e8702",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Taxpayer type ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TaxpayerTypeRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Taxpayer type updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TaxpayerTypeResource"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation Error"
                    },
                    "404": {
                        "description": "Taxpayer type not found"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Taxpayer Types"
                ],
                "summary": "Delete a taxpayer type",
                "description": "Delete a taxpayer type.",
                "operationId": "b1df4b692b1c20d5b7aa8b2905f24903",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Taxpayer type ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Taxpayer type deleted successfully"
                    },
                    "404": {
                        "description": "Taxpayer type not found"
                    }
                }
            }
        },
        "/api/daily-boxes": {
            "get": {
                "tags": [
                    "DailyBoxes"
                ],
                "summary": "Get all daily boxes",
                "description": "List all daily boxes.",
                "operationId": "bf9a94c444a7a8ea2d11d5507f33d56b",
                "responses": {
                    "200": {
                        "description": "List of all daily boxes retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/DailyBoxResource"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "post": {
                "tags": [
                    "DailyBoxes"
                ],
                "summary": "Create a new daily box record",
                "description": "Create a new daily box record.",
                "operationId": "5d6abe002ad7c7ba24e9fc30b0515d66",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DailyBoxRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Daily box record created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DailyBoxResource"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/api/daily-boxes/{id}": {
            "get": {
                "tags": [
                    "DailyBoxes"
                ],
                "summary": "Get a daily box by its ID",
                "description": "Get a single daily box by ID.",
                "operationId": "7ecaec291c9b911e8e7eded779442354",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Daily box ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Daily box details retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DailyBoxResource"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Daily box not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "DailyBoxes"
                ],
                "summary": "Update an existing daily box record",
                "description": "Update an existing daily box record.",
                "operationId": "462fd1a2ab151853e35f466bea171f54",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Daily box ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DailyBoxRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Daily box updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DailyBoxResource"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "delete": {
                "tags": [
                    "DailyBoxes"
                ],
                "summary": "Delete a daily box record by ID",
                "description": "Delete a daily box record by its ID.",
                "operationId": "1530279feef1ed76787887ebab8c11c3",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Daily box ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Daily box record deleted successfully"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/api/email-templates": {
            "get": {
                "tags": [
                    "EmailTemplates"
                ],
                "summary": "List all email templates",
                "description": "Get a list of all email templates.",
                "operationId": "48487f955a610bbfd07ff880b553ad3c",
                "responses": {
                    "200": {
                        "description": "Email templates retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/EmailTemplateResource"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "post": {
                "tags": [
                    "EmailTemplates"
                ],
                "summary": "Create a new email template",
                "description": "Create a new email template.",
                "operationId": "00537cd685e69c3d47074687da7eaf63",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EmailTemplateRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Email template created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EmailTemplateResource"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/api/email-templates/{id}": {
            "get": {
                "tags": [
                    "EmailTemplates"
                ],
                "summary": "Retrieve an email template by ID",
                "description": "Retrieve an email template by its ID.",
                "operationId": "f1843175e5528cfd0884b7502be577db",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Email Template ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Email template retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EmailTemplateResource"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Email template not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "EmailTemplates"
                ],
                "summary": "Update an email template",
                "description": "Update an email template by its ID.",
                "operationId": "8c7998523f1cea4fddb9999059ba7651",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Email Template ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EmailTemplateRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Email template updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EmailTemplateResource"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "delete": {
                "tags": [
                    "EmailTemplates"
                ],
                "summary": "Delete an email template",
                "description": "Delete an email template by its ID.",
                "operationId": "8a92374afd407f5ea44a64b40a4bf5ec",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Email Template ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Email template deleted successfully"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/api/cash-registers": {
            "get": {
                "tags": [
                    "Cash Registers"
                ],
                "summary": "List all cash registers",
                "description": "Retrieve all cash registers.",
                "operationId": "2dff3943d7bbefdb9eb0713c6cdba6bb",
                "responses": {
                    "200": {
                        "description": "List of cash registers retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/CashRegisterResource"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "post": {
                "tags": [
                    "Cash Registers"
                ],
                "summary": "Create a new cash register",
                "description": "Create a new cash register.",
                "operationId": "7b9894e1736499fd636dcf99c98a3aa9",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CashRegisterRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Cash register created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CashRegisterResource"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation Error"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/api/cash-registers/{id}": {
            "get": {
                "tags": [
                    "Cash Registers"
                ],
                "summary": "Get a cash register by ID",
                "description": "Retrieve a specific cash register by ID.",
                "operationId": "89bfe6d6a5d698bd1e47ad80ad77eb37",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Cash register ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Cash register retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CashRegisterResource"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Cash register not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "Cash Registers"
                ],
                "summary": "Update a cash register",
                "description": "Update an existing cash register.",
                "operationId": "71e57e42f92eeee3e1bd6d1b075a7afd",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Cash register ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CashRegisterRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Cash register updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CashRegisterResource"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation Error"
                    },
                    "404": {
                        "description": "Cash register not found"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Cash Registers"
                ],
                "summary": "Delete a cash register",
                "description": "Delete a cash register.",
                "operationId": "0620b171d3e57949118baa23da4b45e7",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Cash register ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Cash register deleted successfully"
                    },
                    "404": {
                        "description": "Cash register not found"
                    }
                }
            }
        },
        "/api/expenses": {
            "get": {
                "tags": [
                    "Expenses"
                ],
                "summary": "List all expenses",
                "description": "Retrieve all expenses.",
                "operationId": "440f5ce4423d934de27ba892f03e71eb",
                "responses": {
                    "200": {
                        "description": "List of expenses retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ExpenseResource"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "post": {
                "tags": [
                    "Expenses"
                ],
                "summary": "Create a new expense",
                "description": "Create a new expense.",
                "operationId": "f2d5cba640e09f24f3758439fc05fe02",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ExpenseRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Expense created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ExpenseResource"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation Error"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/api/expenses/{id}": {
            "get": {
                "tags": [
                    "Expenses"
                ],
                "summary": "Get an expense by ID",
                "description": "Retrieve a specific expense by ID.",
                "operationId": "2cddf720c9ab82155dc35f16e01da04a",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Expense ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Expense retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ExpenseResource"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Expense not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "Expenses"
                ],
                "summary": "Update an expense",
                "description": "Update an existing expense.",
                "operationId": "a31ff303e9b96c470ac5f348f40cf5ec",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Expense ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ExpenseRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Expense updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ExpenseResource"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation Error"
                    },
                    "404": {
                        "description": "Expense not found"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Expenses"
                ],
                "summary": "Delete an expense",
                "description": "Delete an expense.",
                "operationId": "d3445535372a0d54c9544c5e95e60d54",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Expense ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Expense deleted successfully"
                    },
                    "404": {
                        "description": "Expense not found"
                    }
                }
            }
        },
        "/api/incomes": {
            "get": {
                "tags": [
                    "Incomes"
                ],
                "summary": "List all incomes",
                "description": "Retrieve all incomes.",
                "operationId": "967913b9c96a4655cfaf8083bbc774f4",
                "responses": {
                    "200": {
                        "description": "List of incomes retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/IncomeResource"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "post": {
                "tags": [
                    "Incomes"
                ],
                "summary": "Create a new income",
                "description": "Create a new income.",
                "operationId": "d57a5ee3f0a6e8fa9a611de5ad3bcf0f",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/IncomeRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Income created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IncomeResource"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation Error"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/api/incomes/{id}": {
            "get": {
                "tags": [
                    "Incomes"
                ],
                "summary": "Get an income by ID",
                "description": "Retrieve a specific income by ID.",
                "operationId": "4611a08738f9026f000e9e973489d877",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Income ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Income retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IncomeResource"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Income not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "Incomes"
                ],
                "summary": "Update an income",
                "description": "Update an existing income.",
                "operationId": "b3c6457dfabff78e22aacc28def4250b",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Income ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/IncomeRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Income updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IncomeResource"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation Error"
                    },
                    "404": {
                        "description": "Income not found"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Incomes"
                ],
                "summary": "Delete an income",
                "description": "Delete an income.",
                "operationId": "197feafb3e3ffc488529615a06ca7b84",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Income ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Income deleted successfully"
                    },
                    "404": {
                        "description": "Income not found"
                    }
                }
            }
        },
        "/api/transactions": {
            "get": {
                "tags": [
                    "Transactions"
                ],
                "summary": "List all transactions",
                "description": "Retrieve all transactions.",
                "operationId": "b35e4132a9552744dc162ac545c61ff6",
                "responses": {
                    "200": {
                        "description": "List of transactions retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/TransactionResource"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "post": {
                "tags": [
                    "Transactions"
                ],
                "summary": "Create a new transaction",
                "description": "Create a new transaction.",
                "operationId": "469c4fcff33f9203d454e88dcbd409a0",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TransactionRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Transaction created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TransactionResource"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation Error"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/api/transactions/{id}": {
            "get": {
                "tags": [
                    "Transactions"
                ],
                "summary": "Get a transaction by ID",
                "description": "Retrieve a specific transaction by ID.",
                "operationId": "58c32752e1fc2ad8809d480af3562b6f",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Transaction ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Transaction retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TransactionResource"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Transaction not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "Transactions"
                ],
                "summary": "Update a transaction",
                "description": "Update an existing transaction.",
                "operationId": "55bebc350988294a9c413d75bcdf6071",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Transaction ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TransactionRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Transaction updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TransactionResource"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation Error"
                    },
                    "404": {
                        "description": "Transaction not found"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Transactions"
                ],
                "summary": "Delete a transaction",
                "description": "Delete a transaction.",
                "operationId": "9dd64860706519ec466f545ecf46c05e",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Transaction ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Transaction deleted successfully"
                    },
                    "404": {
                        "description": "Transaction not found"
                    }
                }
            }
        },
        "/api/html-templates": {
            "get": {
                "tags": [
                    "HtmlTemplates"
                ],
                "summary": "Get all HTML templates",
                "description": "Retrieve all HTML Templates.",
                "operationId": "8338fe1d30e4124da8312f7cd999e312",
                "responses": {
                    "200": {
                        "description": "List of HTML templates retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/HtmlTemplateResource"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "post": {
                "tags": [
                    "HtmlTemplates"
                ],
                "summary": "Create a new HTML template",
                "description": "Create a new HTML Template.",
                "operationId": "0cf138f11abcbb98531a47adfac7568e",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/HtmlTemplateRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "HTML template created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HtmlTemplateResource"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/api/html-templates/{id}": {
            "get": {
                "tags": [
                    "HtmlTemplates"
                ],
                "summary": "Get an HTML template by ID",
                "description": "Retrieve an HTML Template by ID.",
                "operationId": "2c0d76f66f8ef9ee16d55fb0c799d49f",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "HTML Template ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "HTML template retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HtmlTemplateResource"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "HTML template not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "HtmlTemplates"
                ],
                "summary": "Update an HTML template",
                "description": "Update an HTML Template.",
                "operationId": "6fbc56972f9df59ef6f861321456edb6",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "HTML Template ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/HtmlTemplateRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "HTML template updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HtmlTemplateResource"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "delete": {
                "tags": [
                    "HtmlTemplates"
                ],
                "summary": "Delete an HTML template",
                "description": "Delete an HTML Template by ID.",
                "operationId": "8427339677df7f72bdb380d4ff56f6bd",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "HTML Template ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "HTML template deleted successfully"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/api/categories": {
            "get": {
                "tags": [
                    "Categories"
                ],
                "summary": "List all categories",
                "description": "Retrieve all categories.",
                "operationId": "10b81fc05c975232b0b5ed895232f494",
                "responses": {
                    "200": {
                        "description": "List of categories retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/CategoryResource"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "post": {
                "tags": [
                    "Categories"
                ],
                "summary": "Create a new category",
                "description": "Create a new category.",
                "operationId": "cacf3c9f6f6115ad195f8127ad84959e",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CategoryRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Category created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CategoryResource"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation Error"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/api/categories/{id}": {
            "get": {
                "tags": [
                    "Categories"
                ],
                "summary": "Get a category by ID",
                "description": "Retrieve a specific category by ID.",
                "operationId": "3b91a72ed2acb85751a8c49b2a3aabb6",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Category ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Category retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CategoryResource"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Category not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "Categories"
                ],
                "summary": "Update a category",
                "description": "Update an existing category.",
                "operationId": "b886dc7ea963794fc142bb276bb3e9a0",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Category ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CategoryRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Category updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CategoryResource"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation Error"
                    },
                    "404": {
                        "description": "Category not found"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Categories"
                ],
                "summary": "Delete a category",
                "description": "Delete a category.",
                "operationId": "9f0cab867589a678773d9872ffabd810",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Category ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Category deleted successfully"
                    },
                    "404": {
                        "description": "Category not found"
                    }
                }
            }
        },
        "/api/equipment-assignments": {
            "get": {
                "tags": [
                    "EquipmentAssignments"
                ],
                "summary": "List all equipment assignments",
                "description": "Retrieve all equipment assignments.",
                "operationId": "ebfc305817f29aa9bdd4d31ef6f4c827",
                "responses": {
                    "200": {
                        "description": "List of equipment assignments retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/EquipmentAssignmentResource"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "post": {
                "tags": [
                    "EquipmentAssignments"
                ],
                "summary": "Create a new equipment assignment",
                "description": "Create a new equipment assignment.",
                "operationId": "d127c8d9ea64bbfca44278ed989e6fce",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EquipmentAssignmentRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Equipment assignment created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EquipmentAssignmentResource"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation Error"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/api/equipment-assignments/{id}": {
            "get": {
                "tags": [
                    "EquipmentAssignments"
                ],
                "summary": "Get an equipment assignment by ID",
                "description": "Retrieve a specific equipment assignment by ID.",
                "operationId": "6a9ed91581e68e88be047c58939124cc",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Equipment Assignment ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Equipment assignment retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EquipmentAssignmentResource"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Equipment assignment not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "EquipmentAssignments"
                ],
                "summary": "Update an equipment assignment",
                "description": "Update an existing equipment assignment.",
                "operationId": "bd1763ad9194e0a46d1d83009953991c",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Equipment Assignment ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EquipmentAssignmentRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Equipment assignment updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EquipmentAssignmentResource"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation Error"
                    },
                    "404": {
                        "description": "Equipment assignment not found"
                    }
                }
            },
            "delete": {
                "tags": [
                    "EquipmentAssignments"
                ],
                "summary": "Delete an equipment assignment",
                "description": "Delete an equipment assignment.",
                "operationId": "88de695c828a124364d6cb9f87cfb7dc",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Equipment Assignment ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Equipment assignment deleted successfully"
                    },
                    "404": {
                        "description": "Equipment assignment not found"
                    }
                }
            }
        },
        "/api/products": {
            "get": {
                "tags": [
                    "Products"
                ],
                "summary": "List all products",
                "description": "Retrieve all products.",
                "operationId": "d71776dc76e2676df32701a57152c208",
                "responses": {
                    "200": {
                        "description": "List of products retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ProductResource"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "post": {
                "tags": [
                    "Products"
                ],
                "summary": "Create a new product",
                "description": "Create a new product.",
                "operationId": "26687c1c4c1289f7671b9f1f5ad06f9b",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ProductRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Product created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductResource"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation Error"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/api/products/{id}": {
            "get": {
                "tags": [
                    "Products"
                ],
                "summary": "Get a product by ID",
                "description": "Retrieve a specific product by ID.",
                "operationId": "72c0303355e73031a8b73fcf351fdbfa",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Product ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Product retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductResource"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Product not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "Products"
                ],
                "summary": "Update a product",
                "description": "Update an existing product.",
                "operationId": "fdd666db4b58fc7af5c34eeb22e2f8ef",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Product ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ProductRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Product updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductResource"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation Error"
                    },
                    "404": {
                        "description": "Product not found"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Products"
                ],
                "summary": "Delete a product",
                "description": "Delete a product.",
                "operationId": "56c9ae6c3770ff7c1725799b0332c6ca",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Product ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Product deleted successfully"
                    },
                    "404": {
                        "description": "Product not found"
                    }
                }
            }
        },
        "/api/suppliers": {
            "get": {
                "tags": [
                    "Suppliers"
                ],
                "summary": "List all suppliers",
                "description": "Retrieve all suppliers.",
                "operationId": "575dd6dabd00ac26f344a1f3b4c17c7c",
                "responses": {
                    "200": {
                        "description": "List of suppliers retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/SupplierResource"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "post": {
                "tags": [
                    "Suppliers"
                ],
                "summary": "Create a new supplier",
                "description": "Create a new supplier.",
                "operationId": "0bbbf338e903370db02d3a09cbad6aef",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SupplierRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Supplier created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SupplierResource"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation Error"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/api/suppliers/{id}": {
            "get": {
                "tags": [
                    "Suppliers"
                ],
                "summary": "Get a supplier by ID",
                "description": "Retrieve a specific supplier by ID.",
                "operationId": "bab3fee965d55742295b1155a9cda815",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Supplier ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Supplier retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SupplierResource"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Supplier not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "Suppliers"
                ],
                "summary": "Update a supplier",
                "description": "Update an existing supplier.",
                "operationId": "57fcdfa5aa14502130e49f6854e70e98",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Supplier ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SupplierRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Supplier updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SupplierResource"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation Error"
                    },
                    "404": {
                        "description": "Supplier not found"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Suppliers"
                ],
                "summary": "Delete a supplier",
                "description": "Delete a supplier.",
                "operationId": "959a321c04abf2b66c879da67cd33952",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Supplier ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Supplier deleted successfully"
                    },
                    "404": {
                        "description": "Supplier not found"
                    }
                }
            }
        },
        "/api/warehouses": {
            "get": {
                "tags": [
                    "Warehouses"
                ],
                "summary": "List all warehouses",
                "description": "Retrieve all warehouses.",
                "operationId": "6a160132d1ad0a3ad31b8ae0e3d3ce6c",
                "responses": {
                    "200": {
                        "description": "List of warehouses retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/WarehouseResource"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "post": {
                "tags": [
                    "Warehouses"
                ],
                "summary": "Create a new warehouse",
                "description": "Create a new warehouse.",
                "operationId": "6aa61746a7d1dc88f91c5cabcfb4e7d7",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/WarehouseRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Warehouse created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/WarehouseResource"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation Error"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/api/warehouses/{id}": {
            "get": {
                "tags": [
                    "Warehouses"
                ],
                "summary": "Get a warehouse by ID",
                "description": "Retrieve a specific warehouse by ID.",
                "operationId": "e4c70546aff4e2bf4b078ef812f71add",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Warehouse ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Warehouse retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/WarehouseResource"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Warehouse not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "Warehouses"
                ],
                "summary": "Update a warehouse",
                "description": "Update an existing warehouse.",
                "operationId": "5bb0a2045c588fe578061767a24c66ee",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Warehouse ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/WarehouseRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Warehouse updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/WarehouseResource"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation Error"
                    },
                    "404": {
                        "description": "Warehouse not found"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Warehouses"
                ],
                "summary": "Delete a warehouse",
                "description": "Delete a warehouse.",
                "operationId": "6cc90823c6e6f260143124727a9358bd",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Warehouse ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Warehouse deleted successfully"
                    },
                    "404": {
                        "description": "Warehouse not found"
                    }
                }
            }
        },
        "/api/credit-notes": {
            "get": {
                "tags": [
                    "CreditNotes"
                ],
                "summary": "List all credit notes",
                "description": "Retrieve all credit notes.",
                "operationId": "a2adef7498379b3981e2b31cc3369f35",
                "responses": {
                    "200": {
                        "description": "List of credit notes retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/CreditNoteResource"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "post": {
                "tags": [
                    "CreditNotes"
                ],
                "summary": "Create a new credit note",
                "description": "Create a new credit note.",
                "operationId": "0160d835c82cc864fdb9f93111df11fc",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreditNoteRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Credit note created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CreditNoteResource"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation Error"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/api/credit-notes/{id}": {
            "get": {
                "tags": [
                    "CreditNotes"
                ],
                "summary": "Get a credit note by ID",
                "description": "Retrieve a specific credit note by ID.",
                "operationId": "00bcd49e9fea062bb9a2b34bc05d95f1",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Credit note ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Credit note retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CreditNoteResource"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Credit note not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "CreditNotes"
                ],
                "summary": "Update a credit note",
                "description": "Update an existing credit note.",
                "operationId": "2649fc4337e0c92e32b74093ff50e678",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Credit note ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreditNoteRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Credit note updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CreditNoteResource"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation Error"
                    },
                    "404": {
                        "description": "Credit note not found"
                    }
                }
            },
            "delete": {
                "tags": [
                    "CreditNotes"
                ],
                "summary": "Delete a credit note",
                "description": "Delete a credit note.",
                "operationId": "a04d775d39a51ce9c0e2e79720a013ec",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Credit note ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Credit note deleted successfully"
                    },
                    "404": {
                        "description": "Credit note not found"
                    }
                }
            }
        },
        "/api/daily-invoice-balances": {
            "get": {
                "tags": [
                    "DailyInvoiceBalances"
                ],
                "summary": "List all daily invoice balances",
                "description": "Retrieve all daily invoice balances.",
                "operationId": "f2ca8af306e059e60aaca9bae33cf709",
                "responses": {
                    "200": {
                        "description": "List of daily invoice balances retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/DailyInvoiceBalanceResource"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "post": {
                "tags": [
                    "DailyInvoiceBalances"
                ],
                "summary": "Create a new daily invoice balance",
                "description": "Create a new daily invoice balance entry.",
                "operationId": "652eb8a4950ab3ee285441571ef22ddc",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DailyInvoiceBalanceRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Daily invoice balance created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DailyInvoiceBalanceResource"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation Error"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/api/daily-invoice-balances/{id}": {
            "get": {
                "tags": [
                    "DailyInvoiceBalances"
                ],
                "summary": "Get a daily invoice balance entry by ID",
                "description": "Retrieve a specific daily invoice balance entry by ID.",
                "operationId": "5456f7171a3f92f4c8a105bfe6030219",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Daily invoice balance entry ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Daily invoice balance retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DailyInvoiceBalanceResource"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Daily invoice balance not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "DailyInvoiceBalances"
                ],
                "summary": "Update a daily invoice balance",
                "description": "Update an existing daily invoice balance.",
                "operationId": "c638ab9cca894b08330f39abb24bf237",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Daily invoice balance ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DailyInvoiceBalanceRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Daily invoice balance updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DailyInvoiceBalanceResource"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation Error"
                    },
                    "404": {
                        "description": "Daily invoice balance not found"
                    }
                }
            },
            "delete": {
                "tags": [
                    "DailyInvoiceBalances"
                ],
                "summary": "Delete a daily invoice balance entry",
                "description": "Delete a daily invoice balance entry.",
                "operationId": "58aa286ee871191194fd0266189e78af",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Daily invoice balance entry ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Daily invoice balance entry deleted successfully"
                    },
                    "404": {
                        "description": "Daily invoice balance not found"
                    }
                }
            }
        },
        "/api/invoices": {
            "get": {
                "tags": [
                    "Invoices"
                ],
                "summary": "List all invoices",
                "description": "Retrieve all invoices.",
                "operationId": "b43704efb2b50a11888215d32c821b39",
                "responses": {
                    "200": {
                        "description": "List of invoices retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/InvoiceResource"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "post": {
                "tags": [
                    "Invoices"
                ],
                "summary": "Create a new invoice",
                "description": "Create a new invoice.",
                "operationId": "952361f17b1489d089b24e597ca9b326",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/InvoiceRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Invoice created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InvoiceResource"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation Error"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/api/invoices/{id}": {
            "get": {
                "tags": [
                    "Invoices"
                ],
                "summary": "Get an invoice by ID",
                "description": "Retrieve a specific invoice by ID.",
                "operationId": "3e1ee24df782d713817a1b0e4d912fc4",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Invoice ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Invoice retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InvoiceResource"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Invoice not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "Invoices"
                ],
                "summary": "Update an invoice",
                "description": "Update an existing invoice.",
                "operationId": "9ae84c12bf18b68a5eebaea99c45605f",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Invoice ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/InvoiceRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Invoice updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InvoiceResource"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation Error"
                    },
                    "404": {
                        "description": "Invoice not found"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Invoices"
                ],
                "summary": "Delete an invoice",
                "description": "Delete an invoice.",
                "operationId": "6b82cc7845c5e0eea19227c4fdfeef84",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Invoice ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Invoice deleted successfully"
                    },
                    "404": {
                        "description": "Invoice not found"
                    }
                }
            }
        },
        "/api/payment-promises": {
            "get": {
                "tags": [
                    "PaymentPromises"
                ],
                "summary": "List all payment promises",
                "description": "Retrieve all payment promises.",
                "operationId": "55b70ec4375f0686918f2970e6200a6d",
                "responses": {
                    "200": {
                        "description": "List of payment promises retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/PaymentPromiseResource"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "post": {
                "tags": [
                    "PaymentPromises"
                ],
                "summary": "Create a new payment promise",
                "description": "Create a new payment promise.",
                "operationId": "29b1a9b52ae6c7a5d0e86c72fc70f0bd",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PaymentPromiseRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Payment promise created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaymentPromiseResource"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation Error"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/api/payment-promises/{id}": {
            "get": {
                "tags": [
                    "PaymentPromises"
                ],
                "summary": "Get a payment promise by ID",
                "description": "Retrieve a specific payment promise by ID.",
                "operationId": "dc9d2cd479c2de75c7ed12d305b42d4e",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Payment promise ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Payment promise retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaymentPromiseResource"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Payment promise not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "PaymentPromises"
                ],
                "summary": "Update a payment promise",
                "description": "Update an existing payment promise.",
                "operationId": "df6884e3aa2e4cf31a2f40af9ef6fb4b",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Payment promise ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PaymentPromiseRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Payment promise updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaymentPromiseResource"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation Error"
                    },
                    "404": {
                        "description": "Payment promise not found"
                    }
                }
            },
            "delete": {
                "tags": [
                    "PaymentPromises"
                ],
                "summary": "Delete a payment promise",
                "description": "Delete a payment promise.",
                "operationId": "b1cde45b96ad8e23624ce4d240abaa09",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Payment promise ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Payment promise deleted successfully"
                    },
                    "404": {
                        "description": "Payment promise not found"
                    }
                }
            }
        },
        "/api/page-translations": {
            "get": {
                "tags": [
                    "PageTranslations"
                ],
                "summary": "List all page translations",
                "description": "Retrieve all page translations.",
                "operationId": "0c66bcd0b879472a232a71535abfcf88",
                "responses": {
                    "200": {
                        "description": "List of page translations retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/PageTranslationResource"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "post": {
                "tags": [
                    "PageTranslations"
                ],
                "summary": "Create a new page translation",
                "description": "Create a new page translation.",
                "operationId": "8b77532093cf760544fc399592c09609",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PageTranslationRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Page translation created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PageTranslationResource"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation Error"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/api/page-translations/{id}": {
            "get": {
                "tags": [
                    "PageTranslations"
                ],
                "summary": "Get a page translation by ID",
                "description": "Retrieve a specific page translation by ID.",
                "operationId": "ab7bee7611733676621878c1fe4c5e72",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Page translation ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Page translation retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PageTranslationResource"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Page translation not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "PageTranslations"
                ],
                "summary": "Update a page translation",
                "description": "Update an existing page translation.",
                "operationId": "d299cffb4390710a321740b078a02cf1",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Page translation ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PageTranslationRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Page translation updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PageTranslationResource"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation Error"
                    },
                    "404": {
                        "description": "Page translation not found"
                    }
                }
            },
            "delete": {
                "tags": [
                    "PageTranslations"
                ],
                "summary": "Delete a page translation",
                "description": "Delete a page translation.",
                "operationId": "e10b2c66c8a1af14232c46cb8e65de10",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Page translation ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Page translation deleted successfully"
                    },
                    "404": {
                        "description": "Page translation not found"
                    }
                }
            }
        },
        "/api/pages": {
            "get": {
                "tags": [
                    "Pages"
                ],
                "summary": "List all pages",
                "description": "Retrieve all pages.",
                "operationId": "e0c9affb539f093fcf95b02939bd2b62",
                "responses": {
                    "200": {
                        "description": "List of pages retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/PagesResource"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "post": {
                "tags": [
                    "Pages"
                ],
                "summary": "Create a new page",
                "description": "Create a new page.",
                "operationId": "55f3cd49e6543146b8a3c79ad754c2a8",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PagesRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Page created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PagesResource"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation Error"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/api/pages/{id}": {
            "get": {
                "tags": [
                    "Pages"
                ],
                "summary": "Get a page by ID",
                "description": "Retrieve a specific page by ID.",
                "operationId": "8c3e2bbdae5591e2b01dab1a727075b7",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Page ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Page retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PagesResource"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Page not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "Pages"
                ],
                "summary": "Update a page",
                "description": "Update an existing page.",
                "operationId": "7ede679b59d65f5e566dd784a6b7e6fa",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Page ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PagesRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Page updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PagesResource"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation Error"
                    },
                    "404": {
                        "description": "Page not found"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Pages"
                ],
                "summary": "Delete a page",
                "description": "Delete a page.",
                "operationId": "f9aff2746e5606f7770ae6e228955444",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Page ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Page deleted successfully"
                    },
                    "404": {
                        "description": "Page not found"
                    }
                }
            }
        },
        "/api/password-resets": {
            "get": {
                "tags": [
                    "PasswordResets"
                ],
                "summary": "Retrieve all password resets",
                "description": "List all Password Resets.",
                "operationId": "08f74f254887b209c00f440495d2a7cb",
                "responses": {
                    "200": {
                        "description": "List of password resets retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/PasswordResetResource"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "post": {
                "tags": [
                    "PasswordResets"
                ],
                "summary": "Create a new password reset entry",
                "description": "Create a new Password Reset entry.",
                "operationId": "b464f43ed68314fb4f1ac989b9fdead6",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PasswordResetRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Password reset entry created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PasswordResetResource"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/api/password-resets/{id}": {
            "get": {
                "tags": [
                    "PasswordResets"
                ],
                "summary": "Get a password reset entry by ID",
                "description": "Retrieve a Password Reset entry by ID.",
                "operationId": "7cbf6afd382484cf3413c3c73a5c314d",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Password Reset entry ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Password reset entry retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PasswordResetResource"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Password reset entry not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "PasswordResets"
                ],
                "summary": "Update an existing password reset entry",
                "description": "Update an existing Password Reset entry.",
                "operationId": "c898e47a1e195f6285e1898a84588295",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Password Reset entry ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PasswordResetRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Password reset entry updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PasswordResetResource"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "delete": {
                "tags": [
                    "PasswordResets"
                ],
                "summary": "Delete a password reset entry",
                "description": "Delete a Password Reset entry by ID.",
                "operationId": "90039031aca0fd14146bb6b2823fdd11",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Password Reset entry ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Password reset entry deleted successfully"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/api/plans": {
            "get": {
                "tags": [
                    "Plans"
                ],
                "summary": "List all service plans",
                "description": "Retrieve all service plans.",
                "operationId": "4e3e92c13601df1524868f6665beb769",
                "responses": {
                    "200": {
                        "description": "List of service plans retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/PlanResource"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "post": {
                "tags": [
                    "Plans"
                ],
                "summary": "Create a new service plan",
                "description": "Create a new service plan.",
                "operationId": "258534693abeb52bd16603f720563837",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PlanRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Service plan created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PlanResource"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation Error"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/api/plans/{id}": {
            "get": {
                "tags": [
                    "Plans"
                ],
                "summary": "Get a service plan by ID",
                "description": "Retrieve a specific service plan by ID.",
                "operationId": "fc4c4a4f2976cc009b1027f99d6ef7db",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Plan ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Service plan retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PlanResource"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Service plan not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "Plans"
                ],
                "summary": "Update a service plan",
                "description": "Update an existing service plan.",
                "operationId": "72b38bf261ae3c5ce18ea3ad86db78bc",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Plan ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PlanRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Service plan updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PlanResource"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation Error"
                    },
                    "404": {
                        "description": "Service plan not found"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Plans"
                ],
                "summary": "Delete a service plan",
                "description": "Delete a service plan.",
                "operationId": "434f2725f5df8287b12f70ca4e75a6d3",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Plan ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Service plan deleted successfully"
                    },
                    "404": {
                        "description": "Service plan not found"
                    }
                }
            }
        },
        "/api/service-actions": {
            "get": {
                "tags": [
                    "ServiceActions"
                ],
                "summary": "List all service actions",
                "description": "Retrieve all service actions.",
                "operationId": "b57f57e15f1481658e621a797fc4106f",
                "responses": {
                    "200": {
                        "description": "List of service actions retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ServiceActionResource"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "post": {
                "tags": [
                    "ServiceActions"
                ],
                "summary": "Create a new service action",
                "description": "Create a new service action.",
                "operationId": "b5e8a341a5e1ff49b37610fc2b71b137",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ServiceActionRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Service action created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServiceActionResource"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation Error"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/api/service-actions/{id}": {
            "get": {
                "tags": [
                    "ServiceActions"
                ],
                "summary": "Get a service action by ID",
                "description": "Retrieve a specific service action by ID.",
                "operationId": "9672e93ef1f76ef772c8b719007bb63e",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Service action ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Service action retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServiceActionResource"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Service action not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "ServiceActions"
                ],
                "summary": "Update a service action",
                "description": "Update an existing service action.",
                "operationId": "54b37056a6b4ebc1b868e6878406352c",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Service action ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ServiceActionRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Service action updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServiceActionResource"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation Error"
                    },
                    "404": {
                        "description": "Service action not found"
                    }
                }
            },
            "delete": {
                "tags": [
                    "ServiceActions"
                ],
                "summary": "Delete a service action",
                "description": "Delete a service action.",
                "operationId": "b5aeb187c1855c3dc72e4cbde8758ac4",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Service action ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Service action deleted successfully"
                    },
                    "404": {
                        "description": "Service action not found"
                    }
                }
            }
        },
        "/api/services": {
            "get": {
                "tags": [
                    "Services"
                ],
                "summary": "List all services",
                "description": "Retrieve all services.",
                "operationId": "8c9ebb1796fc9353394e3398db68889e",
                "responses": {
                    "200": {
                        "description": "List of services retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ServiceResource"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "post": {
                "tags": [
                    "Services"
                ],
                "summary": "Create a new service",
                "description": "Create a new service.",
                "operationId": "2ed732944d57ef40baf054b4bd297f75",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ServiceRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Service created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServiceResource"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation Error"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/api/services/{id}": {
            "get": {
                "tags": [
                    "Services"
                ],
                "summary": "Get a service by ID",
                "description": "Retrieve a specific service by ID.",
                "operationId": "847ecba1ae7ca8d553ba469206ca666b",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Service ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Service retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServiceResource"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Service not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "Services"
                ],
                "summary": "Update a service",
                "description": "Update an existing service.",
                "operationId": "3b6bdaf6e719e47932e6f6f6ef985027",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Service ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ServiceRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Service updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServiceResource"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation Error"
                    },
                    "404": {
                        "description": "Service not found"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Services"
                ],
                "summary": "Delete a service",
                "description": "Delete a service.",
                "operationId": "a2a32897e0922f881e902cd0950a7f5b",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Service ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Service deleted successfully"
                    },
                    "404": {
                        "description": "Service not found"
                    }
                }
            }
        },
        "/api/boards": {
            "get": {
                "tags": [
                    "Boards"
                ],
                "summary": "List all boards",
                "description": "Retrieve all boards.",
                "operationId": "518a18dbde5e9432de15a88b1b77b4a1",
                "responses": {
                    "200": {
                        "description": "List of boards retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/BoardResource"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "post": {
                "tags": [
                    "Boards"
                ],
                "summary": "Create a new board",
                "description": "Create a new board.",
                "operationId": "e5c379452a0824c367e7144ec1309df5",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BoardRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Board created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BoardResource"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation Error"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/api/boards/{id}": {
            "get": {
                "tags": [
                    "Boards"
                ],
                "summary": "Get a board by ID",
                "description": "Retrieve a specific board by ID.",
                "operationId": "126bc0b3f91f8a40c4423973e167028d",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Board ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Board retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BoardResource"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Board not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "Boards"
                ],
                "summary": "Update a board",
                "description": "Update an existing board.",
                "operationId": "21c3b2cc35ad6f8cfc784df759d7d78d",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Board ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BoardRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Board updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BoardResource"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation Error"
                    },
                    "404": {
                        "description": "Board not found"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Boards"
                ],
                "summary": "Delete a board",
                "description": "Delete a board.",
                "operationId": "38a9b174306e6dcf7cdc95e91aeaaa48",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Board ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Board deleted successfully"
                    },
                    "404": {
                        "description": "Board not found"
                    }
                }
            }
        },
        "/api/columns": {
            "get": {
                "tags": [
                    "Columns"
                ],
                "summary": "List all columns",
                "description": "Retrieve all columns.",
                "operationId": "71bc568e1a8be4f477eb87b8f8fc2ccc",
                "responses": {
                    "200": {
                        "description": "List of columns retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ColumnResource"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "post": {
                "tags": [
                    "Columns"
                ],
                "summary": "Create a new column",
                "description": "Create a new column.",
                "operationId": "433cca645264e56ea8c99fee4769bee8",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ColumnRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Column created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ColumnResource"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation Error"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/api/columns/{id}": {
            "get": {
                "tags": [
                    "Columns"
                ],
                "summary": "Get a column by ID",
                "description": "Retrieve a specific column by ID.",
                "operationId": "fe81e74b935044ad7288df129b3654cf",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Column ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Column retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ColumnResource"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Column not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "Columns"
                ],
                "summary": "Update a column",
                "description": "Update an existing column.",
                "operationId": "747820613ecf531e9b8235adbeb6371d",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Column ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ColumnRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Column updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ColumnResource"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation Error"
                    },
                    "404": {
                        "description": "Column not found"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Columns"
                ],
                "summary": "Delete a column",
                "description": "Delete a column.",
                "operationId": "c65e16feb9194b7c593f28c7e733e2b7",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Column ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Column deleted successfully"
                    },
                    "404": {
                        "description": "Column not found"
                    }
                }
            }
        },
        "/api/labels": {
            "get": {
                "tags": [
                    "Labels"
                ],
                "summary": "List all labels",
                "description": "Retrieve all labels.",
                "operationId": "197346f9af899c66720d664a02fd9e54",
                "responses": {
                    "200": {
                        "description": "List of labels retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/LabelResource"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "post": {
                "tags": [
                    "Labels"
                ],
                "summary": "Create a new label",
                "description": "Create a new label.",
                "operationId": "2f5760667161df4ff9466eb6b103dd4d",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/LabelRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Label created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/LabelResource"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation Error"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/api/labels/{id}": {
            "get": {
                "tags": [
                    "Labels"
                ],
                "summary": "Get a label by ID",
                "description": "Retrieve a specific label by ID.",
                "operationId": "899a7611eb3dd1b64315be8de16bc886",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Label ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Label retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/LabelResource"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Label not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "Labels"
                ],
                "summary": "Update a label",
                "description": "Update an existing label.",
                "operationId": "2d55fceea14ba8b76e3c1bee50699706",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Label ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/LabelRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Label updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/LabelResource"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation Error"
                    },
                    "404": {
                        "description": "Label not found"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Labels"
                ],
                "summary": "Delete a label",
                "description": "Delete a label.",
                "operationId": "cc749f6ea9cc15fbd93bbb9d1c02acac",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Label ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Label deleted successfully"
                    },
                    "404": {
                        "description": "Label not found"
                    }
                }
            }
        },
        "/api/label-tasks": {
            "get": {
                "tags": [
                    "LabelTasks"
                ],
                "summary": "List all label-task relationships",
                "description": "Retrieve all label-task relationships.",
                "operationId": "0b5d700df19c819dace871fc76e2b361",
                "responses": {
                    "200": {
                        "description": "List of label-task relationships retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/LabelTaskResource"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "post": {
                "tags": [
                    "LabelTasks"
                ],
                "summary": "Create a new label-task relationship",
                "description": "Create a new label-task relationship.",
                "operationId": "1cda9c6c478ed01c48b52cc0efb6421c",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/LabelTaskRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Label-task relationship created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/LabelTaskResource"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation Error"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/api/label-tasks/{id}": {
            "get": {
                "tags": [
                    "LabelTasks"
                ],
                "summary": "Get a label-task relationship by ID",
                "description": "Retrieve a specific label-task relationship by ID.",
                "operationId": "b10840e9ffeb71d9483920c84c32c11c",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Label-task relationship ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Label-task relationship retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/LabelTaskResource"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Label-task relationship not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "LabelTasks"
                ],
                "summary": "Update a label-task relationship",
                "description": "Update an existing label-task relationship.",
                "operationId": "fa1aa084d033d929bb55dc8ca66e8db5",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Label-task relationship ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/LabelTaskRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Label-task relationship updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/LabelTaskResource"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation Error"
                    },
                    "404": {
                        "description": "Label-task relationship not found"
                    }
                }
            },
            "delete": {
                "tags": [
                    "LabelTasks"
                ],
                "summary": "Delete a label-task relationship",
                "description": "Delete a label-task relationship.",
                "operationId": "3dd245570452340cf748f12c1c1a7d53",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Label-task relationship ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Label-task relationship deleted successfully"
                    },
                    "404": {
                        "description": "Label-task relationship not found"
                    }
                }
            }
        },
        "/api/task-attachments": {
            "get": {
                "tags": [
                    "Task Attachments"
                ],
                "summary": "List all task attachments",
                "description": "Retrieve all task attachments.",
                "operationId": "039cf2674a082ee220cd9e58d56ca3e1",
                "responses": {
                    "200": {
                        "description": "List of task attachments retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/TaskAttachmentResource"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "post": {
                "tags": [
                    "Task Attachments"
                ],
                "summary": "Create a new task attachment",
                "description": "Create a new task attachment.",
                "operationId": "18b524eabd77e59e1cfdb5feaaedcb82",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TaskAttachmentRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Task attachment created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TaskAttachmentResource"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation error"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/api/task-attachments/{id}": {
            "get": {
                "tags": [
                    "Task Attachments"
                ],
                "summary": "Get a task attachment by ID",
                "description": "Retrieve a specific task attachment by ID.",
                "operationId": "9dd08812478fb82f45ec91ea19514dc1",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Task attachment ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Task attachment retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TaskAttachmentResource"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Task attachment not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "Task Attachments"
                ],
                "summary": "Update a task attachment",
                "description": "Update an existing task attachment.",
                "operationId": "6c6cc0a28399b0db1f96629cf5d21b31",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Task attachment ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TaskAttachmentRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Task attachment updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TaskAttachmentResource"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation error"
                    },
                    "404": {
                        "description": "Task attachment not found"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Task Attachments"
                ],
                "summary": "Delete a task attachment",
                "description": "Delete a task attachment.",
                "operationId": "917fecb9778a31cead7bb1a2a534a4c7",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Task attachment ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Task attachment deleted successfully"
                    },
                    "404": {
                        "description": "Task attachment not found"
                    }
                }
            }
        },
        "/api/task-comments": {
            "get": {
                "tags": [
                    "Task Comments"
                ],
                "summary": "List all task comments",
                "description": "Retrieve all task comments.",
                "operationId": "4b490d85dda1611ab7113d24e738b887",
                "responses": {
                    "200": {
                        "description": "List of task comments retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/TaskCommentResource"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "post": {
                "tags": [
                    "Task Comments"
                ],
                "summary": "Create a new task comment",
                "description": "Create a new task comment.",
                "operationId": "8f9505cfed6d86ff0c51e73d403b39f0",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TaskCommentRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Task comment created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TaskCommentResource"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation Error"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/api/task-comments/{id}": {
            "get": {
                "tags": [
                    "Task Comments"
                ],
                "summary": "Get a task comment by ID",
                "description": "Retrieve a specific task comment by ID.",
                "operationId": "29c336d897ae4be355cdbfb3ad5e6dcc",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Task comment ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Task comment retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TaskCommentResource"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Task comment not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "Task Comments"
                ],
                "summary": "Update a task comment",
                "description": "Update an existing task comment.",
                "operationId": "52b490b611edfed631dc69ffe3e95f79",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Task comment ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TaskCommentRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Task comment updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TaskCommentResource"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation Error"
                    },
                    "404": {
                        "description": "Task comment not found"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Task Comments"
                ],
                "summary": "Delete a task comment",
                "description": "Delete a task comment.",
                "operationId": "c716c57e601d57fb346589501c7b896e",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Task comment ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Task comment deleted successfully"
                    },
                    "404": {
                        "description": "Task comment not found"
                    }
                }
            }
        },
        "/api/tasks": {
            "get": {
                "tags": [
                    "Tasks"
                ],
                "summary": "List all tasks",
                "description": "Retrieve all tasks.",
                "operationId": "158a628873e482116cfcf394fd34c059",
                "responses": {
                    "200": {
                        "description": "List of tasks retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/TaskResource"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "post": {
                "tags": [
                    "Tasks"
                ],
                "summary": "Create a new task",
                "description": "Create a new task.",
                "operationId": "59e69952a94b1cdc74e9b5d91456dcd3",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TaskRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Task created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TaskResource"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation Error"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/api/tasks/{id}": {
            "get": {
                "tags": [
                    "Tasks"
                ],
                "summary": "Get a task by ID",
                "description": "Retrieve a specific task by ID.",
                "operationId": "5ac29d1f979e6ec03ce0bc30174ac4a0",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Task ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Task retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TaskResource"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Task not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "Tasks"
                ],
                "summary": "Update a task",
                "description": "Update an existing task.",
                "operationId": "e15c0dd7869aff76e299c55a77c32c57",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Task ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TaskRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Task updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TaskResource"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation Error"
                    },
                    "404": {
                        "description": "Task not found"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Tasks"
                ],
                "summary": "Delete a task",
                "description": "Delete a task.",
                "operationId": "87e3f55c10c3a3486383410d035207d7",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Task ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Task deleted successfully"
                    },
                    "404": {
                        "description": "Task not found"
                    }
                }
            }
        },
        "/api/tickets": {
            "get": {
                "tags": [
                    "Tickets"
                ],
                "summary": "List all tickets",
                "description": "Retrieve all tickets.",
                "operationId": "aa173082967dc1109d4a82b9975ba6b8",
                "responses": {
                    "200": {
                        "description": "List of tickets retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/TicketResource"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "post": {
                "tags": [
                    "Tickets"
                ],
                "summary": "Create a new ticket",
                "description": "Create a new ticket.",
                "operationId": "ea682b4b2e24c649aeab9e4862602294",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TicketRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Ticket created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TicketResource"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/api/tickets/{id}": {
            "get": {
                "tags": [
                    "Tickets"
                ],
                "summary": "Get a ticket by ID",
                "description": "Retrieve a ticket by ID.",
                "operationId": "7d9ae46a6f051e4bbab3955f0ee3aa1d",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Ticket ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ticket retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TicketResource"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Ticket not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "Tickets"
                ],
                "summary": "Update a ticket",
                "description": "Update an existing ticket.",
                "operationId": "5a7fa169028b7276a7d8bc10ce45159d",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Ticket ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TicketRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Ticket updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TicketResource"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Tickets"
                ],
                "summary": "Delete a ticket",
                "description": "Delete a ticket.",
                "operationId": "92e8553ca90169f3008d45c84349feaf",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Ticket ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ticket deleted successfully"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        }
    },
    "components": {
        "schemas": {
            "BoxRequest": {
                "title": "Box Request Schema",
                "description": "Schema for creating or updating a box",
                "required": [
                    "name"
                ],
                "properties": {
                    "name": {
                        "description": "Name of the box",
                        "type": "string",
                        "maxLength": 255,
                        "example": "Example Box"
                    },
                    "users": {
                        "description": "Associated users in the box",
                        "type": "string",
                        "maxLength": 255,
                        "example": "[1,2,3]"
                    }
                },
                "type": "object"
            },
            "BoxResource": {
                "title": "Box Resource Schema",
                "description": "Representation of a box",
                "type": "object",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/BoxRequest"
                    },
                    {
                        "properties": {
                            "id": {
                                "description": "Unique identifier of the box",
                                "type": "integer",
                                "example": 1
                            }
                        },
                        "type": "object"
                    }
                ]
            },
            "ContractRequest": {
                "title": "Contract Request Schema",
                "description": "Schema used for creating or updating a Contract",
                "required": [
                    "title",
                    "start_date",
                    "end_date"
                ],
                "properties": {
                    "title": {
                        "description": "The title of the contract",
                        "type": "string",
                        "example": "Service Agreement"
                    },
                    "start_date": {
                        "description": "Start date of the contract",
                        "type": "string",
                        "format": "date",
                        "example": "2023-01-01"
                    },
                    "end_date": {
                        "description": "End date of the contract",
                        "type": "string",
                        "format": "date",
                        "example": "2023-12-31"
                    },
                    "details": {
                        "description": "Additional details about the contract",
                        "type": "string",
                        "example": "This contract covers IT services."
                    }
                },
                "type": "object"
            },
            "ContractResource": {
                "title": "Contract Resource Schema",
                "description": "Response structure for a contract",
                "properties": {
                    "id": {
                        "description": "The ID of the contract",
                        "type": "integer",
                        "example": 1
                    },
                    "title": {
                        "description": "The title of the contract",
                        "type": "string",
                        "example": "Service Agreement"
                    },
                    "start_date": {
                        "description": "Start date of the contract",
                        "type": "string",
                        "format": "date",
                        "example": "2023-01-01"
                    },
                    "end_date": {
                        "description": "End date of the contract",
                        "type": "string",
                        "format": "date",
                        "example": "2023-12-31"
                    },
                    "details": {
                        "description": "Additional details about the contract",
                        "type": "string",
                        "example": "This contract covers IT services."
                    },
                    "created_at": {
                        "description": "When the contract was created",
                        "type": "string",
                        "format": "date-time",
                        "example": "2023-01-01T12:00:00Z"
                    },
                    "updated_at": {
                        "description": "When the contract was last updated",
                        "type": "string",
                        "format": "date-time",
                        "example": "2023-10-01T12:45:00Z"
                    }
                },
                "type": "object"
            },
            "AddressRequest": {
                "title": "Address Request Schema",
                "description": "Schema for creating or updating an address",
                "required": [
                    "customer_id",
                    "customer_name",
                    "address",
                    "city",
                    "state_province",
                    "postal_code",
                    "country",
                    "address_type"
                ],
                "properties": {
                    "customer_id": {
                        "description": "Customer ID associated with the address",
                        "type": "integer",
                        "example": 1
                    },
                    "customer_name": {
                        "description": "Customer name",
                        "type": "string",
                        "example": "John Doe"
                    },
                    "address": {
                        "description": "Street address",
                        "type": "string",
                        "example": "123 Main St"
                    },
                    "city": {
                        "description": "City",
                        "type": "string",
                        "example": "New York"
                    },
                    "state_province": {
                        "description": "State or Province",
                        "type": "string",
                        "example": "NY"
                    },
                    "postal_code": {
                        "description": "Postal or ZIP code",
                        "type": "string",
                        "example": "10001"
                    },
                    "country": {
                        "description": "Country",
                        "type": "string",
                        "example": "USA"
                    },
                    "address_type": {
                        "description": "Address type (billing or shipping)",
                        "type": "string",
                        "enum": [
                            "billing",
                            "shipping"
                        ],
                        "example": "billing"
                    },
                    "latitude": {
                        "description": "Latitude of the address",
                        "type": "number",
                        "format": "float",
                        "example": 40.7128
                    },
                    "longitude": {
                        "description": "Longitude of the address",
                        "type": "number",
                        "format": "float",
                        "example": -74.006
                    },
                    "created_by": {
                        "description": "ID of the user who created the address",
                        "type": "integer",
                        "example": 2
                    },
                    "updated_by": {
                        "description": "ID of the user who last updated the address",
                        "type": "integer",
                        "example": 3
                    }
                },
                "type": "object"
            },
            "AddressResource": {
                "title": "Address Resource Schema",
                "description": "Representation of an address",
                "properties": {
                    "customer_id": {
                        "description": "Customer ID",
                        "type": "integer",
                        "example": 1
                    },
                    "customer_name": {
                        "description": "Customer name",
                        "type": "string",
                        "example": "John Doe"
                    },
                    "address": {
                        "description": "Street address",
                        "type": "string",
                        "example": "123 Main St"
                    },
                    "city": {
                        "description": "City",
                        "type": "string",
                        "example": "New York"
                    },
                    "state_province": {
                        "description": "State or Province",
                        "type": "string",
                        "example": "NY"
                    },
                    "postal_code": {
                        "description": "Postal or ZIP code",
                        "type": "string",
                        "example": "10001"
                    },
                    "country": {
                        "description": "Country",
                        "type": "string",
                        "example": "USA"
                    },
                    "address_type": {
                        "description": "Address type",
                        "type": "string",
                        "enum": [
                            "billing",
                            "shipping"
                        ],
                        "example": "billing"
                    },
                    "latitude": {
                        "description": "Latitude",
                        "type": "number",
                        "format": "float",
                        "example": 40.7128
                    },
                    "longitude": {
                        "description": "Longitude",
                        "type": "number",
                        "format": "float",
                        "example": -74.006
                    },
                    "created_by": {
                        "description": "ID of the user who created the address",
                        "type": "integer",
                        "example": 2
                    },
                    "updated_by": {
                        "description": "ID of the user who last updated the address",
                        "type": "integer",
                        "example": 3
                    }
                },
                "type": "object"
            },
            "CustomerRequest": {
                "title": "Customer Request Schema",
                "description": "Schema for creating or updating a customer",
                "required": [
                    "first_name",
                    "last_name",
                    "email_address",
                    "phone_number"
                ],
                "properties": {
                    "first_name": {
                        "description": "Customer's first name",
                        "type": "string",
                        "example": "John"
                    },
                    "last_name": {
                        "description": "Customer's last name",
                        "type": "string",
                        "example": "Doe"
                    },
                    "date_of_birth": {
                        "description": "Date of birth",
                        "type": "string",
                        "format": "date",
                        "example": "1990-01-01"
                    },
                    "phone_number": {
                        "description": "Phone number",
                        "type": "string",
                        "example": "1234567890"
                    },
                    "email_address": {
                        "description": "Email address",
                        "type": "string",
                        "example": "john.doe@example.com"
                    },
                    "document_type": {
                        "description": "Document type",
                        "type": "string",
                        "example": "ID"
                    },
                    "identity_document": {
                        "description": "Identity document number",
                        "type": "string",
                        "example": "AB1234567"
                    },
                    "customer_status": {
                        "description": "Status of the customer",
                        "type": "string",
                        "enum": [
                            "active",
                            "inactive"
                        ],
                        "example": "active"
                    },
                    "additional_notes": {
                        "description": "Additional notes",
                        "type": "string",
                        "example": "Preferred contact via email."
                    },
                    "created_by": {
                        "description": "ID of the user who created the customer",
                        "type": "integer",
                        "example": 2
                    },
                    "updated_by": {
                        "description": "ID of the user who updated the customer",
                        "type": "integer",
                        "example": 2
                    },
                    "password": {
                        "description": "Customer password",
                        "type": "string",
                        "example": "hashedPassword123"
                    },
                    "password_reset_token": {
                        "description": "Password reset token",
                        "type": "string",
                        "example": "resetToken123456"
                    },
                    "remember_token": {
                        "description": "Remember token",
                        "type": "string",
                        "example": "rememberMeToken123"
                    },
                    "password_reset_token_expiration": {
                        "description": "Expiration of the password reset token",
                        "type": "string",
                        "format": "date",
                        "example": "2023-11-01"
                    }
                },
                "type": "object"
            },
            "CustomerResource": {
                "title": "Customer Resource Schema",
                "description": "Representation of a customer",
                "properties": {
                    "id": {
                        "description": "Customer ID",
                        "type": "integer",
                        "example": 1
                    },
                    "first_name": {
                        "description": "Customer first name",
                        "type": "string",
                        "example": "John"
                    },
                    "last_name": {
                        "description": "Customer last name",
                        "type": "string",
                        "example": "Doe"
                    },
                    "date_of_birth": {
                        "description": "Date of birth",
                        "type": "string",
                        "format": "date",
                        "example": "1990-01-01"
                    },
                    "phone_number": {
                        "description": "Phone number",
                        "type": "string",
                        "example": "1234567890"
                    },
                    "email_address": {
                        "description": "Email address",
                        "type": "string",
                        "example": "john.doe@example.com"
                    },
                    "document_type": {
                        "description": "Document type",
                        "type": "string",
                        "example": "ID"
                    },
                    "identity_document": {
                        "description": "Identity document number",
                        "type": "string",
                        "example": "AB1234567"
                    },
                    "customer_status": {
                        "description": "Customer status",
                        "type": "string",
                        "enum": [
                            "active",
                            "inactive"
                        ],
                        "example": "active"
                    },
                    "additional_notes": {
                        "description": "Additional notes",
                        "type": "string",
                        "example": "Preferred contact via email."
                    },
                    "created_by": {
                        "description": "ID of the creator",
                        "type": "integer",
                        "example": 2
                    },
                    "updated_by": {
                        "description": "ID of the updater",
                        "type": "integer",
                        "example": 2
                    },
                    "password": {
                        "description": "Encrypted customer password",
                        "type": "string",
                        "example": "hashedPassword123"
                    },
                    "password_reset_token": {
                        "description": "Password reset token",
                        "type": "string",
                        "example": "resetToken123456"
                    },
                    "remember_token": {
                        "description": "Remember me token",
                        "type": "string",
                        "example": "rememberToken123"
                    },
                    "password_reset_token_expiration": {
                        "description": "Expiration of the reset token",
                        "type": "string",
                        "format": "date",
                        "example": "2023-11-01"
                    }
                },
                "type": "object"
            },
            "DocumentTypeRequest": {
                "title": "Document Type Request Schema",
                "description": "Schema for creating or updating a document type",
                "required": [
                    "code",
                    "name"
                ],
                "properties": {
                    "code": {
                        "description": "Unique code for the document type",
                        "type": "string",
                        "example": "ID"
                    },
                    "name": {
                        "description": "Name of the document type",
                        "type": "string",
                        "example": "Identity Document"
                    }
                },
                "type": "object"
            },
            "DocumentTypeResource": {
                "title": "Document Type Resource Schema",
                "description": "Representation of a document type",
                "properties": {
                    "id": {
                        "description": "Document type ID",
                        "type": "integer",
                        "example": 1
                    },
                    "code": {
                        "description": "Unique code for the document type",
                        "type": "string",
                        "example": "ID"
                    },
                    "name": {
                        "description": "Name of the document type",
                        "type": "string",
                        "example": "Identity Document"
                    }
                },
                "type": "object"
            },
            "FiscalRegimeRequest": {
                "title": "Fiscal Regime Request Schema",
                "description": "Schema for creating or updating a fiscal regime",
                "required": [
                    "code",
                    "name"
                ],
                "properties": {
                    "code": {
                        "description": "Unique code of the fiscal regime",
                        "type": "string",
                        "example": "FR001"
                    },
                    "name": {
                        "description": "Name of the fiscal regime",
                        "type": "string",
                        "example": "General Regime"
                    }
                },
                "type": "object"
            },
            "FiscalRegimeResource": {
                "title": "Fiscal Regime Resource Schema",
                "description": "Representation of a fiscal regime",
                "properties": {
                    "id": {
                        "description": "Fiscal regime ID",
                        "type": "integer",
                        "example": 1
                    },
                    "code": {
                        "description": "Unique code of the fiscal regime",
                        "type": "string",
                        "example": "FR001"
                    },
                    "name": {
                        "description": "Name of the fiscal regime",
                        "type": "string",
                        "example": "General Regime"
                    }
                },
                "type": "object"
            },
            "TaxDetailRequest": {
                "title": "Tax Detail Request Schema",
                "description": "Schema for creating or updating tax details",
                "required": [
                    "customer_id",
                    "tax_identification_type",
                    "tax_identification_number",
                    "taxpayer_type",
                    "fiscal_regime"
                ],
                "properties": {
                    "customer_id": {
                        "description": "ID of the customer",
                        "type": "integer",
                        "example": 1
                    },
                    "tax_identification_type": {
                        "description": "Type of tax identification document",
                        "type": "string",
                        "example": "TIN"
                    },
                    "tax_identification_number": {
                        "description": "Number of the tax identification document",
                        "type": "string",
                        "example": "123456789"
                    },
                    "taxpayer_type": {
                        "description": "Type of taxpayer",
                        "type": "string",
                        "example": "Regular"
                    },
                    "fiscal_regime": {
                        "description": "Fiscal regime of the customer",
                        "type": "string",
                        "example": "General Regime"
                    },
                    "business_name": {
                        "description": "Business name of the customer (if applicable)",
                        "type": "string",
                        "example": "My Business LLC"
                    },
                    "enable_billing": {
                        "description": "Enable billing for this customer",
                        "type": "integer",
                        "enum": [
                            1,
                            0
                        ],
                        "example": 1
                    },
                    "send_notifications": {
                        "description": "Enable notifications for this customer",
                        "type": "integer",
                        "enum": [
                            1,
                            0
                        ],
                        "example": 1
                    },
                    "send_invoice": {
                        "description": "Enable invoice sending for this customer",
                        "type": "integer",
                        "enum": [
                            1,
                            0
                        ],
                        "example": 1
                    },
                    "created_by": {
                        "description": "ID of the user who created the tax detail",
                        "type": "integer",
                        "example": 1
                    },
                    "updated_by": {
                        "description": "ID of the user who last updated the tax detail",
                        "type": "integer",
                        "example": 2
                    }
                },
                "type": "object"
            },
            "TaxDetailResource": {
                "title": "Tax Detail Resource Schema",
                "description": "Representation of a tax detail",
                "properties": {
                    "id": {
                        "description": "Tax detail ID",
                        "type": "integer",
                        "example": 1
                    },
                    "customer_id": {
                        "description": "Customer ID linked to the tax detail",
                        "type": "integer",
                        "example": 1
                    },
                    "tax_identification_type": {
                        "description": "Type of tax identification document",
                        "type": "string",
                        "example": "TIN"
                    },
                    "tax_identification_number": {
                        "description": "Number of the tax identification document",
                        "type": "string",
                        "example": "123456789"
                    },
                    "taxpayer_type": {
                        "description": "Type of taxpayer",
                        "type": "string",
                        "example": "Regular"
                    },
                    "fiscal_regime": {
                        "description": "Fiscal regime",
                        "type": "string",
                        "example": "General Regime"
                    },
                    "business_name": {
                        "description": "Business name",
                        "type": "string",
                        "example": "My Business LLC"
                    },
                    "enable_billing": {
                        "description": "Enable billing (1 for true, 0 for false)",
                        "type": "integer",
                        "example": 1
                    },
                    "send_notifications": {
                        "description": "Send notifications (1 for true, 0 for false)",
                        "type": "integer",
                        "example": 1
                    },
                    "send_invoice": {
                        "description": "Send invoices (1 for true, 0 for false)",
                        "type": "integer",
                        "example": 1
                    },
                    "created_by": {
                        "description": "ID of the creator",
                        "type": "integer",
                        "example": 1
                    },
                    "updated_by": {
                        "description": "ID of the last updater",
                        "type": "integer",
                        "example": 2
                    }
                },
                "type": "object"
            },
            "TaxIdentificationTypeRequest": {
                "title": "Tax Identification Type Request Schema",
                "description": "Schema for creating or updating a tax identification type",
                "required": [
                    "code",
                    "name"
                ],
                "properties": {
                    "code": {
                        "description": "Unique code of the tax identification type",
                        "type": "string",
                        "example": "TIN"
                    },
                    "name": {
                        "description": "Name of the tax identification type",
                        "type": "string",
                        "example": "Tax Identification Number"
                    }
                },
                "type": "object"
            },
            "TaxIdentificationTypeResource": {
                "title": "Tax Identification Type Resource Schema",
                "description": "Representation of a tax identification type",
                "properties": {
                    "code": {
                        "description": "Unique code for the tax identification type",
                        "type": "string",
                        "example": "TIN"
                    },
                    "name": {
                        "description": "Name of the tax identification type",
                        "type": "string",
                        "example": "Tax Identification Number"
                    }
                },
                "type": "object"
            },
            "TaxpayerTypeRequest": {
                "title": "Taxpayer Type Request Schema",
                "description": "Schema for creating or updating a taxpayer type",
                "required": [
                    "code",
                    "name"
                ],
                "properties": {
                    "code": {
                        "description": "Unique code of the taxpayer type",
                        "type": "string",
                        "example": "REG001"
                    },
                    "name": {
                        "description": "Name of the taxpayer type",
                        "type": "string",
                        "example": "Individual"
                    }
                },
                "type": "object"
            },
            "TaxpayerTypeResource": {
                "title": "Taxpayer Type Resource Schema",
                "description": "Representation of a taxpayer type",
                "properties": {
                    "id": {
                        "description": "Identifier of the taxpayer type",
                        "type": "integer",
                        "example": 1
                    },
                    "code": {
                        "description": "Unique code of the taxpayer type",
                        "type": "string",
                        "example": "REG001"
                    },
                    "name": {
                        "description": "Name of the taxpayer type",
                        "type": "string",
                        "example": "Individual"
                    }
                },
                "type": "object"
            },
            "DailyBoxRequest": {
                "title": "Daily Box Request Schema",
                "description": "Schema for creating or updating a Daily Box",
                "required": [
                    "box_id",
                    "date",
                    "start_amount"
                ],
                "properties": {
                    "box_id": {
                        "description": "ID of the box related to the daily record",
                        "type": "integer",
                        "example": 1
                    },
                    "date": {
                        "description": "Date of the daily box record",
                        "type": "string",
                        "format": "date",
                        "example": "2023-11-01"
                    },
                    "start_amount": {
                        "description": "Start amount in the box",
                        "type": "number",
                        "format": "float",
                        "example": 1000.5
                    },
                    "end_amount": {
                        "description": "End amount in the box",
                        "type": "number",
                        "format": "float",
                        "example": 5000
                    }
                },
                "type": "object"
            },
            "DailyBoxResource": {
                "title": "Daily Box Resource Schema",
                "description": "Represents a Daily Box entry",
                "properties": {
                    "box_id": {
                        "description": "ID of the box related to the daily record",
                        "type": "integer",
                        "example": 1
                    },
                    "date": {
                        "description": "Date of the daily box record",
                        "type": "string",
                        "format": "date",
                        "example": "2023-11-01"
                    },
                    "start_amount": {
                        "description": "Start amount in the box",
                        "type": "number",
                        "format": "float",
                        "example": 1000.5
                    },
                    "end_amount": {
                        "description": "End amount in the box",
                        "type": "number",
                        "format": "float",
                        "example": 5000
                    }
                },
                "type": "object"
            },
            "EmailTemplateRequest": {
                "title": "Email Template Request Schema",
                "description": "Schema for creating or updating an email template",
                "required": [
                    "name",
                    "subject",
                    "body"
                ],
                "properties": {
                    "id": {
                        "description": "ID",
                        "type": "integer",
                        "example": 1
                    },
                    "name": {
                        "description": "Name of the email template",
                        "type": "string",
                        "example": "Welcome Email"
                    },
                    "subject": {
                        "description": "Subject of the email",
                        "type": "string",
                        "example": "Welcome to our service"
                    },
                    "body": {
                        "description": "Body content of the email",
                        "type": "string",
                        "example": "<p>Welcome to our service!</p>"
                    },
                    "styles": {
                        "description": "CSS styles for the email",
                        "type": "string",
                        "example": "<style>.main { color: blue; }</style>"
                    },
                    "entity": {
                        "description": "Entity related to the email template",
                        "type": "string",
                        "example": "User"
                    },
                    "is_active": {
                        "description": "Status of the email template (1=active, 0=inactive)",
                        "type": "integer",
                        "example": 1
                    },
                    "created_by": {
                        "description": "ID of the user who created the template",
                        "type": "integer",
                        "example": 1
                    },
                    "updated_by": {
                        "description": "ID of the user who last updated the template",
                        "type": "integer",
                        "example": 1
                    },
                    "test_email": {
                        "description": "Email used for testing the template",
                        "type": "string",
                        "example": "test@example.com"
                    },
                    "description": {
                        "description": "Description of the email template",
                        "type": "string",
                        "example": "This template is for welcoming new users."
                    }
                },
                "type": "object"
            },
            "EmailTemplateResource": {
                "title": "Email Template Resource Schema",
                "description": "Representation of an Email Template",
                "properties": {
                    "id": {
                        "description": "ID",
                        "type": "integer",
                        "example": 1
                    },
                    "name": {
                        "description": "Name of the email template",
                        "type": "string",
                        "example": "Welcome Email"
                    },
                    "subject": {
                        "description": "Subject of the email",
                        "type": "string",
                        "example": "Welcome to our service"
                    },
                    "body": {
                        "description": "Body content of the email",
                        "type": "string",
                        "example": "<p>Welcome to our service!</p>"
                    },
                    "styles": {
                        "description": "CSS styles for the email",
                        "type": "string",
                        "example": "<style>.main { color: blue; }</style>"
                    },
                    "entity": {
                        "description": "Entity related to the template",
                        "type": "string",
                        "example": "User"
                    },
                    "is_active": {
                        "description": "Status of the email template",
                        "type": "integer",
                        "example": 1
                    },
                    "created_by": {
                        "description": "User ID who created the template",
                        "type": "integer",
                        "example": 1
                    },
                    "updated_by": {
                        "description": "User ID who last updated the template",
                        "type": "integer",
                        "example": 1
                    },
                    "test_email": {
                        "description": "Email used for testing",
                        "type": "string",
                        "example": "test@example.com"
                    },
                    "description": {
                        "description": "Description of the email template",
                        "type": "string",
                        "example": "Template for welcoming users"
                    }
                },
                "type": "object"
            },
            "CashRegisterRequest": {
                "title": "Cash Register Request Schema",
                "description": "Schema for creating or updating cash registers",
                "required": [
                    "initial_balance",
                    "current_balance"
                ],
                "properties": {
                    "initial_balance": {
                        "description": "Initial balance of the cash register",
                        "type": "number",
                        "format": "float",
                        "example": 1000.5
                    },
                    "current_balance": {
                        "description": "Current balance of the cash register",
                        "type": "number",
                        "format": "float",
                        "example": 800.45
                    }
                },
                "type": "object"
            },
            "CashRegisterResource": {
                "title": "Cash Register Resource Schema",
                "description": "Representation of a cash register",
                "properties": {
                    "id": {
                        "description": "Unique identifier for the cash register",
                        "type": "integer",
                        "example": 1
                    },
                    "initial_balance": {
                        "description": "Initial balance of the cash register",
                        "type": "number",
                        "format": "float",
                        "example": 1000.5
                    },
                    "current_balance": {
                        "description": "Current balance of the cash register",
                        "type": "number",
                        "format": "float",
                        "example": 800.45
                    }
                },
                "type": "object"
            },
            "ExpenseRequest": {
                "title": "Expense Request Schema",
                "description": "Schema for creating or updating expenses",
                "required": [
                    "description",
                    "amount",
                    "date",
                    "payment_method"
                ],
                "properties": {
                    "description": {
                        "description": "Expense description",
                        "type": "string",
                        "example": "Office Supplies"
                    },
                    "amount": {
                        "description": "Amount of the expense",
                        "type": "number",
                        "format": "float",
                        "example": 150.75
                    },
                    "date": {
                        "description": "Date of the expense",
                        "type": "string",
                        "format": "date",
                        "example": "2023-11-01"
                    },
                    "payment_method": {
                        "description": "Payment method for the expense",
                        "type": "string",
                        "example": "Credit Card"
                    },
                    "category": {
                        "description": "Category of the expense",
                        "type": "string",
                        "example": "Office"
                    },
                    "supplier_id": {
                        "description": "ID of the supplier associated with the expense",
                        "type": "integer",
                        "example": 2
                    }
                },
                "type": "object"
            },
            "ExpenseResource": {
                "title": "Expense Resource Schema",
                "description": "Representation of an expense",
                "properties": {
                    "id": {
                        "description": "Unique identifier for the expense",
                        "type": "integer",
                        "example": 1
                    },
                    "description": {
                        "description": "Expense description",
                        "type": "string",
                        "example": "Office Supplies"
                    },
                    "amount": {
                        "description": "Amount of the expense",
                        "type": "number",
                        "format": "float",
                        "example": 150.75
                    },
                    "date": {
                        "description": "Date of the expense",
                        "type": "string",
                        "format": "date",
                        "example": "2023-11-01"
                    },
                    "payment_method": {
                        "description": "Payment method",
                        "type": "string",
                        "example": "Credit Card"
                    },
                    "category": {
                        "description": "Category of the expense",
                        "type": "string",
                        "example": "Office"
                    },
                    "supplier_id": {
                        "description": "ID of the supplier associated with the expense",
                        "type": "integer",
                        "example": 2
                    }
                },
                "type": "object"
            },
            "IncomeRequest": {
                "title": "Income Request Schema",
                "description": "Schema for creating or updating incomes",
                "required": [
                    "description",
                    "amount",
                    "date",
                    "payment_method"
                ],
                "properties": {
                    "description": {
                        "description": "Income description",
                        "type": "string",
                        "example": "Monthly Subscription"
                    },
                    "amount": {
                        "description": "Amount of the income",
                        "type": "number",
                        "format": "float",
                        "example": 2000.5
                    },
                    "date": {
                        "description": "Date of the income",
                        "type": "string",
                        "format": "date",
                        "example": "2023-11-01"
                    },
                    "payment_method": {
                        "description": "Payment method for the income",
                        "type": "string",
                        "example": "Bank Transfer"
                    },
                    "category": {
                        "description": "Category of the income",
                        "type": "string",
                        "example": "Services"
                    },
                    "customer_id": {
                        "description": "ID of the customer associated with the income",
                        "type": "integer",
                        "example": 1
                    },
                    "invoice_id": {
                        "description": "ID of the invoice related to the income",
                        "type": "integer",
                        "example": 101
                    }
                },
                "type": "object"
            },
            "IncomeResource": {
                "title": "Income Resource Schema",
                "description": "Representation of an income",
                "properties": {
                    "id": {
                        "description": "Unique identifier for the income",
                        "type": "integer",
                        "example": 1
                    },
                    "description": {
                        "description": "Income description",
                        "type": "string",
                        "example": "Monthly Subscription"
                    },
                    "amount": {
                        "description": "Amount of the income",
                        "type": "number",
                        "format": "float",
                        "example": 2000.5
                    },
                    "date": {
                        "description": "Date of the income",
                        "type": "string",
                        "format": "date",
                        "example": "2023-11-01"
                    },
                    "payment_method": {
                        "description": "Payment method",
                        "type": "string",
                        "example": "Bank Transfer"
                    },
                    "category": {
                        "description": "Category of the income",
                        "type": "string",
                        "example": "Services"
                    },
                    "customer_id": {
                        "description": "Customer associated with the income",
                        "type": "integer",
                        "example": 1
                    },
                    "invoice_id": {
                        "description": "Invoice associated with the income",
                        "type": "integer",
                        "example": 101
                    }
                },
                "type": "object"
            },
            "TransactionRequest": {
                "title": "Transaction Request Schema",
                "description": "Schema for creating or updating financial transactions",
                "required": [
                    "description",
                    "amount",
                    "date",
                    "type",
                    "payment_method"
                ],
                "properties": {
                    "description": {
                        "description": "Description of the transaction",
                        "type": "string",
                        "example": "Purchase Payment"
                    },
                    "amount": {
                        "description": "Transaction amount",
                        "type": "number",
                        "format": "float",
                        "example": 500
                    },
                    "date": {
                        "description": "Transaction date",
                        "type": "string",
                        "format": "date",
                        "example": "2023-11-19"
                    },
                    "type": {
                        "description": "Type of transaction (e.g., income, expense)",
                        "type": "string",
                        "example": "income"
                    },
                    "payment_method": {
                        "description": "Method of payment for the transaction",
                        "type": "string",
                        "example": "Credit Card"
                    },
                    "category": {
                        "description": "Category for the transaction",
                        "type": "string",
                        "example": "Office Supplies"
                    },
                    "cash_register_id": {
                        "description": "ID of the associated cash register",
                        "type": "integer",
                        "example": 1
                    }
                },
                "type": "object"
            },
            "TransactionResource": {
                "title": "Transaction Resource Schema",
                "description": "Representation of a financial transaction",
                "properties": {
                    "id": {
                        "description": "Unique identifier for the transaction",
                        "type": "integer",
                        "example": 1
                    },
                    "description": {
                        "description": "Description of the transaction",
                        "type": "string",
                        "example": "Purchase Payment"
                    },
                    "amount": {
                        "description": "Transaction amount",
                        "type": "number",
                        "format": "float",
                        "example": 500
                    },
                    "date": {
                        "description": "Transaction date",
                        "type": "string",
                        "format": "date",
                        "example": "2023-11-19"
                    },
                    "type": {
                        "description": "Type of transaction (e.g., income, expense)",
                        "type": "string",
                        "example": "income"
                    },
                    "payment_method": {
                        "description": "Method of payment for the transaction",
                        "type": "string",
                        "example": "Credit Card"
                    },
                    "category": {
                        "description": "Category for the transaction",
                        "type": "string",
                        "example": "Office Supplies"
                    },
                    "cash_register_id": {
                        "description": "ID of the associated cash register",
                        "type": "integer",
                        "example": 1
                    }
                },
                "type": "object"
            },
            "HtmlTemplateRequest": {
                "title": "Html Template Request Schema",
                "description": "Schema for creating or updating an HTML template",
                "required": [
                    "name",
                    "body"
                ],
                "properties": {
                    "name": {
                        "description": "Name of the HTML template",
                        "type": "string",
                        "example": "Default Template"
                    },
                    "body": {
                        "description": "HTML body content of the template",
                        "type": "string",
                        "example": "<div>Template Body</div>"
                    },
                    "styles": {
                        "description": "CSS styles for the template",
                        "type": "string",
                        "example": "<style>.main { color: black; }</style>"
                    },
                    "entity": {
                        "description": "Entity associated with this HTML template",
                        "type": "string",
                        "example": "Product"
                    }
                },
                "type": "object"
            },
            "HtmlTemplateResource": {
                "title": "HTML Template Resource Schema",
                "description": "Representation of an HTML Template",
                "properties": {
                    "id": {
                        "description": "Unique ID of the template",
                        "type": "integer",
                        "example": 1
                    },
                    "name": {
                        "description": "Name of the HTML template",
                        "type": "string",
                        "example": "Default Template"
                    },
                    "body": {
                        "description": "HTML body content of the template",
                        "type": "string",
                        "example": "<div>Template Body</div>"
                    },
                    "styles": {
                        "description": "CSS styles for the template",
                        "type": "string",
                        "example": "<style>.main { color: black; }</style>"
                    },
                    "entity": {
                        "description": "Entity associated with this HTML template",
                        "type": "string",
                        "example": "Product"
                    }
                },
                "type": "object"
            },
            "CategoryRequest": {
                "title": "Category Request Schema",
                "description": "Schema for creating or updating categories",
                "required": [
                    "name",
                    "url_key"
                ],
                "properties": {
                    "name": {
                        "description": "Name of the category",
                        "type": "string",
                        "example": "Electronics"
                    },
                    "description": {
                        "description": "Description of the category",
                        "type": "string",
                        "example": "Products related to electronics and gadgets"
                    },
                    "url_key": {
                        "description": "Unique key for the category URL",
                        "type": "string",
                        "format": "string",
                        "example": "electronics"
                    }
                },
                "type": "object"
            },
            "CategoryResource": {
                "title": "Category Resource Schema",
                "description": "Representation of a category",
                "properties": {
                    "id": {
                        "description": "Unique identifier for the category",
                        "type": "integer",
                        "example": 1
                    },
                    "name": {
                        "description": "Name of the category",
                        "type": "string",
                        "example": "Electronics"
                    },
                    "description": {
                        "description": "Description of the category",
                        "type": "string",
                        "example": "Products related to electronics and gadgets"
                    },
                    "url_key": {
                        "description": "Unique key for the category URL",
                        "type": "string",
                        "format": "string",
                        "example": "electronics"
                    }
                },
                "type": "object"
            },
            "EquipmentAssignmentRequest": {
                "title": "Equipment Assignment Request Schema",
                "description": "Schema for creating or updating equipment assignments",
                "required": [
                    "user_id",
                    "product_id",
                    "assigned_at"
                ],
                "properties": {
                    "user_id": {
                        "description": "ID of the user the equipment is assigned to",
                        "type": "integer",
                        "example": 1
                    },
                    "product_id": {
                        "description": "ID of the assigned product",
                        "type": "integer",
                        "example": 101
                    },
                    "assigned_at": {
                        "description": "Date the equipment was assigned",
                        "type": "string",
                        "format": "date",
                        "example": "2023-11-19"
                    },
                    "returned_at": {
                        "description": "Date the equipment was returned, if applicable",
                        "type": "string",
                        "format": "date",
                        "example": "2023-12-01"
                    },
                    "status": {
                        "description": "Current status of the assignment (e.g., 'Active', 'Returned')",
                        "type": "string",
                        "example": "Active"
                    },
                    "condition_on_assignment": {
                        "description": "Condition of the equipment when assigned",
                        "type": "string",
                        "example": "New"
                    },
                    "condition_on_return": {
                        "description": "Condition of the equipment when returned",
                        "type": "string",
                        "example": "Slightly Used"
                    },
                    "notes": {
                        "description": "Additional notes or comments",
                        "type": "string",
                        "example": "Handle with care"
                    }
                },
                "type": "object"
            },
            "EquipmentAssignmentResource": {
                "title": "Equipment Assignment Resource Schema",
                "description": "Representation of an equipment assignment",
                "properties": {
                    "id": {
                        "description": "Unique identifier for the assignment",
                        "type": "integer",
                        "example": 1
                    },
                    "user_id": {
                        "description": "ID of the user the equipment is assigned to",
                        "type": "integer",
                        "example": 1
                    },
                    "product_id": {
                        "description": "ID of the assigned product",
                        "type": "integer",
                        "example": 101
                    },
                    "assigned_at": {
                        "description": "Date the equipment was assigned",
                        "type": "string",
                        "format": "date",
                        "example": "2023-11-19"
                    },
                    "returned_at": {
                        "description": "Date the equipment was returned, if applicable",
                        "type": "string",
                        "format": "date",
                        "example": "2023-12-01"
                    },
                    "status": {
                        "description": "Current status of the assignment (e.g., 'Active', 'Returned')",
                        "type": "string",
                        "example": "Active"
                    },
                    "condition_on_assignment": {
                        "description": "Condition of the equipment when assigned",
                        "type": "string",
                        "example": "New"
                    },
                    "condition_on_return": {
                        "description": "Condition of the equipment when returned",
                        "type": "string",
                        "example": "Slightly Used"
                    },
                    "notes": {
                        "description": "Additional notes or comments",
                        "type": "string",
                        "example": "Handle with care"
                    }
                },
                "type": "object"
            },
            "ProductRequest": {
                "title": "Product Request Schema",
                "description": "Schema for creating or updating products",
                "required": [
                    "name",
                    "sku",
                    "price",
                    "url_key",
                    "warehouse_id",
                    "category_id"
                ],
                "properties": {
                    "name": {
                        "description": "Name of the product",
                        "type": "string",
                        "example": "Laptop"
                    },
                    "sku": {
                        "description": "SKU (Stock Keeping Unit) of the product",
                        "type": "string",
                        "example": "LAP12345"
                    },
                    "price": {
                        "description": "Price of the product",
                        "type": "number",
                        "format": "float",
                        "example": 1200.5
                    },
                    "special_price": {
                        "description": "Special discount price for the product",
                        "type": "number",
                        "format": "float",
                        "example": 1000
                    },
                    "cost_price": {
                        "description": "Cost price of the product",
                        "type": "number",
                        "format": "float",
                        "example": 800
                    },
                    "brand": {
                        "description": "Brand of the product",
                        "type": "string",
                        "example": "Dell"
                    },
                    "qty": {
                        "description": "Quantity of the product available",
                        "type": "string",
                        "example": "50"
                    },
                    "image": {
                        "description": "URL of the product image",
                        "type": "string",
                        "example": "/images/laptop.png"
                    },
                    "description": {
                        "description": "Description of the product",
                        "type": "string",
                        "example": "High-performance laptop for work and gaming"
                    },
                    "reference": {
                        "description": "Reference or additional product information",
                        "type": "string",
                        "example": "Model X"
                    },
                    "taxes": {
                        "description": "Tax percentage applicable to the product",
                        "type": "number",
                        "format": "float",
                        "example": 18
                    },
                    "status": {
                        "description": "Status of the product (1 for active, 0 for inactive)",
                        "type": "integer",
                        "example": 1
                    },
                    "url_key": {
                        "description": "Unique key for the product URL",
                        "type": "string",
                        "example": "laptop-dell-x"
                    },
                    "warehouse_id": {
                        "description": "Warehouse ID where the product is stored",
                        "type": "integer",
                        "example": 1
                    },
                    "category_id": {
                        "description": "Category ID to which the product belongs",
                        "type": "integer",
                        "example": 3
                    }
                },
                "type": "object"
            },
            "ProductResource": {
                "title": "Product Resource Schema",
                "description": "Representation of a product",
                "properties": {
                    "id": {
                        "description": "Unique identifier for the product",
                        "type": "integer",
                        "example": 1
                    },
                    "name": {
                        "description": "Name of the product",
                        "type": "string",
                        "example": "Laptop"
                    },
                    "sku": {
                        "description": "SKU (Stock Keeping Unit) of the product",
                        "type": "string",
                        "example": "LAP12345"
                    },
                    "price": {
                        "description": "Price of the product",
                        "type": "number",
                        "format": "float",
                        "example": 1200.5
                    },
                    "special_price": {
                        "description": "Special discount price for the product",
                        "type": "number",
                        "format": "float",
                        "example": 1000
                    },
                    "cost_price": {
                        "description": "Cost price of the product",
                        "type": "number",
                        "format": "float",
                        "example": 800
                    },
                    "brand": {
                        "description": "Brand of the product",
                        "type": "string",
                        "example": "Dell"
                    },
                    "qty": {
                        "description": "Quantity of the product available",
                        "type": "string",
                        "example": "50"
                    },
                    "image": {
                        "description": "URL of the product image",
                        "type": "string",
                        "example": "/images/laptop.png"
                    },
                    "description": {
                        "description": "Description of the product",
                        "type": "string",
                        "example": "High-performance laptop for work and gaming"
                    },
                    "reference": {
                        "description": "Reference or additional product information",
                        "type": "string",
                        "example": "Model X"
                    },
                    "taxes": {
                        "description": "Tax percentage applicable to the product",
                        "type": "number",
                        "format": "float",
                        "example": 18
                    },
                    "status": {
                        "description": "Status of the product (1 for active, 0 for inactive)",
                        "type": "integer",
                        "example": 1
                    },
                    "url_key": {
                        "description": "Unique key for the product URL",
                        "type": "string",
                        "example": "laptop-dell-x"
                    },
                    "warehouse_id": {
                        "description": "Warehouse ID where the product is stored",
                        "type": "integer",
                        "example": 1
                    },
                    "category_id": {
                        "description": "Category ID to which the product belongs",
                        "type": "integer",
                        "example": 3
                    }
                },
                "type": "object"
            },
            "SupplierRequest": {
                "title": "Supplier Request Schema",
                "description": "Schema for creating or updating suppliers",
                "required": [
                    "name",
                    "contact",
                    "document",
                    "email"
                ],
                "properties": {
                    "name": {
                        "description": "Name of the supplier",
                        "type": "string",
                        "example": "Tech Supplies Inc."
                    },
                    "contact": {
                        "description": "Contact person or department",
                        "type": "string",
                        "example": "John Doe"
                    },
                    "document": {
                        "description": "Unique identification document of the supplier",
                        "type": "string",
                        "example": "12345XYZ"
                    },
                    "email": {
                        "description": "Email address of the supplier",
                        "type": "string",
                        "format": "email",
                        "example": "contact@techsupplies.com"
                    },
                    "description": {
                        "description": "Short description of the supplier",
                        "type": "string",
                        "example": "Supplier of electronic parts"
                    },
                    "country": {
                        "description": "Country of the supplier",
                        "type": "string",
                        "example": "USA"
                    },
                    "city": {
                        "description": "City of the supplier",
                        "type": "string",
                        "example": "New York"
                    },
                    "postal_code": {
                        "description": "Postal/ZIP code of the supplier",
                        "type": "string",
                        "example": "10001"
                    },
                    "phone": {
                        "description": "Phone number of the supplier",
                        "type": "string",
                        "example": "+1 555-1234"
                    }
                },
                "type": "object"
            },
            "SupplierResource": {
                "title": "Supplier Resource Schema",
                "description": "Representation of a supplier",
                "properties": {
                    "id": {
                        "description": "Unique identifier for the supplier",
                        "type": "integer",
                        "example": 1
                    },
                    "name": {
                        "description": "Name of the supplier",
                        "type": "string",
                        "example": "Tech Supplies Inc."
                    },
                    "contact": {
                        "description": "Contact person or department",
                        "type": "string",
                        "example": "John Doe"
                    },
                    "document": {
                        "description": "Unique identification document of the supplier",
                        "type": "string",
                        "example": "12345XYZ"
                    },
                    "email": {
                        "description": "Email address of the supplier",
                        "type": "string",
                        "format": "email",
                        "example": "contact@techsupplies.com"
                    },
                    "description": {
                        "description": "Short description of the supplier",
                        "type": "string",
                        "example": "Supplier of electronic parts"
                    },
                    "country": {
                        "description": "Country of the supplier",
                        "type": "string",
                        "example": "USA"
                    },
                    "city": {
                        "description": "City of the supplier",
                        "type": "string",
                        "example": "New York"
                    },
                    "postal_code": {
                        "description": "Postal/ZIP code of the supplier",
                        "type": "string",
                        "example": "10001"
                    },
                    "phone": {
                        "description": "Phone number of the supplier",
                        "type": "string",
                        "example": "+1 555-1234"
                    }
                },
                "type": "object"
            },
            "WarehouseRequest": {
                "title": "Warehouse Request Schema",
                "description": "Schema for creating or updating warehouses",
                "required": [
                    "name",
                    "address",
                    "code"
                ],
                "properties": {
                    "name": {
                        "description": "Name of the warehouse",
                        "type": "string",
                        "example": "Main Warehouse"
                    },
                    "address": {
                        "description": "Address of the warehouse",
                        "type": "string",
                        "example": "123 Main St, Cityville"
                    },
                    "code": {
                        "description": "Unique code for the warehouse",
                        "type": "string",
                        "example": "MW001"
                    }
                },
                "type": "object"
            },
            "WarehouseResource": {
                "title": "Warehouse Resource Schema",
                "description": "Representation of a warehouse",
                "properties": {
                    "id": {
                        "description": "Unique identifier for the warehouse",
                        "type": "integer",
                        "example": 1
                    },
                    "name": {
                        "description": "Name of the warehouse",
                        "type": "string",
                        "example": "Main Warehouse"
                    },
                    "address": {
                        "description": "Address of the warehouse",
                        "type": "string",
                        "example": "123 Main St, Cityville"
                    },
                    "code": {
                        "description": "Unique code for the warehouse",
                        "type": "string",
                        "example": "MW001"
                    }
                },
                "type": "object"
            },
            "CreditNoteRequest": {
                "title": "Credit Note Request Schema",
                "description": "Schema for creating or updating credit notes",
                "required": [
                    "invoice_id",
                    "user_id",
                    "amount",
                    "issue_date",
                    "reason"
                ],
                "properties": {
                    "invoice_id": {
                        "description": "ID of the related invoice",
                        "type": "integer",
                        "example": 5
                    },
                    "user_id": {
                        "description": "ID of the user associated with the credit note",
                        "type": "integer",
                        "example": 2
                    },
                    "amount": {
                        "description": "Amount of the credit note",
                        "type": "number",
                        "format": "float",
                        "example": 150.5
                    },
                    "issue_date": {
                        "description": "Issue date of the credit note",
                        "type": "string",
                        "format": "date",
                        "example": "2023-10-15"
                    },
                    "reason": {
                        "description": "Reason for issuing the credit note",
                        "type": "string",
                        "example": "Refund for overbilling"
                    }
                },
                "type": "object"
            },
            "CreditNoteResource": {
                "title": "Credit Note Resource Schema",
                "description": "Representation of a credit note",
                "properties": {
                    "id": {
                        "description": "Unique identifier for the credit note",
                        "type": "integer",
                        "example": 1
                    },
                    "invoice_id": {
                        "description": "ID of the related invoice",
                        "type": "integer",
                        "example": 5
                    },
                    "user_id": {
                        "description": "ID of the user associated with the credit note",
                        "type": "integer",
                        "example": 2
                    },
                    "amount": {
                        "description": "Amount of the credit note",
                        "type": "number",
                        "format": "float",
                        "example": 150.5
                    },
                    "issue_date": {
                        "description": "Issue date of the credit note",
                        "type": "string",
                        "format": "date",
                        "example": "2023-10-15"
                    },
                    "reason": {
                        "description": "Reason for issuing the credit note",
                        "type": "string",
                        "example": "Refund for overbilling"
                    }
                },
                "type": "object"
            },
            "DailyInvoiceBalanceRequest": {
                "title": "Daily Invoice Balance Request Schema",
                "description": "Schema for creating or updating daily invoice balances",
                "required": [
                    "date",
                    "total_invoices",
                    "paid_invoices",
                    "total_subtotal",
                    "total_tax",
                    "total_amount",
                    "total_discount",
                    "total_outstanding_balance",
                    "total_revenue"
                ],
                "properties": {
                    "date": {
                        "description": "Date for the invoice balance",
                        "type": "string",
                        "format": "date",
                        "example": "2023-10-20"
                    },
                    "total_invoices": {
                        "description": "Total number of invoices for the day",
                        "type": "integer",
                        "example": 100
                    },
                    "paid_invoices": {
                        "description": "Total number of paid invoices",
                        "type": "integer",
                        "example": 80
                    },
                    "total_subtotal": {
                        "description": "Total subtotal amount for the day",
                        "type": "number",
                        "format": "float",
                        "example": 5000
                    },
                    "total_tax": {
                        "description": "Total tax amount for the day",
                        "type": "number",
                        "format": "float",
                        "example": 750
                    },
                    "total_amount": {
                        "description": "Total amount for the day including tax",
                        "type": "number",
                        "format": "float",
                        "example": 5750
                    },
                    "total_discount": {
                        "description": "Total discount applied on all invoices",
                        "type": "number",
                        "format": "float",
                        "example": 500
                    },
                    "total_outstanding_balance": {
                        "description": "Total outstanding balance for the day",
                        "type": "number",
                        "format": "float",
                        "example": 250
                    },
                    "total_revenue": {
                        "description": "Total revenue for the day",
                        "type": "number",
                        "format": "float",
                        "example": 5500
                    }
                },
                "type": "object"
            },
            "DailyInvoiceBalanceResource": {
                "title": "Daily Invoice Balance Resource Schema",
                "description": "Representation of a daily invoice balance",
                "properties": {
                    "id": {
                        "description": "Unique identifier for the daily invoice balance",
                        "type": "integer",
                        "example": 1
                    },
                    "date": {
                        "description": "The date for the balance",
                        "type": "string",
                        "format": "date",
                        "example": "2023-10-20"
                    },
                    "total_invoices": {
                        "description": "Total invoices for the day",
                        "type": "integer",
                        "example": 100
                    },
                    "paid_invoices": {
                        "description": "Invoices paid during the day",
                        "type": "integer",
                        "example": 80
                    },
                    "total_subtotal": {
                        "description": "Total subtotal amount",
                        "type": "number",
                        "format": "float",
                        "example": 5000
                    },
                    "total_tax": {
                        "description": "Total tax collected",
                        "type": "number",
                        "format": "float",
                        "example": 750
                    },
                    "total_amount": {
                        "description": "Total amount including tax",
                        "type": "number",
                        "format": "float",
                        "example": 5750
                    },
                    "total_discount": {
                        "description": "Discount applied to invoices",
                        "type": "number",
                        "format": "float",
                        "example": 500
                    },
                    "total_outstanding_balance": {
                        "description": "Outstanding balances for the invoices",
                        "type": "number",
                        "format": "float",
                        "example": 250
                    },
                    "total_revenue": {
                        "description": "Total revenue collected during the day",
                        "type": "number",
                        "format": "float",
                        "example": 5500
                    }
                },
                "type": "object"
            },
            "InvoiceRequest": {
                "title": "Invoice Request Schema",
                "description": "Schema for creating or updating invoices",
                "required": [
                    "increment_id",
                    "service_id",
                    "customer_id",
                    "customer_name",
                    "user_id",
                    "subtotal",
                    "tax",
                    "total",
                    "amount",
                    "status"
                ],
                "properties": {
                    "increment_id": {
                        "description": "Unique increment ID of the invoice",
                        "type": "string",
                        "example": "INV1001"
                    },
                    "service_id": {
                        "description": "ID of the service associated with the invoice",
                        "type": "integer",
                        "example": 2
                    },
                    "customer_id": {
                        "description": "ID of the customer",
                        "type": "integer",
                        "example": 1
                    },
                    "customer_name": {
                        "description": "Name of the customer",
                        "type": "string",
                        "example": "John Doe"
                    },
                    "user_id": {
                        "description": "ID of the user who created the invoice",
                        "type": "integer",
                        "example": 3
                    },
                    "subtotal": {
                        "description": "Subtotal of the invoice",
                        "type": "number",
                        "format": "float",
                        "example": 1000.5
                    },
                    "tax": {
                        "description": "Tax applied to the invoice",
                        "type": "number",
                        "format": "float",
                        "example": 200
                    },
                    "total": {
                        "description": "Total amount of the invoice",
                        "type": "number",
                        "format": "float",
                        "example": 1200.5
                    },
                    "discount": {
                        "description": "Discount applied (if any)",
                        "type": "number",
                        "format": "float",
                        "example": 50
                    },
                    "amount": {
                        "description": "Amount paid",
                        "type": "number",
                        "format": "float",
                        "example": 1150.5
                    },
                    "outstanding_balance": {
                        "description": "Outstanding balance for the invoice",
                        "type": "number",
                        "format": "float",
                        "example": 50
                    },
                    "issue_date": {
                        "description": "Date the invoice was issued",
                        "type": "string",
                        "format": "date",
                        "example": "2023-10-20"
                    },
                    "due_date": {
                        "description": "Due payment date of the invoice",
                        "type": "string",
                        "format": "date",
                        "example": "2023-11-20"
                    },
                    "status": {
                        "description": "Status of the invoice",
                        "type": "string",
                        "enum": [
                            "paid",
                            "unpaid",
                            "overdue",
                            "canceled"
                        ],
                        "example": "paid"
                    },
                    "payment_method": {
                        "description": "Payment method used for the invoice",
                        "type": "string",
                        "example": "Credit Card"
                    },
                    "notes": {
                        "description": "Additional notes for the invoice",
                        "type": "string",
                        "example": "Paid in full"
                    },
                    "payment_support": {
                        "description": "Additional payment support metadata",
                        "type": "string",
                        "example": "Ref#_PAYMENT123"
                    },
                    "daily_box_id": {
                        "description": "ID of the daily box entry for the invoice",
                        "type": "integer",
                        "example": 4
                    },
                    "created_by": {
                        "description": "User ID of the creator",
                        "type": "integer",
                        "example": 1
                    },
                    "updated_by": {
                        "description": "User ID of the updater (if applicable)",
                        "type": "integer",
                        "example": 2
                    },
                    "additional_information": {
                        "description": "Additional information JSON",
                        "type": "object",
                        "example": {
                            "extra_field": "value"
                        }
                    }
                },
                "type": "object"
            },
            "InvoiceResource": {
                "title": "Invoice Resource Schema",
                "description": "Representation of an invoice",
                "type": "object",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/InvoiceRequest"
                    },
                    {
                        "properties": {
                            "id": {
                                "description": "Unique identifier for the invoice",
                                "type": "integer",
                                "example": 10
                            }
                        },
                        "type": "object"
                    }
                ]
            },
            "PaymentPromiseRequest": {
                "title": "Payment Promise Request Schema",
                "description": "Schema for creating or updating payment promises",
                "required": [
                    "invoice_id",
                    "customer_id",
                    "user_id",
                    "amount",
                    "promise_date",
                    "status"
                ],
                "properties": {
                    "invoice_id": {
                        "description": "ID of the associated invoice",
                        "type": "integer",
                        "example": 101
                    },
                    "customer_id": {
                        "description": "ID of the customer making the promise",
                        "type": "integer",
                        "example": 5
                    },
                    "user_id": {
                        "description": "ID of the user responsible for recording the promise",
                        "type": "integer",
                        "example": 2
                    },
                    "amount": {
                        "description": "Promised payment amount",
                        "type": "number",
                        "format": "float",
                        "example": 500
                    },
                    "promise_date": {
                        "description": "Date by which payment is promised",
                        "type": "string",
                        "format": "date",
                        "example": "2023-11-01"
                    },
                    "notes": {
                        "description": "Optional notes related to the promise",
                        "type": "string",
                        "example": "Partial payment for outstanding invoice"
                    },
                    "status": {
                        "description": "Status of the payment promise",
                        "type": "string",
                        "enum": [
                            "pending",
                            "fulfilled",
                            "cancelled"
                        ],
                        "example": "pending"
                    }
                },
                "type": "object"
            },
            "PaymentPromiseResource": {
                "title": "Payment Promise Resource Schema",
                "description": "Representation of a payment promise",
                "type": "object",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/PaymentPromiseRequest"
                    },
                    {
                        "properties": {
                            "id": {
                                "description": "Unique identifier of the payment promise",
                                "type": "integer",
                                "example": 5
                            }
                        },
                        "type": "object"
                    }
                ]
            },
            "PageTranslationRequest": {
                "title": "Page Translation Request Schema",
                "description": "Schema for creating or updating page translations",
                "required": [
                    "page_id",
                    "locale",
                    "title"
                ],
                "properties": {
                    "page_id": {
                        "description": "ID of the page to which the translation belongs",
                        "type": "integer",
                        "example": 1
                    },
                    "locale": {
                        "description": "Language or locale of the translation",
                        "type": "string",
                        "maxLength": 50,
                        "example": "en"
                    },
                    "title": {
                        "description": "Title of the translated page",
                        "type": "string",
                        "maxLength": 255,
                        "example": "Homepage"
                    },
                    "meta_title": {
                        "description": "SEO meta title of the page",
                        "type": "string",
                        "maxLength": 255,
                        "example": "Welcome to our homepage"
                    },
                    "meta_description": {
                        "description": "SEO meta description",
                        "type": "string",
                        "maxLength": 255,
                        "example": "This is the homepage of our site"
                    },
                    "route": {
                        "description": "Route or URL for the translated page",
                        "type": "string",
                        "maxLength": 255,
                        "example": "/en/home"
                    }
                },
                "type": "object"
            },
            "PageTranslationResource": {
                "title": "Page Translation Resource Schema",
                "description": "Representation of a single page translation",
                "type": "object",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/PageTranslationRequest"
                    },
                    {
                        "properties": {
                            "id": {
                                "description": "Unique identifier of the page translation",
                                "type": "integer",
                                "example": 1
                            }
                        },
                        "type": "object"
                    }
                ]
            },
            "PagesRequest": {
                "title": "Pages Request Schema",
                "description": "Schema for creating or updating pages",
                "required": [
                    "name",
                    "layout",
                    "data"
                ],
                "properties": {
                    "name": {
                        "description": "Name of the page",
                        "type": "string",
                        "maxLength": 256,
                        "example": "Home Page"
                    },
                    "layout": {
                        "description": "Layout of the page",
                        "type": "string",
                        "maxLength": 256,
                        "example": "default"
                    },
                    "data": {
                        "description": "Page content data in JSON format",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "PagesResource": {
                "title": "Pages Resource Schema",
                "description": "Representation of a page",
                "type": "object",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/PagesRequest"
                    },
                    {
                        "properties": {
                            "id": {
                                "description": "Unique identifier of the page",
                                "type": "integer",
                                "example": 1
                            }
                        },
                        "type": "object"
                    }
                ]
            },
            "PasswordResetRequest": {
                "title": "Password Reset Request Schema",
                "description": "Schema for creating or updating a password reset entry",
                "required": [
                    "email",
                    "token"
                ],
                "properties": {
                    "email": {
                        "description": "Email for the password reset",
                        "type": "string",
                        "example": "user@example.com"
                    },
                    "token": {
                        "description": "Token for the password reset",
                        "type": "string",
                        "example": "abc123xyz456"
                    }
                },
                "type": "object"
            },
            "PasswordResetResource": {
                "title": "Password Reset Resource Schema",
                "description": "Representation of a Password Reset entry",
                "properties": {
                    "email": {
                        "description": "Email associated with the reset",
                        "type": "string",
                        "example": "user@example.com"
                    },
                    "token": {
                        "description": "Token used for the reset",
                        "type": "string",
                        "example": "abc123xyz456"
                    }
                },
                "type": "object"
            },
            "PlanRequest": {
                "title": "Plan Request Schema",
                "description": "Schema for creating or updating service plans",
                "required": [
                    "name",
                    "download_speed",
                    "upload_speed",
                    "monthly_price",
                    "plan_type",
                    "modality_type",
                    "status"
                ],
                "properties": {
                    "name": {
                        "description": "Name of the plan",
                        "type": "string",
                        "maxLength": 255,
                        "example": "High-Speed Internet Plan"
                    },
                    "description": {
                        "description": "Description of the plan",
                        "type": "string",
                        "example": "This is a high-speed internet plan for families."
                    },
                    "download_speed": {
                        "description": "Download speed in Mbps",
                        "type": "integer",
                        "example": 100
                    },
                    "upload_speed": {
                        "description": "Upload speed in Mbps",
                        "type": "integer",
                        "example": 50
                    },
                    "monthly_price": {
                        "description": "Monthly price of the plan",
                        "type": "number",
                        "format": "float",
                        "example": 59.99
                    },
                    "overage_fee": {
                        "description": "Fee applied for data overages",
                        "type": "number",
                        "format": "float",
                        "example": 15
                    },
                    "data_limit": {
                        "description": "Data usage limit in GB",
                        "type": "integer",
                        "example": 1000
                    },
                    "unlimited_data": {
                        "description": "Flag indicating unlimited data (1: Yes, 0: No)",
                        "type": "integer",
                        "example": 1
                    },
                    "plan_type": {
                        "description": "Type of plan offered",
                        "type": "string",
                        "enum": [
                            "internet",
                            "television",
                            "telephonic",
                            "combo"
                        ],
                        "example": "internet"
                    },
                    "modality_type": {
                        "description": "Modality of the plan",
                        "type": "string",
                        "enum": [
                            "prepaid",
                            "postpaid"
                        ],
                        "example": "postpaid"
                    },
                    "status": {
                        "description": "Status of the plan",
                        "type": "string",
                        "enum": [
                            "active",
                            "inactive"
                        ],
                        "example": "active"
                    }
                },
                "type": "object"
            },
            "PlanResource": {
                "title": "Plan Resource Schema",
                "description": "Representation of a service plan",
                "type": "object",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/PlanRequest"
                    },
                    {
                        "properties": {
                            "id": {
                                "description": "Unique identifier of the plan",
                                "type": "integer",
                                "example": 1
                            }
                        },
                        "type": "object"
                    }
                ]
            },
            "ServiceActionRequest": {
                "title": "Service Action Request Schema",
                "description": "Schema for creating or updating service actions",
                "required": [
                    "service_id",
                    "action_type",
                    "action_date",
                    "status"
                ],
                "properties": {
                    "service_id": {
                        "description": "ID of the related service",
                        "type": "integer",
                        "example": 1
                    },
                    "action_type": {
                        "description": "Type of action",
                        "type": "string",
                        "enum": [
                            "installation",
                            "uninstallation"
                        ],
                        "example": "installation"
                    },
                    "action_date": {
                        "description": "Date of the service action",
                        "type": "string",
                        "format": "date",
                        "example": "2023-11-01"
                    },
                    "action_notes": {
                        "description": "Optional notes for the action",
                        "type": "string",
                        "example": "Installation completed successfully."
                    },
                    "user_id": {
                        "description": "ID of the user performing the action",
                        "type": "integer",
                        "example": 42
                    },
                    "status": {
                        "description": "Status of the action",
                        "type": "string",
                        "enum": [
                            "pending",
                            "in_progress",
                            "completed",
                            "failed"
                        ],
                        "example": "completed"
                    },
                    "created_by": {
                        "description": "User ID who created the action",
                        "type": "integer",
                        "example": 5
                    },
                    "updated_by": {
                        "description": "User ID who last updated the action",
                        "type": "integer",
                        "example": 6
                    }
                },
                "type": "object"
            },
            "ServiceActionResource": {
                "title": "Service Action Resource Schema",
                "description": "Representation of a service action",
                "type": "object",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/ServiceActionRequest"
                    },
                    {
                        "properties": {
                            "id": {
                                "description": "Unique identifier of the service action",
                                "type": "integer",
                                "example": 1
                            }
                        },
                        "type": "object"
                    }
                ]
            },
            "ServiceRequest": {
                "title": "Service Request Schema",
                "description": "Schema for creating or updating customer services",
                "required": [
                    "router_id",
                    "customer_id",
                    "plan_id",
                    "service_status",
                    "service_type"
                ],
                "properties": {
                    "router_id": {
                        "description": "ID of the router assigned to the service",
                        "type": "integer",
                        "example": 1
                    },
                    "customer_id": {
                        "description": "ID of the customer associated with the service",
                        "type": "integer",
                        "example": 10
                    },
                    "plan_id": {
                        "description": "ID of the plan associated with the service",
                        "type": "integer",
                        "example": 5
                    },
                    "service_ip": {
                        "description": "IP address assigned to the service",
                        "type": "string",
                        "maxLength": 255,
                        "example": "192.168.1.100"
                    },
                    "service_status": {
                        "description": "Current status of the service",
                        "type": "string",
                        "enum": [
                            "active",
                            "inactive",
                            "suspended",
                            "pending",
                            "free"
                        ],
                        "example": "active"
                    },
                    "service_type": {
                        "description": "Type of service connection",
                        "type": "string",
                        "enum": [
                            "ftth",
                            "adsl",
                            "satellite"
                        ],
                        "example": "ftth"
                    },
                    "activation_date": {
                        "description": "Date the service was activated",
                        "type": "string",
                        "format": "date",
                        "example": "2022-01-15"
                    },
                    "deactivation_date": {
                        "description": "Date the service was deactivated",
                        "type": "string",
                        "format": "date",
                        "example": "2023-11-01"
                    },
                    "bandwidth": {
                        "description": "Bandwidth allocated to the service (in Mbps)",
                        "type": "integer",
                        "example": 100
                    },
                    "mac_address": {
                        "description": "MAC address of the associated device",
                        "type": "string",
                        "maxLength": 255,
                        "example": "00:11:22:33:44:55"
                    },
                    "service_location": {
                        "description": "Physical location of the service",
                        "type": "string",
                        "maxLength": 255,
                        "example": "123 Main Street, City"
                    },
                    "support_contact": {
                        "description": "Contact information for technical support",
                        "type": "string",
                        "maxLength": 255,
                        "example": "+1 234 567 890"
                    },
                    "created_by": {
                        "description": "ID of the user who created the service",
                        "type": "integer",
                        "example": 1
                    },
                    "updated_by": {
                        "description": "ID of the user who last updated the service",
                        "type": "integer",
                        "example": 2
                    }
                },
                "type": "object"
            },
            "ServiceResource": {
                "title": "Service Resource Schema",
                "description": "Representation of a customer service",
                "type": "object",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/ServiceRequest"
                    },
                    {
                        "properties": {
                            "id": {
                                "description": "Unique identifier of the service",
                                "type": "integer",
                                "example": 1
                            }
                        },
                        "type": "object"
                    }
                ]
            },
            "BoardRequest": {
                "title": "Board Request Schema",
                "description": "Schema for creating or updating ticket boards",
                "required": [
                    "name"
                ],
                "properties": {
                    "name": {
                        "description": "Name of the board",
                        "type": "string",
                        "maxLength": 255,
                        "example": "Technical Support Board"
                    },
                    "description": {
                        "description": "Description of the board",
                        "type": "string",
                        "example": "Handles technical issues and resolutions."
                    },
                    "created_by": {
                        "description": "User ID who created the board",
                        "type": "integer",
                        "example": 1
                    },
                    "updated_by": {
                        "description": "User ID who last updated the board",
                        "type": "integer",
                        "example": 2
                    }
                },
                "type": "object"
            },
            "BoardResource": {
                "title": "Board Resource Schema",
                "description": "Representation of a ticket board",
                "type": "object",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/BoardRequest"
                    },
                    {
                        "properties": {
                            "id": {
                                "description": "Unique identifier of the board",
                                "type": "integer",
                                "example": 1
                            }
                        },
                        "type": "object"
                    }
                ]
            },
            "ColumnRequest": {
                "title": "Column Request Schema",
                "description": "Schema for creating or updating a board's column",
                "required": [
                    "board_id",
                    "title"
                ],
                "properties": {
                    "board_id": {
                        "description": "ID of the board to which the column belongs",
                        "type": "integer",
                        "example": 1
                    },
                    "title": {
                        "description": "Title of the column",
                        "type": "string",
                        "maxLength": 255,
                        "example": "To Do"
                    },
                    "position": {
                        "description": "Position of the column in the board",
                        "type": "integer",
                        "example": 2
                    }
                },
                "type": "object"
            },
            "ColumnResource": {
                "title": "Column Resource Schema",
                "description": "Representation of a board's column",
                "type": "object",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/ColumnRequest"
                    },
                    {
                        "properties": {
                            "id": {
                                "description": "Unique identifier of the column",
                                "type": "integer",
                                "example": 1
                            }
                        },
                        "type": "object"
                    }
                ]
            },
            "LabelRequest": {
                "title": "Label Request Schema",
                "description": "Schema for creating or updating a label",
                "required": [
                    "name",
                    "color"
                ],
                "properties": {
                    "name": {
                        "description": "Name of the label",
                        "type": "string",
                        "maxLength": 255,
                        "example": "Urgent"
                    },
                    "color": {
                        "description": "Color code of the label",
                        "type": "string",
                        "maxLength": 255,
                        "example": "#FF0000"
                    }
                },
                "type": "object"
            },
            "LabelResource": {
                "title": "Label Resource Schema",
                "description": "Representation of a label",
                "type": "object",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/LabelRequest"
                    },
                    {
                        "properties": {
                            "id": {
                                "description": "Unique identifier of the label",
                                "type": "integer",
                                "example": 1
                            }
                        },
                        "type": "object"
                    }
                ]
            },
            "LabelTaskRequest": {
                "title": "LabelTask Request Schema",
                "description": "Schema for creating or updating a label-task relationship",
                "required": [
                    "label_id",
                    "task_id"
                ],
                "properties": {
                    "label_id": {
                        "description": "ID of the label",
                        "type": "integer",
                        "example": 1
                    },
                    "task_id": {
                        "description": "ID of the task",
                        "type": "integer",
                        "example": 101
                    }
                },
                "type": "object"
            },
            "LabelTaskResource": {
                "title": "LabelTask Resource Schema",
                "description": "Representation of a label-task relationship",
                "type": "object",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/LabelTaskRequest"
                    },
                    {
                        "properties": {
                            "id": {
                                "description": "Unique identifier of the label-task relationship",
                                "type": "integer",
                                "example": 10
                            }
                        },
                        "type": "object"
                    }
                ]
            },
            "TaskAttachmentRequest": {
                "title": "Task Attachment Request Schema",
                "description": "Schema for creating or updating a task attachment",
                "required": [
                    "task_id",
                    "file_path",
                    "file_name",
                    "uploaded_by"
                ],
                "properties": {
                    "task_id": {
                        "description": "ID of the related task",
                        "type": "integer",
                        "example": 1
                    },
                    "file_path": {
                        "description": "Path to the attached file",
                        "type": "string",
                        "maxLength": 255,
                        "example": "/uploads/task_1/file.pdf"
                    },
                    "file_name": {
                        "description": "Name of the attached file",
                        "type": "string",
                        "maxLength": 255,
                        "example": "file.pdf"
                    },
                    "uploaded_by": {
                        "description": "ID of the user who uploaded the file",
                        "type": "integer",
                        "example": 5
                    }
                },
                "type": "object"
            },
            "TaskAttachmentResource": {
                "title": "Task Attachment Resource Schema",
                "description": "Representation of a task attachment",
                "type": "object",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/TaskAttachmentRequest"
                    },
                    {
                        "properties": {
                            "id": {
                                "description": "Unique identifier of the task attachment",
                                "type": "integer",
                                "example": 100
                            }
                        },
                        "type": "object"
                    }
                ]
            },
            "TaskCommentRequest": {
                "title": "Task Comment Request Schema",
                "description": "Schema for creating or updating a task comment",
                "required": [
                    "task_id",
                    "user_id",
                    "content"
                ],
                "properties": {
                    "task_id": {
                        "description": "ID of the task",
                        "type": "integer",
                        "example": 1
                    },
                    "user_id": {
                        "description": "ID of the user who made the comment",
                        "type": "integer",
                        "example": 5
                    },
                    "content": {
                        "description": "Content of the comment",
                        "type": "string",
                        "example": "This is a comment on the task."
                    }
                },
                "type": "object"
            },
            "TaskCommentResource": {
                "title": "Task Comment Resource Schema",
                "description": "Representation of a task comment",
                "type": "object",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/TaskCommentRequest"
                    },
                    {
                        "properties": {
                            "id": {
                                "description": "Unique identifier of the comment",
                                "type": "integer",
                                "example": 10
                            }
                        },
                        "type": "object"
                    }
                ]
            },
            "TaskRequest": {
                "title": "Task Request Schema",
                "description": "Schema for creating or updating a task",
                "required": [
                    "column_id",
                    "title",
                    "priority"
                ],
                "properties": {
                    "column_id": {
                        "description": "ID of the column where the task belongs",
                        "type": "integer",
                        "example": 1
                    },
                    "title": {
                        "description": "Title of the task",
                        "type": "string",
                        "maxLength": 255,
                        "example": "Fix login bug"
                    },
                    "description": {
                        "description": "Description of the task",
                        "type": "string",
                        "example": "Details about the issue."
                    },
                    "created_by": {
                        "description": "ID of the user who created the task",
                        "type": "integer",
                        "example": 10
                    },
                    "updated_by": {
                        "description": "ID of the user who last updated the task",
                        "type": "integer",
                        "example": 15
                    },
                    "customer_id": {
                        "description": "ID of the customer related to the task",
                        "type": "integer",
                        "example": 5
                    },
                    "service_id": {
                        "description": "ID of the associated service",
                        "type": "integer",
                        "example": 3
                    },
                    "due_date": {
                        "description": "Due date for the task",
                        "type": "string",
                        "format": "date",
                        "example": "2023-12-31"
                    },
                    "priority": {
                        "description": "Priority of the task (e.g., High, Medium, Low)",
                        "type": "string",
                        "maxLength": 255,
                        "example": "High"
                    }
                },
                "type": "object"
            },
            "TaskResource": {
                "title": "Task Resource Schema",
                "description": "Representation of a task",
                "type": "object",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/TaskRequest"
                    },
                    {
                        "properties": {
                            "id": {
                                "description": "Unique identifier of the task",
                                "type": "integer",
                                "example": 100
                            }
                        },
                        "type": "object"
                    }
                ]
            },
            "TicketRequest": {
                "title": "Ticket Request Schema",
                "description": "Schema for creating or updating a ticket",
                "required": [
                    "customer_id",
                    "service_id",
                    "title",
                    "issue_type"
                ],
                "properties": {
                    "customer_id": {
                        "description": "Customer ID related to the ticket",
                        "type": "integer",
                        "example": 1
                    },
                    "service_id": {
                        "description": "Service ID related to the ticket",
                        "type": "integer",
                        "example": 42
                    },
                    "issue_type": {
                        "description": "Type of issue reported",
                        "type": "string",
                        "example": "Technical Issue"
                    },
                    "priority": {
                        "description": "Priority of the ticket",
                        "type": "string",
                        "enum": [
                            "low",
                            "medium",
                            "high",
                            "urgent"
                        ],
                        "example": "high"
                    },
                    "status": {
                        "description": "Status of the ticket",
                        "type": "string",
                        "enum": [
                            "open",
                            "in_progress",
                            "resolved",
                            "closed"
                        ],
                        "example": "open"
                    },
                    "title": {
                        "description": "Title of the ticket",
                        "type": "string",
                        "example": "Issue with software installation"
                    },
                    "description": {
                        "description": "Detailed description of the issue",
                        "type": "string",
                        "example": "The software fails to install on Windows 11."
                    },
                    "closed_at": {
                        "description": "Timestamp when the ticket was closed",
                        "type": "string",
                        "format": "date-time",
                        "example": "2023-10-15T14:53:00Z"
                    },
                    "user_id": {
                        "description": "User ID assigned to the ticket",
                        "type": "integer",
                        "example": 7
                    },
                    "resolution_notes": {
                        "description": "Resolution notes added by the team",
                        "type": "string",
                        "example": "Issue fixed by updating the software version."
                    },
                    "attachments": {
                        "description": "Attachment file paths, if any",
                        "type": "string",
                        "example": "['attachment1.png', 'attachment2.pdf']"
                    },
                    "contact_method": {
                        "description": "Preferred contact method for this ticket",
                        "type": "string",
                        "example": "Email"
                    }
                },
                "type": "object"
            },
            "TicketResource": {
                "title": "Ticket Resource Schema",
                "description": "Representation of a ticket",
                "properties": {
                    "id": {
                        "description": "Ticket ID",
                        "type": "integer",
                        "example": 10
                    },
                    "customer_id": {
                        "description": "Customer ID",
                        "type": "integer",
                        "example": 1
                    },
                    "service_id": {
                        "description": "Service ID",
                        "type": "integer",
                        "example": 42
                    },
                    "issue_type": {
                        "description": "Type of issue",
                        "type": "string",
                        "example": "Technical Issue"
                    },
                    "priority": {
                        "description": "Priority of the ticket",
                        "type": "string",
                        "enum": [
                            "low",
                            "medium",
                            "high",
                            "urgent"
                        ],
                        "example": "high"
                    },
                    "status": {
                        "description": "Status of the ticket",
                        "type": "string",
                        "enum": [
                            "open",
                            "in_progress",
                            "resolved",
                            "closed"
                        ],
                        "example": "open"
                    },
                    "title": {
                        "description": "Ticket title",
                        "type": "string",
                        "example": "Issue with software installation"
                    },
                    "description": {
                        "description": "Description of the issue",
                        "type": "string",
                        "example": "The software fails to install on Windows 11."
                    },
                    "closed_at": {
                        "description": "Timestamp of closure",
                        "type": "string",
                        "format": "date-time",
                        "example": "2023-10-15T14:53:00Z"
                    },
                    "user_id": {
                        "description": "Assigned user ID",
                        "type": "integer",
                        "example": 7
                    },
                    "resolution_notes": {
                        "description": "Resolution notes",
                        "type": "string",
                        "example": "Issue fixed by updating the software version."
                    },
                    "attachments": {
                        "description": "Array of file paths for attachments",
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "example": "['attachment1.png', 'attachment2.pdf']"
                    },
                    "contact_method": {
                        "description": "Preferred contact method",
                        "type": "string",
                        "example": "Email"
                    }
                },
                "type": "object"
            }
        },
        "securitySchemes": {
            "bearerAuth": {
                "type": "http",
                "description": "Use an access token obtained from /api/login",
                "bearerFormat": "JWT",
                "scheme": "bearer"
            },
            "passport": {
                "type": "oauth2",
                "description": "Laravel passport oauth2 security.",
                "in": "header",
                "scheme": "https",
                "flows": {
                    "password": {
                        "authorizationUrl": "http://localhost/oauth/authorize",
                        "tokenUrl": "http://localhost/oauth/token",
                        "refreshUrl": "http://localhost/token/refresh",
                        "scopes": []
                    }
                }
            }
        }
    },
    "tags": [
        {
            "name": "Authentication",
            "description": "API Endpoints for user authentication"
        },
        {
            "name": "Boxes",
            "description": "API Endpoints for managing boxes"
        },
        {
            "name": "Contracts",
            "description": "API Endpoints for Contracts"
        },
        {
            "name": "Addresses",
            "description": "API Endpoints for managing customer addresses"
        },
        {
            "name": "Customers",
            "description": "API Endpoints for managing customers"
        },
        {
            "name": "Document Types",
            "description": "API Endpoints for managing document types"
        },
        {
            "name": "Fiscal Regimes",
            "description": "API Endpoints for managing fiscal regimes"
        },
        {
            "name": "Tax Details",
            "description": "API Endpoints for managing tax details"
        },
        {
            "name": "Tax Identification Types",
            "description": "API Endpoints for managing tax identification types"
        },
        {
            "name": "Taxpayer Types",
            "description": "API Endpoints for managing taxpayer types"
        },
        {
            "name": "DailyBoxes",
            "description": "API Endpoints for managing Daily Boxes"
        },
        {
            "name": "EmailTemplates",
            "description": "API Endpoints for managing Email Templates"
        },
        {
            "name": "Cash Registers",
            "description": "API Endpoints for managing cash registers"
        },
        {
            "name": "Expenses",
            "description": "API Endpoints for managing expenses"
        },
        {
            "name": "Incomes",
            "description": "API Endpoints for managing incomes"
        },
        {
            "name": "Transactions",
            "description": "API Endpoints for managing financial transactions"
        },
        {
            "name": "HtmlTemplates",
            "description": "API Endpoints for managing HTML Templates"
        },
        {
            "name": "Categories",
            "description": "API Endpoints for managing categories"
        },
        {
            "name": "EquipmentAssignments",
            "description": "API Endpoints for managing equipment assignments"
        },
        {
            "name": "Products",
            "description": "API Endpoints for managing products"
        },
        {
            "name": "Suppliers",
            "description": "API Endpoints for managing suppliers"
        },
        {
            "name": "Warehouses",
            "description": "API Endpoints for managing warehouses"
        },
        {
            "name": "CreditNotes",
            "description": "API Endpoints for managing credit notes"
        },
        {
            "name": "DailyInvoiceBalances",
            "description": "API Endpoints for managing daily invoice balances"
        },
        {
            "name": "Invoices",
            "description": "API Endpoints for managing invoices"
        },
        {
            "name": "PaymentPromises",
            "description": "API Endpoints for managing payment promises"
        },
        {
            "name": "PageTranslations",
            "description": "API Endpoints for managing page translations"
        },
        {
            "name": "Pages",
            "description": "API Endpoints for managing pages"
        },
        {
            "name": "PasswordResets",
            "description": "API Endpoints for managing Password Resets"
        },
        {
            "name": "Plans",
            "description": "API Endpoints for managing service plans"
        },
        {
            "name": "ServiceActions",
            "description": "API Endpoints for managing service actions such as installations and uninstallations"
        },
        {
            "name": "Services",
            "description": "API Endpoints for managing customer services"
        },
        {
            "name": "Boards",
            "description": "API Endpoints for managing support ticket boards"
        },
        {
            "name": "Columns",
            "description": "API Endpoints for managing board columns"
        },
        {
            "name": "Labels",
            "description": "API Endpoints for managing ticket labels"
        },
        {
            "name": "LabelTasks",
            "description": "API Endpoints for managing label-task relationships"
        },
        {
            "name": "Task Attachments",
            "description": "API Endpoints for managing task attachments"
        },
        {
            "name": "Task Comments",
            "description": "API Endpoints for managing task comments"
        },
        {
            "name": "Tasks",
            "description": "API Endpoints for managing tasks"
        },
        {
            "name": "Tickets",
            "description": "API Endpoints for managing tickets"
        }
    ]
}