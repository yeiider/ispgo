{
    "openapi": "3.0.0",
    "info": {
        "title": "API Documentation for Your ISO GO Application",
        "description": "This is the OpenAPI definition for your application's APIs, including endpoints for managing resources like Boxes and Users and more.",
        "contact": {
            "email": "support@yourapp.com"
        },
        "version": "1.0.0"
    },
    "paths": {
        "/api/v1/boxes": {
            "get": {
                "tags": [
                    "Boxes"
                ],
                "summary": "List all boxes",
                "description": "Retrieve all boxes.",
                "operationId": "29488deb944bd36b196630ccd8563307",
                "responses": {
                    "200": {
                        "description": "List of boxes retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/BoxResource"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Boxes"
                ],
                "summary": "Create a new box",
                "description": "Create a new box.",
                "operationId": "0b685ed647cf03c162f51eec2781ced8",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BoxRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Box created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BoxResource"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation error"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/boxes/{id}": {
            "get": {
                "tags": [
                    "Boxes"
                ],
                "summary": "Get a box by ID",
                "description": "Retrieve a specific box by ID.",
                "operationId": "4735fc62fae5f66e5917b78c0e0df304",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Box ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Box retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BoxResource"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Box not found"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "Boxes"
                ],
                "summary": "Update a box",
                "description": "Update an existing box.",
                "operationId": "0540f8cb03b769091b697cf83ece1936",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Box ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BoxRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Box updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BoxResource"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation error"
                    },
                    "404": {
                        "description": "Box not found"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Boxes"
                ],
                "summary": "Delete a box",
                "description": "Delete a box.",
                "operationId": "0502886763e68222894307b553dc5c9b",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Box ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Box deleted successfully"
                    },
                    "404": {
                        "description": "Box not found"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/contracts": {
            "get": {
                "tags": [
                    "Contracts"
                ],
                "summary": "Get all Contracts",
                "description": "List all contracts.",
                "operationId": "bc77dc3cc8941fbe699959beacf85a8c",
                "responses": {
                    "200": {
                        "description": "List of Contracts retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ContractResource"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Contracts"
                ],
                "summary": "Create a new Contract",
                "description": "Create a new contract.",
                "operationId": "07b69eff7052acc6f0b72cbc5260058b",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ContractRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Contract created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ContractResource"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/contracts/{id}": {
            "get": {
                "tags": [
                    "Contracts"
                ],
                "summary": "Retrieve a Contract by ID",
                "description": "Retrieve a contract by its ID.",
                "operationId": "d14318685c5e8cc25058e9246aa6cf20",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Contract ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Contract details retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ContractResource"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Contract not found"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "Contracts"
                ],
                "summary": "Update an existing Contract",
                "description": "Update an existing contract.",
                "operationId": "328fcde02059212c74fdb412a51dd7da",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Contract ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ContractRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Contract updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ContractResource"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Contracts"
                ],
                "summary": "Delete a Contract",
                "description": "Delete a contract.",
                "operationId": "6f4df5a45ee071119050c785dfaa03ec",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Contract ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Contract deleted successfully"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/addresses": {
            "get": {
                "tags": [
                    "Addresses"
                ],
                "summary": "Get all addresses",
                "description": "Get all addresses.",
                "operationId": "7feb96c2da91d9791159734a43d60abe",
                "responses": {
                    "200": {
                        "description": "List of addresses retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/AddressResource"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Addresses"
                ],
                "summary": "Create a new address",
                "description": "Create a new address.",
                "operationId": "babfa83e9af76b20d6dd2e5a4a75405d",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AddressRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Address created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AddressResource"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/addresses/{id}": {
            "get": {
                "tags": [
                    "Addresses"
                ],
                "summary": "Get an address by ID",
                "description": "Get an address by ID.",
                "operationId": "ad1315a10d2364eece27af92a2563c73",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Address ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Address retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AddressResource"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Address not found"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "Addresses"
                ],
                "summary": "Update an address",
                "description": "Update an address.",
                "operationId": "155aa05d85ecc0ffbfc1bc3aa98daba1",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Address ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AddressRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Address updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AddressResource"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Addresses"
                ],
                "summary": "Delete an address",
                "description": "Delete an address.",
                "operationId": "9e1d111a502acaf6b1133c2daa0691e1",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Address ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Address deleted successfully"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/customers": {
            "get": {
                "tags": [
                    "Customers"
                ],
                "summary": "List all customers",
                "description": "Get all customers.",
                "operationId": "b2784c063762a8668d1ee92ac125c68f",
                "responses": {
                    "200": {
                        "description": "List of customers successfully retrieved",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/CustomerResource"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Customers"
                ],
                "summary": "Create a new customer",
                "description": "Create a new customer.",
                "operationId": "0383ae93402612b66ca440a7e8bbfb2f",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CustomerRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Customer created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CustomerResource"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation Error"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/customers/{id}": {
            "get": {
                "tags": [
                    "Customers"
                ],
                "summary": "Retrieve a customer by ID",
                "description": "Get a customer by ID.",
                "operationId": "51d0dd7900a36faf9c7e733b7b64bd42",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Customer ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Customer successfully retrieved",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CustomerResource"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Customer not found"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "Customers"
                ],
                "summary": "Update a customer",
                "description": "Update a customer.",
                "operationId": "5b6ddc6305d03c0a7d43fa44d6185e32",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Customer ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CustomerRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Customer successfully updated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CustomerResource"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation Error"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Customers"
                ],
                "summary": "Delete a customer",
                "description": "Delete a customer.",
                "operationId": "0aa64324fb7e38f1eb6fd4eb281fb8f4",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Customer ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Customer successfully deleted"
                    },
                    "404": {
                        "description": "Customer not found"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/document-types": {
            "get": {
                "tags": [
                    "Document Types"
                ],
                "summary": "List all document types",
                "description": "Retrieve all document types.",
                "operationId": "edf4739d3cadf95167df21b9d170b5cb",
                "responses": {
                    "200": {
                        "description": "List of document types retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/DocumentTypeResource"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Document Types"
                ],
                "summary": "Create a new document type",
                "description": "Create a new document type.",
                "operationId": "47d84bf7b7856444ff87ecec7340b963",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DocumentTypeRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Document type created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DocumentTypeResource"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation Error"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/document-types/{id}": {
            "get": {
                "tags": [
                    "Document Types"
                ],
                "summary": "Get a document type by ID",
                "description": "Retrieve a document type by ID.",
                "operationId": "7fa54ffc59fe07532cdffa434c5bfc21",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Document type ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Document type retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DocumentTypeResource"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Document type not found"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "Document Types"
                ],
                "summary": "Update a document type",
                "description": "Update an existing document type.",
                "operationId": "58e9a25d2f34b9c56de95ae5cb22e9be",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Document type ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DocumentTypeRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Document type updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DocumentTypeResource"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation Error"
                    },
                    "404": {
                        "description": "Document type not found"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Document Types"
                ],
                "summary": "Delete a document type",
                "description": "Delete a document type.",
                "operationId": "635de600ca3b57ed47453014bc23cebd",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Document type ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Document type deleted successfully"
                    },
                    "404": {
                        "description": "Document type not found"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/fiscal-regimes": {
            "get": {
                "tags": [
                    "Fiscal Regimes"
                ],
                "summary": "List all fiscal regimes",
                "description": "Retrieve all fiscal regimes.",
                "operationId": "5db34ff4420f921436114aba0d0af402",
                "responses": {
                    "200": {
                        "description": "List of fiscal regimes retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/FiscalRegimeResource"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            }
        },
        "/api/fiscal-regimes": {
            "post": {
                "tags": [
                    "Fiscal Regimes"
                ],
                "summary": "Create a new fiscal regime",
                "description": "Create a new fiscal regime.",
                "operationId": "87414c13e2019076d2ae5feadac3c424",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/FiscalRegimeRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Fiscal regime created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FiscalRegimeResource"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation Error"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            }
        },
        "/api/fiscal-regimes/{id}": {
            "get": {
                "tags": [
                    "Fiscal Regimes"
                ],
                "summary": "Get a fiscal regime by ID",
                "description": "Retrieve a fiscal regime by ID.",
                "operationId": "4d2ff184c20f7d5725069df5bc2342eb",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Fiscal regime ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Fiscal regime retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FiscalRegimeResource"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Fiscal regime not found"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "Fiscal Regimes"
                ],
                "summary": "Update a fiscal regime",
                "description": "Update an existing fiscal regime.",
                "operationId": "df3f871bdb912eedfb6e7fd1d28f8eef",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Fiscal regime ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/FiscalRegimeRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Fiscal regime updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FiscalRegimeResource"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation Error"
                    },
                    "404": {
                        "description": "Fiscal regime not found"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Fiscal Regimes"
                ],
                "summary": "Delete a fiscal regime",
                "description": "Delete a fiscal regime.",
                "operationId": "d2460b75606647f8ae3f71750f538ca2",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Fiscal regime ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Fiscal regime deleted successfully"
                    },
                    "404": {
                        "description": "Fiscal regime not found"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/tax-details": {
            "get": {
                "tags": [
                    "Tax Details"
                ],
                "summary": "List all tax details",
                "description": "Retrieve all tax details.",
                "operationId": "1b782f69f2b2538a325c7f8ef5505aee",
                "responses": {
                    "200": {
                        "description": "List of tax details retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/TaxDetailResource"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Tax Details"
                ],
                "summary": "Create a new tax detail",
                "description": "Create a new tax detail.",
                "operationId": "3ca40df26845da5e12faaf89b08cb7a0",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TaxDetailRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Tax detail created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TaxDetailResource"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation Error"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/tax-details/{id}": {
            "get": {
                "tags": [
                    "Tax Details"
                ],
                "summary": "Get a tax detail by ID",
                "description": "Retrieve a specific tax detail by ID.",
                "operationId": "36aa8d947dfa7351eb0d43b097793570",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Tax detail ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Tax detail retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TaxDetailResource"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Tax detail not found"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "Tax Details"
                ],
                "summary": "Update a tax detail",
                "description": "Update an existing tax detail.",
                "operationId": "13843736ceb5620120c72def52a44cc9",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Tax detail ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TaxDetailRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Tax detail updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TaxDetailResource"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation Error"
                    },
                    "404": {
                        "description": "Tax detail not found"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Tax Details"
                ],
                "summary": "Delete a tax detail",
                "description": "Delete a tax detail.",
                "operationId": "7287047915a0d68a011adcb4a298666a",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Tax detail ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Tax detail deleted successfully"
                    },
                    "404": {
                        "description": "Tax detail not found"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/tax-identification-types": {
            "get": {
                "tags": [
                    "Tax Identification Types"
                ],
                "summary": "List all tax identification types",
                "description": "Retrieve all tax identification types.",
                "operationId": "dbe7e33408b10e5ee6db550deb11278a",
                "responses": {
                    "200": {
                        "description": "List of tax identification types retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/TaxIdentificationTypeResource"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Tax Identification Types"
                ],
                "summary": "Create a new tax identification type",
                "description": "Create a new tax identification type.",
                "operationId": "fa60c41f16e93b5b98224d00e7e5773e",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TaxIdentificationTypeRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Tax identification type created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TaxIdentificationTypeResource"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation Error"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/tax-identification-types/{id}": {
            "get": {
                "tags": [
                    "Tax Identification Types"
                ],
                "summary": "Get a tax identification type by ID",
                "description": "Retrieve a specific tax identification type by ID.",
                "operationId": "cdf592ae90fe964cc83d9a0a6111999b",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Tax identification type ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Tax identification type retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TaxIdentificationTypeResource"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Tax identification type not found"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "Tax Identification Types"
                ],
                "summary": "Update a tax identification type",
                "description": "Update an existing tax identification type.",
                "operationId": "0ef4e8496b0ff5b008b736fcebf3743d",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Tax identification type ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TaxIdentificationTypeRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Tax identification type updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TaxIdentificationTypeResource"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation Error"
                    },
                    "404": {
                        "description": "Tax identification type not found"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Tax Identification Types"
                ],
                "summary": "Delete a tax identification type",
                "description": "Delete a tax identification type.",
                "operationId": "7b69fbfe9898d78038a1c57aa088e7b3",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Tax identification type ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Tax identification type deleted successfully"
                    },
                    "404": {
                        "description": "Tax identification type not found"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/taxpayer-types": {
            "get": {
                "tags": [
                    "Taxpayer Types"
                ],
                "summary": "List all taxpayer types",
                "description": "Retrieve all taxpayer types.",
                "operationId": "492ef73861fe186b673d28149fa2bd13",
                "responses": {
                    "200": {
                        "description": "List of taxpayer types retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/TaxpayerTypeResource"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Taxpayer Types"
                ],
                "summary": "Create a new taxpayer type",
                "description": "Create a new taxpayer type.",
                "operationId": "1170f7ae0f4fbf949343093306f9a696",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TaxpayerTypeRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Taxpayer type created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TaxpayerTypeResource"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation Error"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/taxpayer-types/{id}": {
            "get": {
                "tags": [
                    "Taxpayer Types"
                ],
                "summary": "Get a taxpayer type by ID",
                "description": "Retrieve a specific taxpayer type by ID.",
                "operationId": "0d4726a26b2af8720290aaf58e7c07a9",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Taxpayer type ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Taxpayer type retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TaxpayerTypeResource"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Taxpayer type not found"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "Taxpayer Types"
                ],
                "summary": "Update a taxpayer type",
                "description": "Update an existing taxpayer type.",
                "operationId": "178525a0d06ad9330ae9efff5edecf96",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Taxpayer type ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TaxpayerTypeRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Taxpayer type updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TaxpayerTypeResource"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation Error"
                    },
                    "404": {
                        "description": "Taxpayer type not found"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Taxpayer Types"
                ],
                "summary": "Delete a taxpayer type",
                "description": "Delete a taxpayer type.",
                "operationId": "83ffdb92225726226ade8ce757588564",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Taxpayer type ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Taxpayer type deleted successfully"
                    },
                    "404": {
                        "description": "Taxpayer type not found"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/daily-boxes": {
            "get": {
                "tags": [
                    "DailyBoxes"
                ],
                "summary": "Get all daily boxes",
                "description": "List all daily boxes.",
                "operationId": "fc1d2e9542b04708763dbe3ba81cdef7",
                "responses": {
                    "200": {
                        "description": "List of all daily boxes retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/DailyBoxResource"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "DailyBoxes"
                ],
                "summary": "Create a new daily box record",
                "description": "Create a new daily box record.",
                "operationId": "0b812499f02e117cc441bc8dcf5d1288",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DailyBoxRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Daily box record created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DailyBoxResource"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/daily-boxes/{id}": {
            "get": {
                "tags": [
                    "DailyBoxes"
                ],
                "summary": "Get a daily box by its ID",
                "description": "Get a single daily box by ID.",
                "operationId": "b45a206e9c07b61d10e6afe2d0e96b2f",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Daily box ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Daily box details retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DailyBoxResource"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Daily box not found"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "DailyBoxes"
                ],
                "summary": "Update an existing daily box record",
                "description": "Update an existing daily box record.",
                "operationId": "4a322839e966ead493ec57e44dff3a87",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Daily box ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DailyBoxRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Daily box updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DailyBoxResource"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "DailyBoxes"
                ],
                "summary": "Delete a daily box record by ID",
                "description": "Delete a daily box record by its ID.",
                "operationId": "ba914b6996156f315ecff75afb403a79",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Daily box ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Daily box record deleted successfully"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/email-templates": {
            "get": {
                "tags": [
                    "EmailTemplates"
                ],
                "summary": "List all email templates",
                "description": "Get a list of all email templates.",
                "operationId": "a6d1d868e062772940f1bf9f07eb3bd0",
                "responses": {
                    "200": {
                        "description": "Email templates retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/EmailTemplateResource"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "EmailTemplates"
                ],
                "summary": "Create a new email template",
                "description": "Create a new email template.",
                "operationId": "268d64c74b3053a5f789e8df3255415c",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EmailTemplateRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Email template created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EmailTemplateResource"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/email-templates/{id}": {
            "get": {
                "tags": [
                    "EmailTemplates"
                ],
                "summary": "Retrieve an email template by ID",
                "description": "Retrieve an email template by its ID.",
                "operationId": "c088d140efb5afa2f344ad949e91cd03",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Email Template ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Email template retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EmailTemplateResource"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Email template not found"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "EmailTemplates"
                ],
                "summary": "Update an email template",
                "description": "Update an email template by its ID.",
                "operationId": "4de6de6e2993d407071c607338746efe",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Email Template ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EmailTemplateRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Email template updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EmailTemplateResource"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "EmailTemplates"
                ],
                "summary": "Delete an email template",
                "description": "Delete an email template by its ID.",
                "operationId": "371fc35354393d19f5a6fede6e3c917f",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Email Template ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Email template deleted successfully"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/cash-registers": {
            "get": {
                "tags": [
                    "Cash Registers"
                ],
                "summary": "List all cash registers",
                "description": "Retrieve all cash registers.",
                "operationId": "6a9d467a0d385058eaa265a09994482c",
                "responses": {
                    "200": {
                        "description": "List of cash registers retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/CashRegisterResource"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Cash Registers"
                ],
                "summary": "Create a new cash register",
                "description": "Create a new cash register.",
                "operationId": "673ce2d2dd15e60cfc2b11fd1d91b150",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CashRegisterRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Cash register created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CashRegisterResource"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation Error"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/cash-registers/{id}": {
            "get": {
                "tags": [
                    "Cash Registers"
                ],
                "summary": "Get a cash register by ID",
                "description": "Retrieve a specific cash register by ID.",
                "operationId": "d1c298ccabdebfd9c6ebad1340748f40",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Cash register ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Cash register retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CashRegisterResource"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Cash register not found"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "Cash Registers"
                ],
                "summary": "Update a cash register",
                "description": "Update an existing cash register.",
                "operationId": "f5285f5b0cc647bffaeac204615a66f2",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Cash register ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CashRegisterRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Cash register updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CashRegisterResource"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation Error"
                    },
                    "404": {
                        "description": "Cash register not found"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Cash Registers"
                ],
                "summary": "Delete a cash register",
                "description": "Delete a cash register.",
                "operationId": "db67970fe66ac4d4071dfa41a600e87b",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Cash register ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Cash register deleted successfully"
                    },
                    "404": {
                        "description": "Cash register not found"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/expenses": {
            "get": {
                "tags": [
                    "Expenses"
                ],
                "summary": "List all expenses",
                "description": "Retrieve all expenses.",
                "operationId": "ba8021714f373aa817920992de727956",
                "responses": {
                    "200": {
                        "description": "List of expenses retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ExpenseResource"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Expenses"
                ],
                "summary": "Create a new expense",
                "description": "Create a new expense.",
                "operationId": "28d3f81f5d16f5d370c396e745abca8d",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ExpenseRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Expense created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ExpenseResource"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation Error"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/expenses/{id}": {
            "get": {
                "tags": [
                    "Expenses"
                ],
                "summary": "Get an expense by ID",
                "description": "Retrieve a specific expense by ID.",
                "operationId": "1e4a3cda2d048e2a06e20a41ee6f6e4f",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Expense ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Expense retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ExpenseResource"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Expense not found"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "Expenses"
                ],
                "summary": "Update an expense",
                "description": "Update an existing expense.",
                "operationId": "62c5829fab4fd89a9ef3ed82bc5ea6d2",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Expense ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ExpenseRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Expense updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ExpenseResource"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation Error"
                    },
                    "404": {
                        "description": "Expense not found"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Expenses"
                ],
                "summary": "Delete an expense",
                "description": "Delete an expense.",
                "operationId": "65e9f0a7738667b665e174e506069840",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Expense ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Expense deleted successfully"
                    },
                    "404": {
                        "description": "Expense not found"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/incomes": {
            "get": {
                "tags": [
                    "Incomes"
                ],
                "summary": "List all incomes",
                "description": "Retrieve all incomes.",
                "operationId": "a6327f8457b6fd4f35bf5fa79ebce7c9",
                "responses": {
                    "200": {
                        "description": "List of incomes retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/IncomeResource"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Incomes"
                ],
                "summary": "Create a new income",
                "description": "Create a new income.",
                "operationId": "af33d3e40dde833edd45b44f3af31ebf",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/IncomeRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Income created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IncomeResource"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation Error"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/incomes/{id}": {
            "get": {
                "tags": [
                    "Incomes"
                ],
                "summary": "Get an income by ID",
                "description": "Retrieve a specific income by ID.",
                "operationId": "44d73fd3bace68c9dbc49bf1f712cd3e",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Income ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Income retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IncomeResource"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Income not found"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "Incomes"
                ],
                "summary": "Update an income",
                "description": "Update an existing income.",
                "operationId": "c09e8e5829218ff8f0148ee2538026bb",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Income ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/IncomeRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Income updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/IncomeResource"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation Error"
                    },
                    "404": {
                        "description": "Income not found"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Incomes"
                ],
                "summary": "Delete an income",
                "description": "Delete an income.",
                "operationId": "2e1e93fbc8d59709f61ce91dec364e69",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Income ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Income deleted successfully"
                    },
                    "404": {
                        "description": "Income not found"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/transactions": {
            "get": {
                "tags": [
                    "Transactions"
                ],
                "summary": "List all transactions",
                "description": "Retrieve all transactions.",
                "operationId": "e969d8219bf5abaa50267872e82fcd45",
                "responses": {
                    "200": {
                        "description": "List of transactions retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/TransactionResource"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Transactions"
                ],
                "summary": "Create a new transaction",
                "description": "Create a new transaction.",
                "operationId": "3282e6fb0c8b19d71378fd4d12ba7b8d",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TransactionRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Transaction created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TransactionResource"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation Error"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/transactions/{id}": {
            "get": {
                "tags": [
                    "Transactions"
                ],
                "summary": "Get a transaction by ID",
                "description": "Retrieve a specific transaction by ID.",
                "operationId": "afa8c958177363bb88ef756692091168",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Transaction ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Transaction retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TransactionResource"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Transaction not found"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "Transactions"
                ],
                "summary": "Update a transaction",
                "description": "Update an existing transaction.",
                "operationId": "474b39940ebfbd73d20e73a3a695fc14",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Transaction ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TransactionRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Transaction updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TransactionResource"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation Error"
                    },
                    "404": {
                        "description": "Transaction not found"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Transactions"
                ],
                "summary": "Delete a transaction",
                "description": "Delete a transaction.",
                "operationId": "c5de3faf2383597d435a7ee70fcb7d07",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Transaction ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Transaction deleted successfully"
                    },
                    "404": {
                        "description": "Transaction not found"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/html-templates": {
            "get": {
                "tags": [
                    "HtmlTemplates"
                ],
                "summary": "Get all HTML templates",
                "description": "Retrieve all HTML Templates.",
                "operationId": "8106ee00f37db5b350291ab421c68c38",
                "responses": {
                    "200": {
                        "description": "List of HTML templates retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/HtmlTemplateResource"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "HtmlTemplates"
                ],
                "summary": "Create a new HTML template",
                "description": "Create a new HTML Template.",
                "operationId": "1cfde2ce801ffb88370beb11a2c3106f",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/HtmlTemplateRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "HTML template created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HtmlTemplateResource"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/html-templates/{id}": {
            "get": {
                "tags": [
                    "HtmlTemplates"
                ],
                "summary": "Get an HTML template by ID",
                "description": "Retrieve an HTML Template by ID.",
                "operationId": "103275af4fa8d38cfbc3a12aaa40462f",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "HTML Template ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "HTML template retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HtmlTemplateResource"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "HTML template not found"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "HtmlTemplates"
                ],
                "summary": "Update an HTML template",
                "description": "Update an HTML Template.",
                "operationId": "8ff5bb8403554852890d7a6239df7d87",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "HTML Template ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/HtmlTemplateRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "HTML template updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HtmlTemplateResource"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            }
        },
        "/api/html-templates/{id}": {
            "delete": {
                "tags": [
                    "HtmlTemplates"
                ],
                "summary": "Delete an HTML template",
                "description": "Delete an HTML Template by ID.",
                "operationId": "8427339677df7f72bdb380d4ff56f6bd",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "HTML Template ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "HTML template deleted successfully"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/categories": {
            "get": {
                "tags": [
                    "Categories"
                ],
                "summary": "List all categories",
                "description": "Retrieve all categories.",
                "operationId": "0995bbfe7ebb0e25b07ded0380990a18",
                "responses": {
                    "200": {
                        "description": "List of categories retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/CategoryResource"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Categories"
                ],
                "summary": "Create a new category",
                "description": "Create a new category.",
                "operationId": "a90e4fb4a02cbffefa7a9574c6b0c289",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CategoryRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Category created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CategoryResource"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation Error"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/categories/{id}": {
            "get": {
                "tags": [
                    "Categories"
                ],
                "summary": "Get a category by ID",
                "description": "Retrieve a specific category by ID.",
                "operationId": "49ebe6c66995ff97052cb84b1d39137d",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Category ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Category retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CategoryResource"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Category not found"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "Categories"
                ],
                "summary": "Update a category",
                "description": "Update an existing category.",
                "operationId": "a151b88856eedf1becb75b0ab460c25c",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Category ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CategoryRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Category updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CategoryResource"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation Error"
                    },
                    "404": {
                        "description": "Category not found"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Categories"
                ],
                "summary": "Delete a category",
                "description": "Delete a category.",
                "operationId": "b818b5bb211f7c508d2daa1b07b269fb",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Category ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Category deleted successfully"
                    },
                    "404": {
                        "description": "Category not found"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/equipment-assignments": {
            "get": {
                "tags": [
                    "EquipmentAssignments"
                ],
                "summary": "List all equipment assignments",
                "description": "Retrieve all equipment assignments.",
                "operationId": "85bae9f48fadb866c6bb786c60d2e0fa",
                "responses": {
                    "200": {
                        "description": "List of equipment assignments retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/EquipmentAssignmentResource"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "EquipmentAssignments"
                ],
                "summary": "Create a new equipment assignment",
                "description": "Create a new equipment assignment.",
                "operationId": "c243723a1f496437f06eab1bf09b6bc2",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EquipmentAssignmentRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Equipment assignment created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EquipmentAssignmentResource"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation Error"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/equipment-assignments/{id}": {
            "get": {
                "tags": [
                    "EquipmentAssignments"
                ],
                "summary": "Get an equipment assignment by ID",
                "description": "Retrieve a specific equipment assignment by ID.",
                "operationId": "a3fcbed75c83201f489fc815de8792da",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Equipment Assignment ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Equipment assignment retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EquipmentAssignmentResource"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Equipment assignment not found"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "EquipmentAssignments"
                ],
                "summary": "Update an equipment assignment",
                "description": "Update an existing equipment assignment.",
                "operationId": "6ea6a83cee31cf51492bd76086f92a9d",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Equipment Assignment ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EquipmentAssignmentRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Equipment assignment updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EquipmentAssignmentResource"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation Error"
                    },
                    "404": {
                        "description": "Equipment assignment not found"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "EquipmentAssignments"
                ],
                "summary": "Delete an equipment assignment",
                "description": "Delete an equipment assignment.",
                "operationId": "630aa1c2bd6d8faff07a50c60a304f68",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Equipment Assignment ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Equipment assignment deleted successfully"
                    },
                    "404": {
                        "description": "Equipment assignment not found"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/products": {
            "get": {
                "tags": [
                    "Products"
                ],
                "summary": "List all products",
                "description": "Retrieve all products.",
                "operationId": "d05f256155685598074d670c3dbcfaaa",
                "responses": {
                    "200": {
                        "description": "List of products retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ProductResource"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Products"
                ],
                "summary": "Create a new product",
                "description": "Create a new product.",
                "operationId": "2f9e715f5869425eb88a73b1bf3578fd",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ProductRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Product created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductResource"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation Error"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/products/{id}": {
            "get": {
                "tags": [
                    "Products"
                ],
                "summary": "Get a product by ID",
                "description": "Retrieve a specific product by ID.",
                "operationId": "10f6b8bded1fc6d5be55ac2b01b02586",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Product ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Product retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductResource"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Product not found"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "Products"
                ],
                "summary": "Update a product",
                "description": "Update an existing product.",
                "operationId": "b4643b8ac2010bc80edb770602ca3eb8",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Product ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ProductRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Product updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProductResource"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation Error"
                    },
                    "404": {
                        "description": "Product not found"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Products"
                ],
                "summary": "Delete a product",
                "description": "Delete a product.",
                "operationId": "944569f6066a195ab54cfd5ee2943eb9",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Product ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Product deleted successfully"
                    },
                    "404": {
                        "description": "Product not found"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/suppliers": {
            "get": {
                "tags": [
                    "Suppliers"
                ],
                "summary": "List all suppliers",
                "description": "Retrieve all suppliers.",
                "operationId": "e08b54408eae6175365a4e1d1ebc9f79",
                "responses": {
                    "200": {
                        "description": "List of suppliers retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/SupplierResource"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Suppliers"
                ],
                "summary": "Create a new supplier",
                "description": "Create a new supplier.",
                "operationId": "be97faa3e4f4494deb89a671666d35ed",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SupplierRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Supplier created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SupplierResource"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation Error"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/suppliers/{id}": {
            "get": {
                "tags": [
                    "Suppliers"
                ],
                "summary": "Get a supplier by ID",
                "description": "Retrieve a specific supplier by ID.",
                "operationId": "bc48f872a038112e9e9ae756c68cd7e7",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Supplier ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Supplier retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SupplierResource"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Supplier not found"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "Suppliers"
                ],
                "summary": "Update a supplier",
                "description": "Update an existing supplier.",
                "operationId": "293a12f16887aab865b3913599c48db1",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Supplier ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SupplierRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Supplier updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SupplierResource"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation Error"
                    },
                    "404": {
                        "description": "Supplier not found"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Suppliers"
                ],
                "summary": "Delete a supplier",
                "description": "Delete a supplier.",
                "operationId": "fb0fb8a83949e3c9f9829c25fe1d850b",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Supplier ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Supplier deleted successfully"
                    },
                    "404": {
                        "description": "Supplier not found"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/warehouses": {
            "get": {
                "tags": [
                    "Warehouses"
                ],
                "summary": "List all warehouses",
                "description": "Retrieve all warehouses.",
                "operationId": "bf11a6ff25e2984209286b029884a1f6",
                "responses": {
                    "200": {
                        "description": "List of warehouses retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/WarehouseResource"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Warehouses"
                ],
                "summary": "Create a new warehouse",
                "description": "Create a new warehouse.",
                "operationId": "102ac1765e5c4c49f66933f937f192b7",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/WarehouseRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Warehouse created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/WarehouseResource"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation Error"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/warehouses/{id}": {
            "get": {
                "tags": [
                    "Warehouses"
                ],
                "summary": "Get a warehouse by ID",
                "description": "Retrieve a specific warehouse by ID.",
                "operationId": "7c2be66a677134a83dce13cd2cb7278c",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Warehouse ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Warehouse retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/WarehouseResource"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Warehouse not found"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "Warehouses"
                ],
                "summary": "Update a warehouse",
                "description": "Update an existing warehouse.",
                "operationId": "76070a9033f254d87c6f82db09ad3bb6",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Warehouse ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/WarehouseRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Warehouse updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/WarehouseResource"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation Error"
                    },
                    "404": {
                        "description": "Warehouse not found"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Warehouses"
                ],
                "summary": "Delete a warehouse",
                "description": "Delete a warehouse.",
                "operationId": "2bf88006427bad05600e28d32caa92f1",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Warehouse ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Warehouse deleted successfully"
                    },
                    "404": {
                        "description": "Warehouse not found"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/credit-notes": {
            "get": {
                "tags": [
                    "CreditNotes"
                ],
                "summary": "List all credit notes",
                "description": "Retrieve all credit notes.",
                "operationId": "6580edb1872b67b272be17bf03c8f2c5",
                "responses": {
                    "200": {
                        "description": "List of credit notes retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/CreditNoteResource"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "CreditNotes"
                ],
                "summary": "Create a new credit note",
                "description": "Create a new credit note.",
                "operationId": "1388c179f18299f89f710ed95e367a75",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreditNoteRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Credit note created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CreditNoteResource"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation Error"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/credit-notes/{id}": {
            "get": {
                "tags": [
                    "CreditNotes"
                ],
                "summary": "Get a credit note by ID",
                "description": "Retrieve a specific credit note by ID.",
                "operationId": "e729b4189782b69904998476a0fafb71",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Credit note ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Credit note retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CreditNoteResource"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Credit note not found"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "CreditNotes"
                ],
                "summary": "Update a credit note",
                "description": "Update an existing credit note.",
                "operationId": "b1d2129b996d6bfdfa0c6b433c79fd7e",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Credit note ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreditNoteRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Credit note updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CreditNoteResource"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation Error"
                    },
                    "404": {
                        "description": "Credit note not found"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "CreditNotes"
                ],
                "summary": "Delete a credit note",
                "description": "Delete a credit note.",
                "operationId": "ea13afe3077a0432d51ef0b59f76ede3",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Credit note ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Credit note deleted successfully"
                    },
                    "404": {
                        "description": "Credit note not found"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/daily-invoice-balances": {
            "get": {
                "tags": [
                    "DailyInvoiceBalances"
                ],
                "summary": "List all daily invoice balances",
                "description": "Retrieve all daily invoice balances.",
                "operationId": "c5a6cf548246bd8164d290abc6c3cb36",
                "responses": {
                    "200": {
                        "description": "List of daily invoice balances retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/DailyInvoiceBalanceResource"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "DailyInvoiceBalances"
                ],
                "summary": "Create a new daily invoice balance",
                "description": "Create a new daily invoice balance entry.",
                "operationId": "44b76f9c8a539c099f663c6a7fec1e9f",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DailyInvoiceBalanceRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Daily invoice balance created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DailyInvoiceBalanceResource"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation Error"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/daily-invoice-balances/{id}": {
            "get": {
                "tags": [
                    "DailyInvoiceBalances"
                ],
                "summary": "Get a daily invoice balance entry by ID",
                "description": "Retrieve a specific daily invoice balance entry by ID.",
                "operationId": "8e91ffe2658c0e3789adbc74155aa725",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Daily invoice balance entry ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Daily invoice balance retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DailyInvoiceBalanceResource"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Daily invoice balance not found"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "DailyInvoiceBalances"
                ],
                "summary": "Delete a daily invoice balance entry",
                "description": "Delete a daily invoice balance entry.",
                "operationId": "a16fd18eed45aebc168a95d440efa114",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Daily invoice balance entry ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Daily invoice balance entry deleted successfully"
                    },
                    "404": {
                        "description": "Daily invoice balance not found"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            }
        },
        "/api/daily-invoice-balances/{id}": {
            "put": {
                "tags": [
                    "DailyInvoiceBalances"
                ],
                "summary": "Update a daily invoice balance",
                "description": "Update an existing daily invoice balance.",
                "operationId": "c638ab9cca894b08330f39abb24bf237",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Daily invoice balance ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DailyInvoiceBalanceRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Daily invoice balance updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DailyInvoiceBalanceResource"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation Error"
                    },
                    "404": {
                        "description": "Daily invoice balance not found"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/invoices": {
            "get": {
                "tags": [
                    "Invoices"
                ],
                "summary": "List all invoices",
                "description": "Retrieve all invoices.",
                "operationId": "2f3a8d28e4cc9213dfe5e61a34f62817",
                "responses": {
                    "200": {
                        "description": "List of invoices retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/InvoiceResource"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Invoices"
                ],
                "summary": "Create a new invoice",
                "description": "Create a new invoice.",
                "operationId": "edbffbbe3d44bdd43b1e38993c5258d2",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/InvoiceRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Invoice created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InvoiceResource"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation Error"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/invoices/{id}": {
            "get": {
                "tags": [
                    "Invoices"
                ],
                "summary": "Get an invoice by ID",
                "description": "Retrieve a specific invoice by ID.",
                "operationId": "8013e676055338e6d8ed01fd0008bb29",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Invoice ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Invoice retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InvoiceResource"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Invoice not found"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "Invoices"
                ],
                "summary": "Update an invoice",
                "description": "Update an existing invoice.",
                "operationId": "f87338f9a9a87b549e4e14356941d38b",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Invoice ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/InvoiceRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Invoice updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InvoiceResource"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation Error"
                    },
                    "404": {
                        "description": "Invoice not found"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Invoices"
                ],
                "summary": "Delete an invoice",
                "description": "Delete an invoice.",
                "operationId": "5a5411c620d03c970cae1b69c120ac03",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Invoice ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Invoice deleted successfully"
                    },
                    "404": {
                        "description": "Invoice not found"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/payment-promises": {
            "get": {
                "tags": [
                    "PaymentPromises"
                ],
                "summary": "List all payment promises",
                "description": "Retrieve all payment promises.",
                "operationId": "d8545a8f49677b6817b3c7cda3bbc55e",
                "responses": {
                    "200": {
                        "description": "List of payment promises retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/PaymentPromiseResource"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "PaymentPromises"
                ],
                "summary": "Create a new payment promise",
                "description": "Create a new payment promise.",
                "operationId": "a6f397c6a5db3e69a1dd21e4473319bf",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PaymentPromiseRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Payment promise created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaymentPromiseResource"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation Error"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/payment-promises/{id}": {
            "get": {
                "tags": [
                    "PaymentPromises"
                ],
                "summary": "Get a payment promise by ID",
                "description": "Retrieve a specific payment promise by ID.",
                "operationId": "ecc0929c39f22209acff9151c0e7e28d",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Payment promise ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Payment promise retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaymentPromiseResource"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Payment promise not found"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "PaymentPromises"
                ],
                "summary": "Update a payment promise",
                "description": "Update an existing payment promise.",
                "operationId": "ab9aa110a998fbf9c8478639ec468021",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Payment promise ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PaymentPromiseRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Payment promise updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaymentPromiseResource"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation Error"
                    },
                    "404": {
                        "description": "Payment promise not found"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "PaymentPromises"
                ],
                "summary": "Delete a payment promise",
                "description": "Delete a payment promise.",
                "operationId": "8e42ee0cbaf9c462e97a20c9d2056b9f",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Payment promise ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Payment promise deleted successfully"
                    },
                    "404": {
                        "description": "Payment promise not found"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            }
        },
        "/oauth/token": {
            "post": {
                "tags": [
                    "Authentication"
                ],
                "summary": "Generate an access and refresh token",
                "description": "This endpoint is used to generate an access token and refresh token for the application using client credentials.",
                "operationId": "authenticateUser",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "required": [
                                    "client_id",
                                    "client_secret",
                                    "username",
                                    "password",
                                    "grant_type"
                                ],
                                "properties": {
                                    "client_id": {
                                        "description": "The client ID provided by the application",
                                        "type": "string",
                                        "example": "9ed315be-902f-49b2-b951-dc9fa3e9736c"
                                    },
                                    "client_secret": {
                                        "description": "The client secret provided by the application",
                                        "type": "string",
                                        "example": "jl2nmTwPEO0JwIMZpc9YN9PylBnMuwd5SW1x7brQ"
                                    },
                                    "username": {
                                        "description": "The username of the application user",
                                        "type": "string",
                                        "example": "user@mail.com"
                                    },
                                    "password": {
                                        "description": "The password of the application user",
                                        "type": "string",
                                        "example": "123***"
                                    },
                                    "grant_type": {
                                        "description": "Grant type for the OAuth token request, usually 'password'",
                                        "type": "string",
                                        "example": "password"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "token_type": {
                                            "description": "The type of the token issued",
                                            "type": "string",
                                            "example": "Bearer"
                                        },
                                        "expires_in": {
                                            "description": "Time in seconds before the token expires",
                                            "type": "integer",
                                            "example": 1296000
                                        },
                                        "access_token": {
                                            "description": "The issued access token",
                                            "type": "string",
                                            "example": "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJhdWQiOiI5ZWQzMTViZS05MDJmLTQ5YjItYjk1MS1kYzlmYTNlOTczNmMiLC..."
                                        },
                                        "refresh_token": {
                                            "description": "The issued refresh token to renew the access token",
                                            "type": "string",
                                            "example": "def502005e168a620160560c0b80f752470935adbe5bdb521c28a1582bc3daa971b27b9a..."
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid client details or credentials"
                    },
                    "401": {
                        "description": "Unauthorized access"
                    }
                }
            }
        },
        "/api/v1/page-translations": {
            "get": {
                "tags": [
                    "PageTranslations"
                ],
                "summary": "List all page translations",
                "description": "Retrieve all page translations.",
                "operationId": "31bb16c1eab8788d117bd7f512ac4504",
                "responses": {
                    "200": {
                        "description": "List of page translations retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/PageTranslationResource"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "PageTranslations"
                ],
                "summary": "Create a new page translation",
                "description": "Create a new page translation.",
                "operationId": "7646bdfafb8d19eca6a93c07f2bc0f4e",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PageTranslationRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Page translation created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PageTranslationResource"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation Error"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/page-translations/{id}": {
            "get": {
                "tags": [
                    "PageTranslations"
                ],
                "summary": "Get a page translation by ID",
                "description": "Retrieve a specific page translation by ID.",
                "operationId": "5e67621c53ed349376251dba64e41ac4",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Page translation ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Page translation retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PageTranslationResource"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Page translation not found"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "PageTranslations"
                ],
                "summary": "Update a page translation",
                "description": "Update an existing page translation.",
                "operationId": "c125ae24b49e30857b3d8a8759c9944f",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Page translation ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PageTranslationRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Page translation updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PageTranslationResource"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation Error"
                    },
                    "404": {
                        "description": "Page translation not found"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "PageTranslations"
                ],
                "summary": "Delete a page translation",
                "description": "Delete a page translation.",
                "operationId": "aaf3129a1c10415059c396d4cf1a3889",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Page translation ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Page translation deleted successfully"
                    },
                    "404": {
                        "description": "Page translation not found"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/pages": {
            "get": {
                "tags": [
                    "Pages"
                ],
                "summary": "List all pages",
                "description": "Retrieve all pages.",
                "operationId": "02d90991aaa73d5bcc3407549e723735",
                "responses": {
                    "200": {
                        "description": "List of pages retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/PagesResource"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Pages"
                ],
                "summary": "Create a new page",
                "description": "Create a new page.",
                "operationId": "8088fe250e0be311c10f9245c9815382",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PagesRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Page created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PagesResource"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation Error"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/pages/{id}": {
            "get": {
                "tags": [
                    "Pages"
                ],
                "summary": "Get a page by ID",
                "description": "Retrieve a specific page by ID.",
                "operationId": "b3f20e13df04927d8214e0e3c72b2760",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Page ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Page retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PagesResource"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Page not found"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "Pages"
                ],
                "summary": "Update a page",
                "description": "Update an existing page.",
                "operationId": "dfb082e68b258e87edd8645257afb1f7",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Page ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PagesRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Page updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PagesResource"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation Error"
                    },
                    "404": {
                        "description": "Page not found"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Pages"
                ],
                "summary": "Delete a page",
                "description": "Delete a page.",
                "operationId": "b97ce697eef2b4e00401e815c5861d66",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Page ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Page deleted successfully"
                    },
                    "404": {
                        "description": "Page not found"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/password-resets": {
            "get": {
                "tags": [
                    "PasswordResets"
                ],
                "summary": "Retrieve all password resets",
                "description": "List all Password Resets.",
                "operationId": "2ffd9469159e1d5416f8a5e51f39b377",
                "responses": {
                    "200": {
                        "description": "List of password resets retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/PasswordResetResource"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "PasswordResets"
                ],
                "summary": "Create a new password reset entry",
                "description": "Create a new Password Reset entry.",
                "operationId": "d61154d1960f7c10288e0bef736c5aec",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PasswordResetRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Password reset entry created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PasswordResetResource"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/password-resets/{id}": {
            "get": {
                "tags": [
                    "PasswordResets"
                ],
                "summary": "Get a password reset entry by ID",
                "description": "Retrieve a Password Reset entry by ID.",
                "operationId": "072ef7d0c86da90890b944454cd257ff",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Password Reset entry ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Password reset entry retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PasswordResetResource"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Password reset entry not found"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "PasswordResets"
                ],
                "summary": "Update an existing password reset entry",
                "description": "Update an existing Password Reset entry.",
                "operationId": "10ddae4674c1345d6a2fb7da4a1f0bbf",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Password Reset entry ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PasswordResetRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Password reset entry updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PasswordResetResource"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "PasswordResets"
                ],
                "summary": "Delete a password reset entry",
                "description": "Delete a Password Reset entry by ID.",
                "operationId": "dea5d43c68f6788a1720531fc92ec775",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Password Reset entry ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Password reset entry deleted successfully"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/plans": {
            "get": {
                "tags": [
                    "Plans"
                ],
                "summary": "List all service plans",
                "description": "Retrieve all service plans.",
                "operationId": "8d4ed1c2a924e577eb3e00a46c0bb560",
                "responses": {
                    "200": {
                        "description": "List of service plans retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/PlanResource"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Plans"
                ],
                "summary": "Create a new service plan",
                "description": "Create a new service plan.",
                "operationId": "d374936c6613961400af0c405cbdaa66",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PlanRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Service plan created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PlanResource"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation Error"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/plans/{id}": {
            "get": {
                "tags": [
                    "Plans"
                ],
                "summary": "Get a service plan by ID",
                "description": "Retrieve a specific service plan by ID.",
                "operationId": "837ac988646c373ba2d1e15607c0a734",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Plan ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Service plan retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PlanResource"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Service plan not found"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "Plans"
                ],
                "summary": "Update a service plan",
                "description": "Update an existing service plan.",
                "operationId": "4f7648bfff9c7c9dd214a5c882a0edb4",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Plan ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PlanRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Service plan updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PlanResource"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation Error"
                    },
                    "404": {
                        "description": "Service plan not found"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            }
        },
        "/api/plans/{id}": {
            "delete": {
                "tags": [
                    "Plans"
                ],
                "summary": "Delete a service plan",
                "description": "Delete a service plan.",
                "operationId": "434f2725f5df8287b12f70ca4e75a6d3",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Plan ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Service plan deleted successfully"
                    },
                    "404": {
                        "description": "Service plan not found"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/service-actions": {
            "get": {
                "tags": [
                    "ServiceActions"
                ],
                "summary": "List all service actions",
                "description": "Retrieve all service actions.",
                "operationId": "0dc623c8e28d62a3b2555c91977e04fc",
                "responses": {
                    "200": {
                        "description": "List of service actions retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ServiceActionResource"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "ServiceActions"
                ],
                "summary": "Create a new service action",
                "description": "Create a new service action.",
                "operationId": "7549cbe346bedd620f178c8a61ee2b70",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ServiceActionRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Service action created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServiceActionResource"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation Error"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/service-actions/{id}": {
            "get": {
                "tags": [
                    "ServiceActions"
                ],
                "summary": "Get a service action by ID",
                "description": "Retrieve a specific service action by ID.",
                "operationId": "bb233d9b0d96e29eb07aa9c4b126f46e",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Service action ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Service action retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServiceActionResource"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Service action not found"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "ServiceActions"
                ],
                "summary": "Update a service action",
                "description": "Update an existing service action.",
                "operationId": "5f2e6a9e80b3aaa7cdbd55860057b916",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Service action ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ServiceActionRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Service action updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServiceActionResource"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation Error"
                    },
                    "404": {
                        "description": "Service action not found"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "ServiceActions"
                ],
                "summary": "Delete a service action",
                "description": "Delete a service action.",
                "operationId": "ac665831f011308c691fdd9ca242904c",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Service action ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Service action deleted successfully"
                    },
                    "404": {
                        "description": "Service action not found"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/services": {
            "get": {
                "tags": [
                    "Services"
                ],
                "summary": "List all services",
                "description": "Retrieve all services.",
                "operationId": "5dfc02499bd8b9e54d7188b48e271799",
                "responses": {
                    "200": {
                        "description": "List of services retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ServiceResource"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Services"
                ],
                "summary": "Create a new service",
                "description": "Create a new service.",
                "operationId": "f17cabc33e31c927fcda6844f1fdc713",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ServiceRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Service created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServiceResource"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation Error"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/services/{id}": {
            "get": {
                "tags": [
                    "Services"
                ],
                "summary": "Get a service by ID",
                "description": "Retrieve a specific service by ID.",
                "operationId": "79ef4c0b5672766af191649b14bd69da",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Service ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Service retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServiceResource"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Service not found"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "Services"
                ],
                "summary": "Update a service",
                "description": "Update an existing service.",
                "operationId": "558482ce751fc57af1ca687ea0640b38",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Service ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ServiceRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Service updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ServiceResource"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation Error"
                    },
                    "404": {
                        "description": "Service not found"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Services"
                ],
                "summary": "Delete a service",
                "description": "Delete a service.",
                "operationId": "c64bca63fab88819f25c85e0393a9742",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Service ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Service deleted successfully"
                    },
                    "404": {
                        "description": "Service not found"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/boards": {
            "get": {
                "tags": [
                    "Boards"
                ],
                "summary": "List all boards",
                "description": "Retrieve all boards.",
                "operationId": "d039bda1bf21aa8bffa2e998e39a57a0",
                "responses": {
                    "200": {
                        "description": "List of boards retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/BoardResource"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Boards"
                ],
                "summary": "Create a new board",
                "description": "Create a new board.",
                "operationId": "637b6f508b6b7b9536a739cbc0953c16",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BoardRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Board created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BoardResource"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation Error"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/boards/{id}": {
            "get": {
                "tags": [
                    "Boards"
                ],
                "summary": "Get a board by ID",
                "description": "Retrieve a specific board by ID.",
                "operationId": "c2991b10d38074ef6bbf5b12a668c3aa",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Board ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Board retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BoardResource"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Board not found"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "Boards"
                ],
                "summary": "Update a board",
                "description": "Update an existing board.",
                "operationId": "4f6c05abd5e6af2b800acf60aa1dede3",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Board ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BoardRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Board updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BoardResource"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation Error"
                    },
                    "404": {
                        "description": "Board not found"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Boards"
                ],
                "summary": "Delete a board",
                "description": "Delete a board.",
                "operationId": "b24efdcf3a37354b56e79d7a45978148",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Board ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Board deleted successfully"
                    },
                    "404": {
                        "description": "Board not found"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/columns": {
            "get": {
                "tags": [
                    "Columns"
                ],
                "summary": "List all columns",
                "description": "Retrieve all columns.",
                "operationId": "f7a0fa72c0974f5ef2d24637e6b203a4",
                "responses": {
                    "200": {
                        "description": "List of columns retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ColumnResource"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Columns"
                ],
                "summary": "Create a new column",
                "description": "Create a new column.",
                "operationId": "37f3bb2cdc503665e3e1c393bc995e32",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ColumnRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Column created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ColumnResource"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation Error"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/columns/{id}": {
            "get": {
                "tags": [
                    "Columns"
                ],
                "summary": "Get a column by ID",
                "description": "Retrieve a specific column by ID.",
                "operationId": "434c71e7cfbdf0683bc389f6925cb47a",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Column ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Column retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ColumnResource"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Column not found"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "Columns"
                ],
                "summary": "Update a column",
                "description": "Update an existing column.",
                "operationId": "380152fcca7bfe3c16a27e589e400b9f",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Column ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ColumnRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Column updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ColumnResource"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation Error"
                    },
                    "404": {
                        "description": "Column not found"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Columns"
                ],
                "summary": "Delete a column",
                "description": "Delete a column.",
                "operationId": "89689eec40fd487a705ea456b6464ef5",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Column ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Column deleted successfully"
                    },
                    "404": {
                        "description": "Column not found"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/labels": {
            "get": {
                "tags": [
                    "Labels"
                ],
                "summary": "List all labels",
                "description": "Retrieve all labels.",
                "operationId": "e7366d91ef8d80436921e556077b6b0e",
                "responses": {
                    "200": {
                        "description": "List of labels retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/LabelResource"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Labels"
                ],
                "summary": "Create a new label",
                "description": "Create a new label.",
                "operationId": "ba42b7c658825c4d7900b0364cc16e77",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/LabelRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Label created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/LabelResource"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation Error"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/labels/{id}": {
            "get": {
                "tags": [
                    "Labels"
                ],
                "summary": "Get a label by ID",
                "description": "Retrieve a specific label by ID.",
                "operationId": "eaeb0adbf4debbc252cea66a9c73f1dd",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Label ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Label retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/LabelResource"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Label not found"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "Labels"
                ],
                "summary": "Update a label",
                "description": "Update an existing label.",
                "operationId": "db244adecf29ff52d25d63366edadf25",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Label ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/LabelRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Label updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/LabelResource"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation Error"
                    },
                    "404": {
                        "description": "Label not found"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Labels"
                ],
                "summary": "Delete a label",
                "description": "Delete a label.",
                "operationId": "9787c535075a7e0f428f8b81cabaa5a6",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Label ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Label deleted successfully"
                    },
                    "404": {
                        "description": "Label not found"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/label-tasks": {
            "get": {
                "tags": [
                    "LabelTasks"
                ],
                "summary": "List all label-task relationships",
                "description": "Retrieve all label-task relationships.",
                "operationId": "43335065f0642476a354200f406bf0ec",
                "responses": {
                    "200": {
                        "description": "List of label-task relationships retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/LabelTaskResource"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "LabelTasks"
                ],
                "summary": "Create a new label-task relationship",
                "description": "Create a new label-task relationship.",
                "operationId": "fbabd7998070297ee7ce8428f6ef9883",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/LabelTaskRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Label-task relationship created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/LabelTaskResource"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation Error"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/label-tasks/{id}": {
            "get": {
                "tags": [
                    "LabelTasks"
                ],
                "summary": "Get a label-task relationship by ID",
                "description": "Retrieve a specific label-task relationship by ID.",
                "operationId": "d89e0fc5e0bac57dd4b20fbb3b5b4162",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Label-task relationship ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Label-task relationship retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/LabelTaskResource"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Label-task relationship not found"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "LabelTasks"
                ],
                "summary": "Update a label-task relationship",
                "description": "Update an existing label-task relationship.",
                "operationId": "415e915e2735e559fe4e2bc8b9cc4d0d",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Label-task relationship ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/LabelTaskRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Label-task relationship updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/LabelTaskResource"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation Error"
                    },
                    "404": {
                        "description": "Label-task relationship not found"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "LabelTasks"
                ],
                "summary": "Delete a label-task relationship",
                "description": "Delete a label-task relationship.",
                "operationId": "4133a9f334a55423ad4501e574f6cc77",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Label-task relationship ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Label-task relationship deleted successfully"
                    },
                    "404": {
                        "description": "Label-task relationship not found"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/task-attachments": {
            "get": {
                "tags": [
                    "Task Attachments"
                ],
                "summary": "List all task attachments",
                "description": "Retrieve all task attachments.",
                "operationId": "9d3487f70ddeb274b71dbdf30cfc6475",
                "responses": {
                    "200": {
                        "description": "List of task attachments retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/TaskAttachmentResource"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Task Attachments"
                ],
                "summary": "Create a new task attachment",
                "description": "Create a new task attachment.",
                "operationId": "3f06a31d0252d887c2e6d71145ab77b6",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TaskAttachmentRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Task attachment created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TaskAttachmentResource"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation error"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/task-attachments/{id}": {
            "get": {
                "tags": [
                    "Task Attachments"
                ],
                "summary": "Get a task attachment by ID",
                "description": "Retrieve a specific task attachment by ID.",
                "operationId": "34243261725f1fe97add25b674fbb117",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Task attachment ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Task attachment retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TaskAttachmentResource"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Task attachment not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "Task Attachments"
                ],
                "summary": "Update a task attachment",
                "description": "Update an existing task attachment.",
                "operationId": "4ba6f97a5237edd157dbc0aa458fe4c7",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Task attachment ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TaskAttachmentRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Task attachment updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TaskAttachmentResource"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation error"
                    },
                    "404": {
                        "description": "Task attachment not found"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Task Attachments"
                ],
                "summary": "Delete a task attachment",
                "description": "Delete a task attachment.",
                "operationId": "f1b77b49296bb6552d5a8c6edc4d47d9",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Task attachment ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Task attachment deleted successfully"
                    },
                    "404": {
                        "description": "Task attachment not found"
                    }
                }
            }
        },
        "/api/task-comments": {
            "get": {
                "tags": [
                    "Task Comments"
                ],
                "summary": "List all task comments",
                "description": "Retrieve all task comments.",
                "operationId": "4b490d85dda1611ab7113d24e738b887",
                "responses": {
                    "200": {
                        "description": "List of task comments retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/TaskCommentResource"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "post": {
                "tags": [
                    "Task Comments"
                ],
                "summary": "Create a new task comment",
                "description": "Create a new task comment.",
                "operationId": "8f9505cfed6d86ff0c51e73d403b39f0",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TaskCommentRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Task comment created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TaskCommentResource"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation Error"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/api/task-comments/{id}": {
            "get": {
                "tags": [
                    "Task Comments"
                ],
                "summary": "Get a task comment by ID",
                "description": "Retrieve a specific task comment by ID.",
                "operationId": "29c336d897ae4be355cdbfb3ad5e6dcc",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Task comment ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Task comment retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TaskCommentResource"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Task comment not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "Task Comments"
                ],
                "summary": "Update a task comment",
                "description": "Update an existing task comment.",
                "operationId": "52b490b611edfed631dc69ffe3e95f79",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Task comment ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TaskCommentRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Task comment updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TaskCommentResource"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation Error"
                    },
                    "404": {
                        "description": "Task comment not found"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Task Comments"
                ],
                "summary": "Delete a task comment",
                "description": "Delete a task comment.",
                "operationId": "c716c57e601d57fb346589501c7b896e",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Task comment ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Task comment deleted successfully"
                    },
                    "404": {
                        "description": "Task comment not found"
                    }
                }
            }
        },
        "/api/tasks": {
            "get": {
                "tags": [
                    "Tasks"
                ],
                "summary": "List all tasks",
                "description": "Retrieve all tasks.",
                "operationId": "158a628873e482116cfcf394fd34c059",
                "responses": {
                    "200": {
                        "description": "List of tasks retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/TaskResource"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "post": {
                "tags": [
                    "Tasks"
                ],
                "summary": "Create a new task",
                "description": "Create a new task.",
                "operationId": "59e69952a94b1cdc74e9b5d91456dcd3",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TaskRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Task created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TaskResource"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation Error"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/api/tasks/{id}": {
            "get": {
                "tags": [
                    "Tasks"
                ],
                "summary": "Get a task by ID",
                "description": "Retrieve a specific task by ID.",
                "operationId": "5ac29d1f979e6ec03ce0bc30174ac4a0",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Task ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Task retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TaskResource"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Task not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "Tasks"
                ],
                "summary": "Update a task",
                "description": "Update an existing task.",
                "operationId": "e15c0dd7869aff76e299c55a77c32c57",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Task ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TaskRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Task updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TaskResource"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Validation Error"
                    },
                    "404": {
                        "description": "Task not found"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Tasks"
                ],
                "summary": "Delete a task",
                "description": "Delete a task.",
                "operationId": "87e3f55c10c3a3486383410d035207d7",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Task ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Task deleted successfully"
                    },
                    "404": {
                        "description": "Task not found"
                    }
                }
            }
        },
        "/api/v1/tickets": {
            "get": {
                "tags": [
                    "Tickets"
                ],
                "summary": "List all tickets",
                "description": "Retrieve all tickets.",
                "operationId": "bba32327fb57ca6f47d4ef170f57c442",
                "responses": {
                    "200": {
                        "description": "List of tickets retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/TicketResource"
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "Tickets"
                ],
                "summary": "Create a new ticket",
                "description": "Create a new ticket.",
                "operationId": "7a3e478fdbb8c48ce07afb0d66a1617b",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TicketRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Ticket created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TicketResource"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            }
        },
        "/api/v1/tickets/{id}": {
            "get": {
                "tags": [
                    "Tickets"
                ],
                "summary": "Get a ticket by ID",
                "description": "Retrieve a ticket by ID.",
                "operationId": "fe13797267a1dc2e486498addda8e7a9",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Ticket ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ticket retrieved successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TicketResource"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Ticket not found"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            },
            "put": {
                "tags": [
                    "Tickets"
                ],
                "summary": "Update a ticket",
                "description": "Update an existing ticket.",
                "operationId": "67e63ecc0a0bc2459e15bef7cccdd761",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Ticket ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/TicketRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Ticket updated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TicketResource"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            },
            "delete": {
                "tags": [
                    "Tickets"
                ],
                "summary": "Delete a ticket",
                "description": "Delete a ticket.",
                "operationId": "83a24b562eb94adf3e221c3370b622bb",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Ticket ID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ticket deleted successfully"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                },
                "security": [
                    {
                        "BearerAuth": []
                    }
                ]
            }
        }
    },
    "components": {
        "schemas": {
            "BoxRequest": {
                "title": "Box Request Schema",
                "description": "Schema for creating or updating a box",
                "required": [
                    "name"
                ],
                "properties": {
                    "name": {
                        "description": "Name of the box",
                        "type": "string",
                        "maxLength": 255,
                        "example": "Example Box"
                    },
                    "users": {
                        "description": "Associated users in the box",
                        "type": "string",
                        "maxLength": 255,
                        "example": "[1,2,3]"
                    }
                },
                "type": "object"
            },
            "BoxResource": {
                "title": "Box Resource Schema",
                "description": "Representation of a box",
                "type": "object",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/BoxRequest"
                    },
                    {
                        "properties": {
                            "id": {
                                "description": "Unique identifier of the box",
                                "type": "integer",
                                "example": 1
                            }
                        },
                        "type": "object"
                    }
                ]
            },
            "ContractRequest": {
                "title": "Contract Request Schema",
                "description": "Schema used for creating or updating a Contract",
                "required": [
                    "title",
                    "start_date",
                    "end_date"
                ],
                "properties": {
                    "title": {
                        "description": "The title of the contract",
                        "type": "string",
                        "example": "Service Agreement"
                    },
                    "start_date": {
                        "description": "Start date of the contract",
                        "type": "string",
                        "format": "date",
                        "example": "2023-01-01"
                    },
                    "end_date": {
                        "description": "End date of the contract",
                        "type": "string",
                        "format": "date",
                        "example": "2023-12-31"
                    },
                    "details": {
                        "description": "Additional details about the contract",
                        "type": "string",
                        "example": "This contract covers IT services."
                    }
                },
                "type": "object"
            },
            "ContractResource": {
                "title": "Contract Resource Schema",
                "description": "Response structure for a contract",
                "properties": {
                    "id": {
                        "description": "The ID of the contract",
                        "type": "integer",
                        "example": 1
                    },
                    "title": {
                        "description": "The title of the contract",
                        "type": "string",
                        "example": "Service Agreement"
                    },
                    "start_date": {
                        "description": "Start date of the contract",
                        "type": "string",
                        "format": "date",
                        "example": "2023-01-01"
                    },
                    "end_date": {
                        "description": "End date of the contract",
                        "type": "string",
                        "format": "date",
                        "example": "2023-12-31"
                    },
                    "details": {
                        "description": "Additional details about the contract",
                        "type": "string",
                        "example": "This contract covers IT services."
                    },
                    "created_at": {
                        "description": "When the contract was created",
                        "type": "string",
                        "format": "date-time",
                        "example": "2023-01-01T12:00:00Z"
                    },
                    "updated_at": {
                        "description": "When the contract was last updated",
                        "type": "string",
                        "format": "date-time",
                        "example": "2023-10-01T12:45:00Z"
                    }
                },
                "type": "object"
            },
            "AddressRequest": {
                "title": "Address Request Schema",
                "description": "Schema for creating or updating an address",
                "required": [
                    "customer_id",
                    "customer_name",
                    "address",
                    "city",
                    "state_province",
                    "postal_code",
                    "country",
                    "address_type"
                ],
                "properties": {
                    "customer_id": {
                        "description": "Customer ID associated with the address",
                        "type": "integer",
                        "example": 1
                    },
                    "customer_name": {
                        "description": "Customer name",
                        "type": "string",
                        "example": "John Doe"
                    },
                    "address": {
                        "description": "Street address",
                        "type": "string",
                        "example": "123 Main St"
                    },
                    "city": {
                        "description": "City",
                        "type": "string",
                        "example": "New York"
                    },
                    "state_province": {
                        "description": "State or Province",
                        "type": "string",
                        "example": "NY"
                    },
                    "postal_code": {
                        "description": "Postal or ZIP code",
                        "type": "string",
                        "example": "10001"
                    },
                    "country": {
                        "description": "Country",
                        "type": "string",
                        "example": "USA"
                    },
                    "address_type": {
                        "description": "Address type (billing or shipping)",
                        "type": "string",
                        "enum": [
                            "billing",
                            "shipping"
                        ],
                        "example": "billing"
                    },
                    "latitude": {
                        "description": "Latitude of the address",
                        "type": "number",
                        "format": "float",
                        "example": 40.7128
                    },
                    "longitude": {
                        "description": "Longitude of the address",
                        "type": "number",
                        "format": "float",
                        "example": -74.006
                    },
                    "created_by": {
                        "description": "ID of the user who created the address",
                        "type": "integer",
                        "example": 2
                    },
                    "updated_by": {
                        "description": "ID of the user who last updated the address",
                        "type": "integer",
                        "example": 3
                    }
                },
                "type": "object"
            },
            "AddressResource": {
                "title": "Address Resource Schema",
                "description": "Representation of an address",
                "properties": {
                    "customer_id": {
                        "description": "Customer ID",
                        "type": "integer",
                        "example": 1
                    },
                    "customer_name": {
                        "description": "Customer name",
                        "type": "string",
                        "example": "John Doe"
                    },
                    "address": {
                        "description": "Street address",
                        "type": "string",
                        "example": "123 Main St"
                    },
                    "city": {
                        "description": "City",
                        "type": "string",
                        "example": "New York"
                    },
                    "state_province": {
                        "description": "State or Province",
                        "type": "string",
                        "example": "NY"
                    },
                    "postal_code": {
                        "description": "Postal or ZIP code",
                        "type": "string",
                        "example": "10001"
                    },
                    "country": {
                        "description": "Country",
                        "type": "string",
                        "example": "USA"
                    },
                    "address_type": {
                        "description": "Address type",
                        "type": "string",
                        "enum": [
                            "billing",
                            "shipping"
                        ],
                        "example": "billing"
                    },
                    "latitude": {
                        "description": "Latitude",
                        "type": "number",
                        "format": "float",
                        "example": 40.7128
                    },
                    "longitude": {
                        "description": "Longitude",
                        "type": "number",
                        "format": "float",
                        "example": -74.006
                    },
                    "created_by": {
                        "description": "ID of the user who created the address",
                        "type": "integer",
                        "example": 2
                    },
                    "updated_by": {
                        "description": "ID of the user who last updated the address",
                        "type": "integer",
                        "example": 3
                    }
                },
                "type": "object"
            },
            "CustomerRequest": {
                "title": "Customer Request Schema",
                "description": "Schema for creating or updating a customer",
                "required": [
                    "first_name",
                    "last_name",
                    "email_address",
                    "phone_number"
                ],
                "properties": {
                    "first_name": {
                        "description": "Customer's first name",
                        "type": "string",
                        "example": "John"
                    },
                    "last_name": {
                        "description": "Customer's last name",
                        "type": "string",
                        "example": "Doe"
                    },
                    "date_of_birth": {
                        "description": "Date of birth",
                        "type": "string",
                        "format": "date",
                        "example": "1990-01-01"
                    },
                    "phone_number": {
                        "description": "Phone number",
                        "type": "string",
                        "example": "1234567890"
                    },
                    "email_address": {
                        "description": "Email address",
                        "type": "string",
                        "example": "john.doe@example.com"
                    },
                    "document_type": {
                        "description": "Document type",
                        "type": "string",
                        "example": "ID"
                    },
                    "identity_document": {
                        "description": "Identity document number",
                        "type": "string",
                        "example": "AB1234567"
                    },
                    "customer_status": {
                        "description": "Status of the customer",
                        "type": "string",
                        "enum": [
                            "active",
                            "inactive"
                        ],
                        "example": "active"
                    },
                    "additional_notes": {
                        "description": "Additional notes",
                        "type": "string",
                        "example": "Preferred contact via email."
                    },
                    "created_by": {
                        "description": "ID of the user who created the customer",
                        "type": "integer",
                        "example": 2
                    },
                    "updated_by": {
                        "description": "ID of the user who updated the customer",
                        "type": "integer",
                        "example": 2
                    },
                    "password": {
                        "description": "Customer password",
                        "type": "string",
                        "example": "hashedPassword123"
                    },
                    "password_reset_token": {
                        "description": "Password reset token",
                        "type": "string",
                        "example": "resetToken123456"
                    },
                    "remember_token": {
                        "description": "Remember token",
                        "type": "string",
                        "example": "rememberMeToken123"
                    },
                    "password_reset_token_expiration": {
                        "description": "Expiration of the password reset token",
                        "type": "string",
                        "format": "date",
                        "example": "2023-11-01"
                    }
                },
                "type": "object"
            },
            "CustomerResource": {
                "title": "Customer Resource Schema",
                "description": "Representation of a customer",
                "properties": {
                    "id": {
                        "description": "Customer ID",
                        "type": "integer",
                        "example": 1
                    },
                    "first_name": {
                        "description": "Customer first name",
                        "type": "string",
                        "example": "John"
                    },
                    "last_name": {
                        "description": "Customer last name",
                        "type": "string",
                        "example": "Doe"
                    },
                    "date_of_birth": {
                        "description": "Date of birth",
                        "type": "string",
                        "format": "date",
                        "example": "1990-01-01"
                    },
                    "phone_number": {
                        "description": "Phone number",
                        "type": "string",
                        "example": "1234567890"
                    },
                    "email_address": {
                        "description": "Email address",
                        "type": "string",
                        "example": "john.doe@example.com"
                    },
                    "document_type": {
                        "description": "Document type",
                        "type": "string",
                        "example": "ID"
                    },
                    "identity_document": {
                        "description": "Identity document number",
                        "type": "string",
                        "example": "AB1234567"
                    },
                    "customer_status": {
                        "description": "Customer status",
                        "type": "string",
                        "enum": [
                            "active",
                            "inactive"
                        ],
                        "example": "active"
                    },
                    "additional_notes": {
                        "description": "Additional notes",
                        "type": "string",
                        "example": "Preferred contact via email."
                    },
                    "created_by": {
                        "description": "ID of the creator",
                        "type": "integer",
                        "example": 2
                    },
                    "updated_by": {
                        "description": "ID of the updater",
                        "type": "integer",
                        "example": 2
                    },
                    "password": {
                        "description": "Encrypted customer password",
                        "type": "string",
                        "example": "hashedPassword123"
                    },
                    "password_reset_token": {
                        "description": "Password reset token",
                        "type": "string",
                        "example": "resetToken123456"
                    },
                    "remember_token": {
                        "description": "Remember me token",
                        "type": "string",
                        "example": "rememberToken123"
                    },
                    "password_reset_token_expiration": {
                        "description": "Expiration of the reset token",
                        "type": "string",
                        "format": "date",
                        "example": "2023-11-01"
                    }
                },
                "type": "object"
            },
            "DocumentTypeRequest": {
                "title": "Document Type Request Schema",
                "description": "Schema for creating or updating a document type",
                "required": [
                    "code",
                    "name"
                ],
                "properties": {
                    "code": {
                        "description": "Unique code for the document type",
                        "type": "string",
                        "example": "ID"
                    },
                    "name": {
                        "description": "Name of the document type",
                        "type": "string",
                        "example": "Identity Document"
                    }
                },
                "type": "object"
            },
            "DocumentTypeResource": {
                "title": "Document Type Resource Schema",
                "description": "Representation of a document type",
                "properties": {
                    "id": {
                        "description": "Document type ID",
                        "type": "integer",
                        "example": 1
                    },
                    "code": {
                        "description": "Unique code for the document type",
                        "type": "string",
                        "example": "ID"
                    },
                    "name": {
                        "description": "Name of the document type",
                        "type": "string",
                        "example": "Identity Document"
                    }
                },
                "type": "object"
            },
            "FiscalRegimeRequest": {
                "title": "Fiscal Regime Request Schema",
                "description": "Schema for creating or updating a fiscal regime",
                "required": [
                    "code",
                    "name"
                ],
                "properties": {
                    "code": {
                        "description": "Unique code of the fiscal regime",
                        "type": "string",
                        "example": "FR001"
                    },
                    "name": {
                        "description": "Name of the fiscal regime",
                        "type": "string",
                        "example": "General Regime"
                    }
                },
                "type": "object"
            },
            "FiscalRegimeResource": {
                "title": "Fiscal Regime Resource Schema",
                "description": "Representation of a fiscal regime",
                "properties": {
                    "id": {
                        "description": "Fiscal regime ID",
                        "type": "integer",
                        "example": 1
                    },
                    "code": {
                        "description": "Unique code of the fiscal regime",
                        "type": "string",
                        "example": "FR001"
                    },
                    "name": {
                        "description": "Name of the fiscal regime",
                        "type": "string",
                        "example": "General Regime"
                    }
                },
                "type": "object"
            },
            "TaxDetailRequest": {
                "title": "Tax Detail Request Schema",
                "description": "Schema for creating or updating tax details",
                "required": [
                    "customer_id",
                    "tax_identification_type",
                    "tax_identification_number",
                    "taxpayer_type",
                    "fiscal_regime"
                ],
                "properties": {
                    "customer_id": {
                        "description": "ID of the customer",
                        "type": "integer",
                        "example": 1
                    },
                    "tax_identification_type": {
                        "description": "Type of tax identification document",
                        "type": "string",
                        "example": "TIN"
                    },
                    "tax_identification_number": {
                        "description": "Number of the tax identification document",
                        "type": "string",
                        "example": "123456789"
                    },
                    "taxpayer_type": {
                        "description": "Type of taxpayer",
                        "type": "string",
                        "example": "Regular"
                    },
                    "fiscal_regime": {
                        "description": "Fiscal regime of the customer",
                        "type": "string",
                        "example": "General Regime"
                    },
                    "business_name": {
                        "description": "Business name of the customer (if applicable)",
                        "type": "string",
                        "example": "My Business LLC"
                    },
                    "enable_billing": {
                        "description": "Enable billing for this customer",
                        "type": "integer",
                        "enum": [
                            1,
                            0
                        ],
                        "example": 1
                    },
                    "send_notifications": {
                        "description": "Enable notifications for this customer",
                        "type": "integer",
                        "enum": [
                            1,
                            0
                        ],
                        "example": 1
                    },
                    "send_invoice": {
                        "description": "Enable invoice sending for this customer",
                        "type": "integer",
                        "enum": [
                            1,
                            0
                        ],
                        "example": 1
                    },
                    "created_by": {
                        "description": "ID of the user who created the tax detail",
                        "type": "integer",
                        "example": 1
                    },
                    "updated_by": {
                        "description": "ID of the user who last updated the tax detail",
                        "type": "integer",
                        "example": 2
                    }
                },
                "type": "object"
            },
            "TaxDetailResource": {
                "title": "Tax Detail Resource Schema",
                "description": "Representation of a tax detail",
                "properties": {
                    "id": {
                        "description": "Tax detail ID",
                        "type": "integer",
                        "example": 1
                    },
                    "customer_id": {
                        "description": "Customer ID linked to the tax detail",
                        "type": "integer",
                        "example": 1
                    },
                    "tax_identification_type": {
                        "description": "Type of tax identification document",
                        "type": "string",
                        "example": "TIN"
                    },
                    "tax_identification_number": {
                        "description": "Number of the tax identification document",
                        "type": "string",
                        "example": "123456789"
                    },
                    "taxpayer_type": {
                        "description": "Type of taxpayer",
                        "type": "string",
                        "example": "Regular"
                    },
                    "fiscal_regime": {
                        "description": "Fiscal regime",
                        "type": "string",
                        "example": "General Regime"
                    },
                    "business_name": {
                        "description": "Business name",
                        "type": "string",
                        "example": "My Business LLC"
                    },
                    "enable_billing": {
                        "description": "Enable billing (1 for true, 0 for false)",
                        "type": "integer",
                        "example": 1
                    },
                    "send_notifications": {
                        "description": "Send notifications (1 for true, 0 for false)",
                        "type": "integer",
                        "example": 1
                    },
                    "send_invoice": {
                        "description": "Send invoices (1 for true, 0 for false)",
                        "type": "integer",
                        "example": 1
                    },
                    "created_by": {
                        "description": "ID of the creator",
                        "type": "integer",
                        "example": 1
                    },
                    "updated_by": {
                        "description": "ID of the last updater",
                        "type": "integer",
                        "example": 2
                    }
                },
                "type": "object"
            },
            "TaxIdentificationTypeRequest": {
                "title": "Tax Identification Type Request Schema",
                "description": "Schema for creating or updating a tax identification type",
                "required": [
                    "code",
                    "name"
                ],
                "properties": {
                    "code": {
                        "description": "Unique code of the tax identification type",
                        "type": "string",
                        "example": "TIN"
                    },
                    "name": {
                        "description": "Name of the tax identification type",
                        "type": "string",
                        "example": "Tax Identification Number"
                    }
                },
                "type": "object"
            },
            "TaxIdentificationTypeResource": {
                "title": "Tax Identification Type Resource Schema",
                "description": "Representation of a tax identification type",
                "properties": {
                    "code": {
                        "description": "Unique code for the tax identification type",
                        "type": "string",
                        "example": "TIN"
                    },
                    "name": {
                        "description": "Name of the tax identification type",
                        "type": "string",
                        "example": "Tax Identification Number"
                    }
                },
                "type": "object"
            },
            "TaxpayerTypeRequest": {
                "title": "Taxpayer Type Request Schema",
                "description": "Schema for creating or updating a taxpayer type",
                "required": [
                    "code",
                    "name"
                ],
                "properties": {
                    "code": {
                        "description": "Unique code of the taxpayer type",
                        "type": "string",
                        "example": "REG001"
                    },
                    "name": {
                        "description": "Name of the taxpayer type",
                        "type": "string",
                        "example": "Individual"
                    }
                },
                "type": "object"
            },
            "TaxpayerTypeResource": {
                "title": "Taxpayer Type Resource Schema",
                "description": "Representation of a taxpayer type",
                "properties": {
                    "id": {
                        "description": "Identifier of the taxpayer type",
                        "type": "integer",
                        "example": 1
                    },
                    "code": {
                        "description": "Unique code of the taxpayer type",
                        "type": "string",
                        "example": "REG001"
                    },
                    "name": {
                        "description": "Name of the taxpayer type",
                        "type": "string",
                        "example": "Individual"
                    }
                },
                "type": "object"
            },
            "DailyBoxRequest": {
                "title": "Daily Box Request Schema",
                "description": "Schema for creating or updating a Daily Box",
                "required": [
                    "box_id",
                    "date",
                    "start_amount"
                ],
                "properties": {
                    "box_id": {
                        "description": "ID of the box related to the daily record",
                        "type": "integer",
                        "example": 1
                    },
                    "date": {
                        "description": "Date of the daily box record",
                        "type": "string",
                        "format": "date",
                        "example": "2023-11-01"
                    },
                    "start_amount": {
                        "description": "Start amount in the box",
                        "type": "number",
                        "format": "float",
                        "example": 1000.5
                    },
                    "end_amount": {
                        "description": "End amount in the box",
                        "type": "number",
                        "format": "float",
                        "example": 5000
                    }
                },
                "type": "object"
            },
            "DailyBoxResource": {
                "title": "Daily Box Resource Schema",
                "description": "Represents a Daily Box entry",
                "properties": {
                    "box_id": {
                        "description": "ID of the box related to the daily record",
                        "type": "integer",
                        "example": 1
                    },
                    "date": {
                        "description": "Date of the daily box record",
                        "type": "string",
                        "format": "date",
                        "example": "2023-11-01"
                    },
                    "start_amount": {
                        "description": "Start amount in the box",
                        "type": "number",
                        "format": "float",
                        "example": 1000.5
                    },
                    "end_amount": {
                        "description": "End amount in the box",
                        "type": "number",
                        "format": "float",
                        "example": 5000
                    }
                },
                "type": "object"
            },
            "EmailTemplateRequest": {
                "title": "Email Template Request Schema",
                "description": "Schema for creating or updating an email template",
                "required": [
                    "name",
                    "subject",
                    "body"
                ],
                "properties": {
                    "id": {
                        "description": "ID",
                        "type": "integer",
                        "example": 1
                    },
                    "name": {
                        "description": "Name of the email template",
                        "type": "string",
                        "example": "Welcome Email"
                    },
                    "subject": {
                        "description": "Subject of the email",
                        "type": "string",
                        "example": "Welcome to our service"
                    },
                    "body": {
                        "description": "Body content of the email",
                        "type": "string",
                        "example": "<p>Welcome to our service!</p>"
                    },
                    "styles": {
                        "description": "CSS styles for the email",
                        "type": "string",
                        "example": "<style>.main { color: blue; }</style>"
                    },
                    "entity": {
                        "description": "Entity related to the email template",
                        "type": "string",
                        "example": "User"
                    },
                    "is_active": {
                        "description": "Status of the email template (1=active, 0=inactive)",
                        "type": "integer",
                        "example": 1
                    },
                    "created_by": {
                        "description": "ID of the user who created the template",
                        "type": "integer",
                        "example": 1
                    },
                    "updated_by": {
                        "description": "ID of the user who last updated the template",
                        "type": "integer",
                        "example": 1
                    },
                    "test_email": {
                        "description": "Email used for testing the template",
                        "type": "string",
                        "example": "test@example.com"
                    },
                    "description": {
                        "description": "Description of the email template",
                        "type": "string",
                        "example": "This template is for welcoming new users."
                    }
                },
                "type": "object"
            },
            "EmailTemplateResource": {
                "title": "Email Template Resource Schema",
                "description": "Representation of an Email Template",
                "properties": {
                    "id": {
                        "description": "ID",
                        "type": "integer",
                        "example": 1
                    },
                    "name": {
                        "description": "Name of the email template",
                        "type": "string",
                        "example": "Welcome Email"
                    },
                    "subject": {
                        "description": "Subject of the email",
                        "type": "string",
                        "example": "Welcome to our service"
                    },
                    "body": {
                        "description": "Body content of the email",
                        "type": "string",
                        "example": "<p>Welcome to our service!</p>"
                    },
                    "styles": {
                        "description": "CSS styles for the email",
                        "type": "string",
                        "example": "<style>.main { color: blue; }</style>"
                    },
                    "entity": {
                        "description": "Entity related to the template",
                        "type": "string",
                        "example": "User"
                    },
                    "is_active": {
                        "description": "Status of the email template",
                        "type": "integer",
                        "example": 1
                    },
                    "created_by": {
                        "description": "User ID who created the template",
                        "type": "integer",
                        "example": 1
                    },
                    "updated_by": {
                        "description": "User ID who last updated the template",
                        "type": "integer",
                        "example": 1
                    },
                    "test_email": {
                        "description": "Email used for testing",
                        "type": "string",
                        "example": "test@example.com"
                    },
                    "description": {
                        "description": "Description of the email template",
                        "type": "string",
                        "example": "Template for welcoming users"
                    }
                },
                "type": "object"
            },
            "CashRegisterRequest": {
                "title": "Cash Register Request Schema",
                "description": "Schema for creating or updating cash registers",
                "required": [
                    "initial_balance",
                    "current_balance"
                ],
                "properties": {
                    "initial_balance": {
                        "description": "Initial balance of the cash register",
                        "type": "number",
                        "format": "float",
                        "example": 1000.5
                    },
                    "current_balance": {
                        "description": "Current balance of the cash register",
                        "type": "number",
                        "format": "float",
                        "example": 800.45
                    }
                },
                "type": "object"
            },
            "CashRegisterResource": {
                "title": "Cash Register Resource Schema",
                "description": "Representation of a cash register",
                "properties": {
                    "id": {
                        "description": "Unique identifier for the cash register",
                        "type": "integer",
                        "example": 1
                    },
                    "initial_balance": {
                        "description": "Initial balance of the cash register",
                        "type": "number",
                        "format": "float",
                        "example": 1000.5
                    },
                    "current_balance": {
                        "description": "Current balance of the cash register",
                        "type": "number",
                        "format": "float",
                        "example": 800.45
                    }
                },
                "type": "object"
            },
            "ExpenseRequest": {
                "title": "Expense Request Schema",
                "description": "Schema for creating or updating expenses",
                "required": [
                    "description",
                    "amount",
                    "date",
                    "payment_method"
                ],
                "properties": {
                    "description": {
                        "description": "Expense description",
                        "type": "string",
                        "example": "Office Supplies"
                    },
                    "amount": {
                        "description": "Amount of the expense",
                        "type": "number",
                        "format": "float",
                        "example": 150.75
                    },
                    "date": {
                        "description": "Date of the expense",
                        "type": "string",
                        "format": "date",
                        "example": "2023-11-01"
                    },
                    "payment_method": {
                        "description": "Payment method for the expense",
                        "type": "string",
                        "example": "Credit Card"
                    },
                    "category": {
                        "description": "Category of the expense",
                        "type": "string",
                        "example": "Office"
                    },
                    "supplier_id": {
                        "description": "ID of the supplier associated with the expense",
                        "type": "integer",
                        "example": 2
                    }
                },
                "type": "object"
            },
            "ExpenseResource": {
                "title": "Expense Resource Schema",
                "description": "Representation of an expense",
                "properties": {
                    "id": {
                        "description": "Unique identifier for the expense",
                        "type": "integer",
                        "example": 1
                    },
                    "description": {
                        "description": "Expense description",
                        "type": "string",
                        "example": "Office Supplies"
                    },
                    "amount": {
                        "description": "Amount of the expense",
                        "type": "number",
                        "format": "float",
                        "example": 150.75
                    },
                    "date": {
                        "description": "Date of the expense",
                        "type": "string",
                        "format": "date",
                        "example": "2023-11-01"
                    },
                    "payment_method": {
                        "description": "Payment method",
                        "type": "string",
                        "example": "Credit Card"
                    },
                    "category": {
                        "description": "Category of the expense",
                        "type": "string",
                        "example": "Office"
                    },
                    "supplier_id": {
                        "description": "ID of the supplier associated with the expense",
                        "type": "integer",
                        "example": 2
                    }
                },
                "type": "object"
            },
            "IncomeRequest": {
                "title": "Income Request Schema",
                "description": "Schema for creating or updating incomes",
                "required": [
                    "description",
                    "amount",
                    "date",
                    "payment_method"
                ],
                "properties": {
                    "description": {
                        "description": "Income description",
                        "type": "string",
                        "example": "Monthly Subscription"
                    },
                    "amount": {
                        "description": "Amount of the income",
                        "type": "number",
                        "format": "float",
                        "example": 2000.5
                    },
                    "date": {
                        "description": "Date of the income",
                        "type": "string",
                        "format": "date",
                        "example": "2023-11-01"
                    },
                    "payment_method": {
                        "description": "Payment method for the income",
                        "type": "string",
                        "example": "Bank Transfer"
                    },
                    "category": {
                        "description": "Category of the income",
                        "type": "string",
                        "example": "Services"
                    },
                    "customer_id": {
                        "description": "ID of the customer associated with the income",
                        "type": "integer",
                        "example": 1
                    },
                    "invoice_id": {
                        "description": "ID of the invoice related to the income",
                        "type": "integer",
                        "example": 101
                    }
                },
                "type": "object"
            },
            "IncomeResource": {
                "title": "Income Resource Schema",
                "description": "Representation of an income",
                "properties": {
                    "id": {
                        "description": "Unique identifier for the income",
                        "type": "integer",
                        "example": 1
                    },
                    "description": {
                        "description": "Income description",
                        "type": "string",
                        "example": "Monthly Subscription"
                    },
                    "amount": {
                        "description": "Amount of the income",
                        "type": "number",
                        "format": "float",
                        "example": 2000.5
                    },
                    "date": {
                        "description": "Date of the income",
                        "type": "string",
                        "format": "date",
                        "example": "2023-11-01"
                    },
                    "payment_method": {
                        "description": "Payment method",
                        "type": "string",
                        "example": "Bank Transfer"
                    },
                    "category": {
                        "description": "Category of the income",
                        "type": "string",
                        "example": "Services"
                    },
                    "customer_id": {
                        "description": "Customer associated with the income",
                        "type": "integer",
                        "example": 1
                    },
                    "invoice_id": {
                        "description": "Invoice associated with the income",
                        "type": "integer",
                        "example": 101
                    }
                },
                "type": "object"
            },
            "TransactionRequest": {
                "title": "Transaction Request Schema",
                "description": "Schema for creating or updating financial transactions",
                "required": [
                    "description",
                    "amount",
                    "date",
                    "type",
                    "payment_method"
                ],
                "properties": {
                    "description": {
                        "description": "Description of the transaction",
                        "type": "string",
                        "example": "Purchase Payment"
                    },
                    "amount": {
                        "description": "Transaction amount",
                        "type": "number",
                        "format": "float",
                        "example": 500
                    },
                    "date": {
                        "description": "Transaction date",
                        "type": "string",
                        "format": "date",
                        "example": "2023-11-19"
                    },
                    "type": {
                        "description": "Type of transaction (e.g., income, expense)",
                        "type": "string",
                        "example": "income"
                    },
                    "payment_method": {
                        "description": "Method of payment for the transaction",
                        "type": "string",
                        "example": "Credit Card"
                    },
                    "category": {
                        "description": "Category for the transaction",
                        "type": "string",
                        "example": "Office Supplies"
                    },
                    "cash_register_id": {
                        "description": "ID of the associated cash register",
                        "type": "integer",
                        "example": 1
                    }
                },
                "type": "object"
            },
            "TransactionResource": {
                "title": "Transaction Resource Schema",
                "description": "Representation of a financial transaction",
                "properties": {
                    "id": {
                        "description": "Unique identifier for the transaction",
                        "type": "integer",
                        "example": 1
                    },
                    "description": {
                        "description": "Description of the transaction",
                        "type": "string",
                        "example": "Purchase Payment"
                    },
                    "amount": {
                        "description": "Transaction amount",
                        "type": "number",
                        "format": "float",
                        "example": 500
                    },
                    "date": {
                        "description": "Transaction date",
                        "type": "string",
                        "format": "date",
                        "example": "2023-11-19"
                    },
                    "type": {
                        "description": "Type of transaction (e.g., income, expense)",
                        "type": "string",
                        "example": "income"
                    },
                    "payment_method": {
                        "description": "Method of payment for the transaction",
                        "type": "string",
                        "example": "Credit Card"
                    },
                    "category": {
                        "description": "Category for the transaction",
                        "type": "string",
                        "example": "Office Supplies"
                    },
                    "cash_register_id": {
                        "description": "ID of the associated cash register",
                        "type": "integer",
                        "example": 1
                    }
                },
                "type": "object"
            },
            "HtmlTemplateRequest": {
                "title": "Html Template Request Schema",
                "description": "Schema for creating or updating an HTML template",
                "required": [
                    "name",
                    "body"
                ],
                "properties": {
                    "name": {
                        "description": "Name of the HTML template",
                        "type": "string",
                        "example": "Default Template"
                    },
                    "body": {
                        "description": "HTML body content of the template",
                        "type": "string",
                        "example": "<div>Template Body</div>"
                    },
                    "styles": {
                        "description": "CSS styles for the template",
                        "type": "string",
                        "example": "<style>.main { color: black; }</style>"
                    },
                    "entity": {
                        "description": "Entity associated with this HTML template",
                        "type": "string",
                        "example": "Product"
                    }
                },
                "type": "object"
            },
            "HtmlTemplateResource": {
                "title": "HTML Template Resource Schema",
                "description": "Representation of an HTML Template",
                "properties": {
                    "id": {
                        "description": "Unique ID of the template",
                        "type": "integer",
                        "example": 1
                    },
                    "name": {
                        "description": "Name of the HTML template",
                        "type": "string",
                        "example": "Default Template"
                    },
                    "body": {
                        "description": "HTML body content of the template",
                        "type": "string",
                        "example": "<div>Template Body</div>"
                    },
                    "styles": {
                        "description": "CSS styles for the template",
                        "type": "string",
                        "example": "<style>.main { color: black; }</style>"
                    },
                    "entity": {
                        "description": "Entity associated with this HTML template",
                        "type": "string",
                        "example": "Product"
                    }
                },
                "type": "object"
            },
            "CategoryRequest": {
                "title": "Category Request Schema",
                "description": "Schema for creating or updating categories",
                "required": [
                    "name",
                    "url_key"
                ],
                "properties": {
                    "name": {
                        "description": "Name of the category",
                        "type": "string",
                        "example": "Electronics"
                    },
                    "description": {
                        "description": "Description of the category",
                        "type": "string",
                        "example": "Products related to electronics and gadgets"
                    },
                    "url_key": {
                        "description": "Unique key for the category URL",
                        "type": "string",
                        "format": "string",
                        "example": "electronics"
                    }
                },
                "type": "object"
            },
            "CategoryResource": {
                "title": "Category Resource Schema",
                "description": "Representation of a category",
                "properties": {
                    "id": {
                        "description": "Unique identifier for the category",
                        "type": "integer",
                        "example": 1
                    },
                    "name": {
                        "description": "Name of the category",
                        "type": "string",
                        "example": "Electronics"
                    },
                    "description": {
                        "description": "Description of the category",
                        "type": "string",
                        "example": "Products related to electronics and gadgets"
                    },
                    "url_key": {
                        "description": "Unique key for the category URL",
                        "type": "string",
                        "format": "string",
                        "example": "electronics"
                    }
                },
                "type": "object"
            },
            "EquipmentAssignmentRequest": {
                "title": "Equipment Assignment Request Schema",
                "description": "Schema for creating or updating equipment assignments",
                "required": [
                    "user_id",
                    "product_id",
                    "assigned_at"
                ],
                "properties": {
                    "user_id": {
                        "description": "ID of the user the equipment is assigned to",
                        "type": "integer",
                        "example": 1
                    },
                    "product_id": {
                        "description": "ID of the assigned product",
                        "type": "integer",
                        "example": 101
                    },
                    "assigned_at": {
                        "description": "Date the equipment was assigned",
                        "type": "string",
                        "format": "date",
                        "example": "2023-11-19"
                    },
                    "returned_at": {
                        "description": "Date the equipment was returned, if applicable",
                        "type": "string",
                        "format": "date",
                        "example": "2023-12-01"
                    },
                    "status": {
                        "description": "Current status of the assignment (e.g., 'Active', 'Returned')",
                        "type": "string",
                        "example": "Active"
                    },
                    "condition_on_assignment": {
                        "description": "Condition of the equipment when assigned",
                        "type": "string",
                        "example": "New"
                    },
                    "condition_on_return": {
                        "description": "Condition of the equipment when returned",
                        "type": "string",
                        "example": "Slightly Used"
                    },
                    "notes": {
                        "description": "Additional notes or comments",
                        "type": "string",
                        "example": "Handle with care"
                    }
                },
                "type": "object"
            },
            "EquipmentAssignmentResource": {
                "title": "Equipment Assignment Resource Schema",
                "description": "Representation of an equipment assignment",
                "properties": {
                    "id": {
                        "description": "Unique identifier for the assignment",
                        "type": "integer",
                        "example": 1
                    },
                    "user_id": {
                        "description": "ID of the user the equipment is assigned to",
                        "type": "integer",
                        "example": 1
                    },
                    "product_id": {
                        "description": "ID of the assigned product",
                        "type": "integer",
                        "example": 101
                    },
                    "assigned_at": {
                        "description": "Date the equipment was assigned",
                        "type": "string",
                        "format": "date",
                        "example": "2023-11-19"
                    },
                    "returned_at": {
                        "description": "Date the equipment was returned, if applicable",
                        "type": "string",
                        "format": "date",
                        "example": "2023-12-01"
                    },
                    "status": {
                        "description": "Current status of the assignment (e.g., 'Active', 'Returned')",
                        "type": "string",
                        "example": "Active"
                    },
                    "condition_on_assignment": {
                        "description": "Condition of the equipment when assigned",
                        "type": "string",
                        "example": "New"
                    },
                    "condition_on_return": {
                        "description": "Condition of the equipment when returned",
                        "type": "string",
                        "example": "Slightly Used"
                    },
                    "notes": {
                        "description": "Additional notes or comments",
                        "type": "string",
                        "example": "Handle with care"
                    }
                },
                "type": "object"
            },
            "ProductRequest": {
                "title": "Product Request Schema",
                "description": "Schema for creating or updating products",
                "required": [
                    "name",
                    "sku",
                    "price",
                    "url_key",
                    "warehouse_id",
                    "category_id"
                ],
                "properties": {
                    "name": {
                        "description": "Name of the product",
                        "type": "string",
                        "example": "Laptop"
                    },
                    "sku": {
                        "description": "SKU (Stock Keeping Unit) of the product",
                        "type": "string",
                        "example": "LAP12345"
                    },
                    "price": {
                        "description": "Price of the product",
                        "type": "number",
                        "format": "float",
                        "example": 1200.5
                    },
                    "special_price": {
                        "description": "Special discount price for the product",
                        "type": "number",
                        "format": "float",
                        "example": 1000
                    },
                    "cost_price": {
                        "description": "Cost price of the product",
                        "type": "number",
                        "format": "float",
                        "example": 800
                    },
                    "brand": {
                        "description": "Brand of the product",
                        "type": "string",
                        "example": "Dell"
                    },
                    "qty": {
                        "description": "Quantity of the product available",
                        "type": "string",
                        "example": "50"
                    },
                    "image": {
                        "description": "URL of the product image",
                        "type": "string",
                        "example": "/images/laptop.png"
                    },
                    "description": {
                        "description": "Description of the product",
                        "type": "string",
                        "example": "High-performance laptop for work and gaming"
                    },
                    "reference": {
                        "description": "Reference or additional product information",
                        "type": "string",
                        "example": "Model X"
                    },
                    "taxes": {
                        "description": "Tax percentage applicable to the product",
                        "type": "number",
                        "format": "float",
                        "example": 18
                    },
                    "status": {
                        "description": "Status of the product (1 for active, 0 for inactive)",
                        "type": "integer",
                        "example": 1
                    },
                    "url_key": {
                        "description": "Unique key for the product URL",
                        "type": "string",
                        "example": "laptop-dell-x"
                    },
                    "warehouse_id": {
                        "description": "Warehouse ID where the product is stored",
                        "type": "integer",
                        "example": 1
                    },
                    "category_id": {
                        "description": "Category ID to which the product belongs",
                        "type": "integer",
                        "example": 3
                    }
                },
                "type": "object"
            },
            "ProductResource": {
                "title": "Product Resource Schema",
                "description": "Representation of a product",
                "properties": {
                    "id": {
                        "description": "Unique identifier for the product",
                        "type": "integer",
                        "example": 1
                    },
                    "name": {
                        "description": "Name of the product",
                        "type": "string",
                        "example": "Laptop"
                    },
                    "sku": {
                        "description": "SKU (Stock Keeping Unit) of the product",
                        "type": "string",
                        "example": "LAP12345"
                    },
                    "price": {
                        "description": "Price of the product",
                        "type": "number",
                        "format": "float",
                        "example": 1200.5
                    },
                    "special_price": {
                        "description": "Special discount price for the product",
                        "type": "number",
                        "format": "float",
                        "example": 1000
                    },
                    "cost_price": {
                        "description": "Cost price of the product",
                        "type": "number",
                        "format": "float",
                        "example": 800
                    },
                    "brand": {
                        "description": "Brand of the product",
                        "type": "string",
                        "example": "Dell"
                    },
                    "qty": {
                        "description": "Quantity of the product available",
                        "type": "string",
                        "example": "50"
                    },
                    "image": {
                        "description": "URL of the product image",
                        "type": "string",
                        "example": "/images/laptop.png"
                    },
                    "description": {
                        "description": "Description of the product",
                        "type": "string",
                        "example": "High-performance laptop for work and gaming"
                    },
                    "reference": {
                        "description": "Reference or additional product information",
                        "type": "string",
                        "example": "Model X"
                    },
                    "taxes": {
                        "description": "Tax percentage applicable to the product",
                        "type": "number",
                        "format": "float",
                        "example": 18
                    },
                    "status": {
                        "description": "Status of the product (1 for active, 0 for inactive)",
                        "type": "integer",
                        "example": 1
                    },
                    "url_key": {
                        "description": "Unique key for the product URL",
                        "type": "string",
                        "example": "laptop-dell-x"
                    },
                    "warehouse_id": {
                        "description": "Warehouse ID where the product is stored",
                        "type": "integer",
                        "example": 1
                    },
                    "category_id": {
                        "description": "Category ID to which the product belongs",
                        "type": "integer",
                        "example": 3
                    }
                },
                "type": "object"
            },
            "SupplierRequest": {
                "title": "Supplier Request Schema",
                "description": "Schema for creating or updating suppliers",
                "required": [
                    "name",
                    "contact",
                    "document",
                    "email"
                ],
                "properties": {
                    "name": {
                        "description": "Name of the supplier",
                        "type": "string",
                        "example": "Tech Supplies Inc."
                    },
                    "contact": {
                        "description": "Contact person or department",
                        "type": "string",
                        "example": "John Doe"
                    },
                    "document": {
                        "description": "Unique identification document of the supplier",
                        "type": "string",
                        "example": "12345XYZ"
                    },
                    "email": {
                        "description": "Email address of the supplier",
                        "type": "string",
                        "format": "email",
                        "example": "contact@techsupplies.com"
                    },
                    "description": {
                        "description": "Short description of the supplier",
                        "type": "string",
                        "example": "Supplier of electronic parts"
                    },
                    "country": {
                        "description": "Country of the supplier",
                        "type": "string",
                        "example": "USA"
                    },
                    "city": {
                        "description": "City of the supplier",
                        "type": "string",
                        "example": "New York"
                    },
                    "postal_code": {
                        "description": "Postal/ZIP code of the supplier",
                        "type": "string",
                        "example": "10001"
                    },
                    "phone": {
                        "description": "Phone number of the supplier",
                        "type": "string",
                        "example": "+1 555-1234"
                    }
                },
                "type": "object"
            },
            "SupplierResource": {
                "title": "Supplier Resource Schema",
                "description": "Representation of a supplier",
                "properties": {
                    "id": {
                        "description": "Unique identifier for the supplier",
                        "type": "integer",
                        "example": 1
                    },
                    "name": {
                        "description": "Name of the supplier",
                        "type": "string",
                        "example": "Tech Supplies Inc."
                    },
                    "contact": {
                        "description": "Contact person or department",
                        "type": "string",
                        "example": "John Doe"
                    },
                    "document": {
                        "description": "Unique identification document of the supplier",
                        "type": "string",
                        "example": "12345XYZ"
                    },
                    "email": {
                        "description": "Email address of the supplier",
                        "type": "string",
                        "format": "email",
                        "example": "contact@techsupplies.com"
                    },
                    "description": {
                        "description": "Short description of the supplier",
                        "type": "string",
                        "example": "Supplier of electronic parts"
                    },
                    "country": {
                        "description": "Country of the supplier",
                        "type": "string",
                        "example": "USA"
                    },
                    "city": {
                        "description": "City of the supplier",
                        "type": "string",
                        "example": "New York"
                    },
                    "postal_code": {
                        "description": "Postal/ZIP code of the supplier",
                        "type": "string",
                        "example": "10001"
                    },
                    "phone": {
                        "description": "Phone number of the supplier",
                        "type": "string",
                        "example": "+1 555-1234"
                    }
                },
                "type": "object"
            },
            "WarehouseRequest": {
                "title": "Warehouse Request Schema",
                "description": "Schema for creating or updating warehouses",
                "required": [
                    "name",
                    "address",
                    "code"
                ],
                "properties": {
                    "name": {
                        "description": "Name of the warehouse",
                        "type": "string",
                        "example": "Main Warehouse"
                    },
                    "address": {
                        "description": "Address of the warehouse",
                        "type": "string",
                        "example": "123 Main St, Cityville"
                    },
                    "code": {
                        "description": "Unique code for the warehouse",
                        "type": "string",
                        "example": "MW001"
                    }
                },
                "type": "object"
            },
            "WarehouseResource": {
                "title": "Warehouse Resource Schema",
                "description": "Representation of a warehouse",
                "properties": {
                    "id": {
                        "description": "Unique identifier for the warehouse",
                        "type": "integer",
                        "example": 1
                    },
                    "name": {
                        "description": "Name of the warehouse",
                        "type": "string",
                        "example": "Main Warehouse"
                    },
                    "address": {
                        "description": "Address of the warehouse",
                        "type": "string",
                        "example": "123 Main St, Cityville"
                    },
                    "code": {
                        "description": "Unique code for the warehouse",
                        "type": "string",
                        "example": "MW001"
                    }
                },
                "type": "object"
            },
            "CreditNoteRequest": {
                "title": "Credit Note Request Schema",
                "description": "Schema for creating or updating credit notes",
                "required": [
                    "invoice_id",
                    "user_id",
                    "amount",
                    "issue_date",
                    "reason"
                ],
                "properties": {
                    "invoice_id": {
                        "description": "ID of the related invoice",
                        "type": "integer",
                        "example": 5
                    },
                    "user_id": {
                        "description": "ID of the user associated with the credit note",
                        "type": "integer",
                        "example": 2
                    },
                    "amount": {
                        "description": "Amount of the credit note",
                        "type": "number",
                        "format": "float",
                        "example": 150.5
                    },
                    "issue_date": {
                        "description": "Issue date of the credit note",
                        "type": "string",
                        "format": "date",
                        "example": "2023-10-15"
                    },
                    "reason": {
                        "description": "Reason for issuing the credit note",
                        "type": "string",
                        "example": "Refund for overbilling"
                    }
                },
                "type": "object"
            },
            "CreditNoteResource": {
                "title": "Credit Note Resource Schema",
                "description": "Representation of a credit note",
                "properties": {
                    "id": {
                        "description": "Unique identifier for the credit note",
                        "type": "integer",
                        "example": 1
                    },
                    "invoice_id": {
                        "description": "ID of the related invoice",
                        "type": "integer",
                        "example": 5
                    },
                    "user_id": {
                        "description": "ID of the user associated with the credit note",
                        "type": "integer",
                        "example": 2
                    },
                    "amount": {
                        "description": "Amount of the credit note",
                        "type": "number",
                        "format": "float",
                        "example": 150.5
                    },
                    "issue_date": {
                        "description": "Issue date of the credit note",
                        "type": "string",
                        "format": "date",
                        "example": "2023-10-15"
                    },
                    "reason": {
                        "description": "Reason for issuing the credit note",
                        "type": "string",
                        "example": "Refund for overbilling"
                    }
                },
                "type": "object"
            },
            "DailyInvoiceBalanceRequest": {
                "title": "Daily Invoice Balance Request Schema",
                "description": "Schema for creating or updating daily invoice balances",
                "required": [
                    "date",
                    "total_invoices",
                    "paid_invoices",
                    "total_subtotal",
                    "total_tax",
                    "total_amount",
                    "total_discount",
                    "total_outstanding_balance",
                    "total_revenue"
                ],
                "properties": {
                    "date": {
                        "description": "Date for the invoice balance",
                        "type": "string",
                        "format": "date",
                        "example": "2023-10-20"
                    },
                    "total_invoices": {
                        "description": "Total number of invoices for the day",
                        "type": "integer",
                        "example": 100
                    },
                    "paid_invoices": {
                        "description": "Total number of paid invoices",
                        "type": "integer",
                        "example": 80
                    },
                    "total_subtotal": {
                        "description": "Total subtotal amount for the day",
                        "type": "number",
                        "format": "float",
                        "example": 5000
                    },
                    "total_tax": {
                        "description": "Total tax amount for the day",
                        "type": "number",
                        "format": "float",
                        "example": 750
                    },
                    "total_amount": {
                        "description": "Total amount for the day including tax",
                        "type": "number",
                        "format": "float",
                        "example": 5750
                    },
                    "total_discount": {
                        "description": "Total discount applied on all invoices",
                        "type": "number",
                        "format": "float",
                        "example": 500
                    },
                    "total_outstanding_balance": {
                        "description": "Total outstanding balance for the day",
                        "type": "number",
                        "format": "float",
                        "example": 250
                    },
                    "total_revenue": {
                        "description": "Total revenue for the day",
                        "type": "number",
                        "format": "float",
                        "example": 5500
                    }
                },
                "type": "object"
            },
            "DailyInvoiceBalanceResource": {
                "title": "Daily Invoice Balance Resource Schema",
                "description": "Representation of a daily invoice balance",
                "properties": {
                    "id": {
                        "description": "Unique identifier for the daily invoice balance",
                        "type": "integer",
                        "example": 1
                    },
                    "date": {
                        "description": "The date for the balance",
                        "type": "string",
                        "format": "date",
                        "example": "2023-10-20"
                    },
                    "total_invoices": {
                        "description": "Total invoices for the day",
                        "type": "integer",
                        "example": 100
                    },
                    "paid_invoices": {
                        "description": "Invoices paid during the day",
                        "type": "integer",
                        "example": 80
                    },
                    "total_subtotal": {
                        "description": "Total subtotal amount",
                        "type": "number",
                        "format": "float",
                        "example": 5000
                    },
                    "total_tax": {
                        "description": "Total tax collected",
                        "type": "number",
                        "format": "float",
                        "example": 750
                    },
                    "total_amount": {
                        "description": "Total amount including tax",
                        "type": "number",
                        "format": "float",
                        "example": 5750
                    },
                    "total_discount": {
                        "description": "Discount applied to invoices",
                        "type": "number",
                        "format": "float",
                        "example": 500
                    },
                    "total_outstanding_balance": {
                        "description": "Outstanding balances for the invoices",
                        "type": "number",
                        "format": "float",
                        "example": 250
                    },
                    "total_revenue": {
                        "description": "Total revenue collected during the day",
                        "type": "number",
                        "format": "float",
                        "example": 5500
                    }
                },
                "type": "object"
            },
            "InvoiceRequest": {
                "title": "Invoice Request Schema",
                "description": "Schema for creating or updating invoices",
                "required": [
                    "increment_id",
                    "service_id",
                    "customer_id",
                    "customer_name",
                    "user_id",
                    "subtotal",
                    "tax",
                    "total",
                    "amount",
                    "status"
                ],
                "properties": {
                    "increment_id": {
                        "description": "Unique increment ID of the invoice",
                        "type": "string",
                        "example": "INV1001"
                    },
                    "service_id": {
                        "description": "ID of the service associated with the invoice",
                        "type": "integer",
                        "example": 2
                    },
                    "customer_id": {
                        "description": "ID of the customer",
                        "type": "integer",
                        "example": 1
                    },
                    "customer_name": {
                        "description": "Name of the customer",
                        "type": "string",
                        "example": "John Doe"
                    },
                    "user_id": {
                        "description": "ID of the user who created the invoice",
                        "type": "integer",
                        "example": 3
                    },
                    "subtotal": {
                        "description": "Subtotal of the invoice",
                        "type": "number",
                        "format": "float",
                        "example": 1000.5
                    },
                    "tax": {
                        "description": "Tax applied to the invoice",
                        "type": "number",
                        "format": "float",
                        "example": 200
                    },
                    "total": {
                        "description": "Total amount of the invoice",
                        "type": "number",
                        "format": "float",
                        "example": 1200.5
                    },
                    "discount": {
                        "description": "Discount applied (if any)",
                        "type": "number",
                        "format": "float",
                        "example": 50
                    },
                    "amount": {
                        "description": "Amount paid",
                        "type": "number",
                        "format": "float",
                        "example": 1150.5
                    },
                    "outstanding_balance": {
                        "description": "Outstanding balance for the invoice",
                        "type": "number",
                        "format": "float",
                        "example": 50
                    },
                    "issue_date": {
                        "description": "Date the invoice was issued",
                        "type": "string",
                        "format": "date",
                        "example": "2023-10-20"
                    },
                    "due_date": {
                        "description": "Due payment date of the invoice",
                        "type": "string",
                        "format": "date",
                        "example": "2023-11-20"
                    },
                    "status": {
                        "description": "Status of the invoice",
                        "type": "string",
                        "enum": [
                            "paid",
                            "unpaid",
                            "overdue",
                            "canceled"
                        ],
                        "example": "paid"
                    },
                    "payment_method": {
                        "description": "Payment method used for the invoice",
                        "type": "string",
                        "example": "Credit Card"
                    },
                    "notes": {
                        "description": "Additional notes for the invoice",
                        "type": "string",
                        "example": "Paid in full"
                    },
                    "payment_support": {
                        "description": "Additional payment support metadata",
                        "type": "string",
                        "example": "Ref#_PAYMENT123"
                    },
                    "daily_box_id": {
                        "description": "ID of the daily box entry for the invoice",
                        "type": "integer",
                        "example": 4
                    },
                    "created_by": {
                        "description": "User ID of the creator",
                        "type": "integer",
                        "example": 1
                    },
                    "updated_by": {
                        "description": "User ID of the updater (if applicable)",
                        "type": "integer",
                        "example": 2
                    },
                    "additional_information": {
                        "description": "Additional information JSON",
                        "type": "object",
                        "example": {
                            "extra_field": "value"
                        }
                    }
                },
                "type": "object"
            },
            "InvoiceResource": {
                "title": "Invoice Resource Schema",
                "description": "Representation of an invoice",
                "type": "object",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/InvoiceRequest"
                    },
                    {
                        "properties": {
                            "id": {
                                "description": "Unique identifier for the invoice",
                                "type": "integer",
                                "example": 10
                            }
                        },
                        "type": "object"
                    }
                ]
            },
            "PaymentPromiseRequest": {
                "title": "Payment Promise Request Schema",
                "description": "Schema for creating or updating payment promises",
                "required": [
                    "invoice_id",
                    "customer_id",
                    "user_id",
                    "amount",
                    "promise_date",
                    "status"
                ],
                "properties": {
                    "invoice_id": {
                        "description": "ID of the associated invoice",
                        "type": "integer",
                        "example": 101
                    },
                    "customer_id": {
                        "description": "ID of the customer making the promise",
                        "type": "integer",
                        "example": 5
                    },
                    "user_id": {
                        "description": "ID of the user responsible for recording the promise",
                        "type": "integer",
                        "example": 2
                    },
                    "amount": {
                        "description": "Promised payment amount",
                        "type": "number",
                        "format": "float",
                        "example": 500
                    },
                    "promise_date": {
                        "description": "Date by which payment is promised",
                        "type": "string",
                        "format": "date",
                        "example": "2023-11-01"
                    },
                    "notes": {
                        "description": "Optional notes related to the promise",
                        "type": "string",
                        "example": "Partial payment for outstanding invoice"
                    },
                    "status": {
                        "description": "Status of the payment promise",
                        "type": "string",
                        "enum": [
                            "pending",
                            "fulfilled",
                            "cancelled"
                        ],
                        "example": "pending"
                    }
                },
                "type": "object"
            },
            "PaymentPromiseResource": {
                "title": "Payment Promise Resource Schema",
                "description": "Representation of a payment promise",
                "type": "object",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/PaymentPromiseRequest"
                    },
                    {
                        "properties": {
                            "id": {
                                "description": "Unique identifier of the payment promise",
                                "type": "integer",
                                "example": 5
                            }
                        },
                        "type": "object"
                    }
                ]
            },
            "PageTranslationRequest": {
                "title": "Page Translation Request Schema",
                "description": "Schema for creating or updating page translations",
                "required": [
                    "page_id",
                    "locale",
                    "title"
                ],
                "properties": {
                    "page_id": {
                        "description": "ID of the page to which the translation belongs",
                        "type": "integer",
                        "example": 1
                    },
                    "locale": {
                        "description": "Language or locale of the translation",
                        "type": "string",
                        "maxLength": 50,
                        "example": "en"
                    },
                    "title": {
                        "description": "Title of the translated page",
                        "type": "string",
                        "maxLength": 255,
                        "example": "Homepage"
                    },
                    "meta_title": {
                        "description": "SEO meta title of the page",
                        "type": "string",
                        "maxLength": 255,
                        "example": "Welcome to our homepage"
                    },
                    "meta_description": {
                        "description": "SEO meta description",
                        "type": "string",
                        "maxLength": 255,
                        "example": "This is the homepage of our site"
                    },
                    "route": {
                        "description": "Route or URL for the translated page",
                        "type": "string",
                        "maxLength": 255,
                        "example": "/en/home"
                    }
                },
                "type": "object"
            },
            "PageTranslationResource": {
                "title": "Page Translation Resource Schema",
                "description": "Representation of a single page translation",
                "type": "object",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/PageTranslationRequest"
                    },
                    {
                        "properties": {
                            "id": {
                                "description": "Unique identifier of the page translation",
                                "type": "integer",
                                "example": 1
                            }
                        },
                        "type": "object"
                    }
                ]
            },
            "PagesRequest": {
                "title": "Pages Request Schema",
                "description": "Schema for creating or updating pages",
                "required": [
                    "name",
                    "layout",
                    "data"
                ],
                "properties": {
                    "name": {
                        "description": "Name of the page",
                        "type": "string",
                        "maxLength": 256,
                        "example": "Home Page"
                    },
                    "layout": {
                        "description": "Layout of the page",
                        "type": "string",
                        "maxLength": 256,
                        "example": "default"
                    },
                    "data": {
                        "description": "Page content data in JSON format",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "PagesResource": {
                "title": "Pages Resource Schema",
                "description": "Representation of a page",
                "type": "object",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/PagesRequest"
                    },
                    {
                        "properties": {
                            "id": {
                                "description": "Unique identifier of the page",
                                "type": "integer",
                                "example": 1
                            }
                        },
                        "type": "object"
                    }
                ]
            },
            "PasswordResetRequest": {
                "title": "Password Reset Request Schema",
                "description": "Schema for creating or updating a password reset entry",
                "required": [
                    "email",
                    "token"
                ],
                "properties": {
                    "email": {
                        "description": "Email for the password reset",
                        "type": "string",
                        "example": "user@example.com"
                    },
                    "token": {
                        "description": "Token for the password reset",
                        "type": "string",
                        "example": "abc123xyz456"
                    }
                },
                "type": "object"
            },
            "PasswordResetResource": {
                "title": "Password Reset Resource Schema",
                "description": "Representation of a Password Reset entry",
                "properties": {
                    "email": {
                        "description": "Email associated with the reset",
                        "type": "string",
                        "example": "user@example.com"
                    },
                    "token": {
                        "description": "Token used for the reset",
                        "type": "string",
                        "example": "abc123xyz456"
                    }
                },
                "type": "object"
            },
            "PlanRequest": {
                "title": "Plan Request Schema",
                "description": "Schema for creating or updating service plans",
                "required": [
                    "name",
                    "download_speed",
                    "upload_speed",
                    "monthly_price",
                    "plan_type",
                    "modality_type",
                    "status"
                ],
                "properties": {
                    "name": {
                        "description": "Name of the plan",
                        "type": "string",
                        "maxLength": 255,
                        "example": "High-Speed Internet Plan"
                    },
                    "description": {
                        "description": "Description of the plan",
                        "type": "string",
                        "example": "This is a high-speed internet plan for families."
                    },
                    "download_speed": {
                        "description": "Download speed in Mbps",
                        "type": "integer",
                        "example": 100
                    },
                    "upload_speed": {
                        "description": "Upload speed in Mbps",
                        "type": "integer",
                        "example": 50
                    },
                    "monthly_price": {
                        "description": "Monthly price of the plan",
                        "type": "number",
                        "format": "float",
                        "example": 59.99
                    },
                    "overage_fee": {
                        "description": "Fee applied for data overages",
                        "type": "number",
                        "format": "float",
                        "example": 15
                    },
                    "data_limit": {
                        "description": "Data usage limit in GB",
                        "type": "integer",
                        "example": 1000
                    },
                    "unlimited_data": {
                        "description": "Flag indicating unlimited data (1: Yes, 0: No)",
                        "type": "integer",
                        "example": 1
                    },
                    "plan_type": {
                        "description": "Type of plan offered",
                        "type": "string",
                        "enum": [
                            "internet",
                            "television",
                            "telephonic",
                            "combo"
                        ],
                        "example": "internet"
                    },
                    "modality_type": {
                        "description": "Modality of the plan",
                        "type": "string",
                        "enum": [
                            "prepaid",
                            "postpaid"
                        ],
                        "example": "postpaid"
                    },
                    "status": {
                        "description": "Status of the plan",
                        "type": "string",
                        "enum": [
                            "active",
                            "inactive"
                        ],
                        "example": "active"
                    }
                },
                "type": "object"
            },
            "PlanResource": {
                "title": "Plan Resource Schema",
                "description": "Representation of a service plan",
                "type": "object",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/PlanRequest"
                    },
                    {
                        "properties": {
                            "id": {
                                "description": "Unique identifier of the plan",
                                "type": "integer",
                                "example": 1
                            }
                        },
                        "type": "object"
                    }
                ]
            },
            "ServiceActionRequest": {
                "title": "Service Action Request Schema",
                "description": "Schema for creating or updating service actions",
                "required": [
                    "service_id",
                    "action_type",
                    "action_date",
                    "status"
                ],
                "properties": {
                    "service_id": {
                        "description": "ID of the related service",
                        "type": "integer",
                        "example": 1
                    },
                    "action_type": {
                        "description": "Type of action",
                        "type": "string",
                        "enum": [
                            "installation",
                            "uninstallation"
                        ],
                        "example": "installation"
                    },
                    "action_date": {
                        "description": "Date of the service action",
                        "type": "string",
                        "format": "date",
                        "example": "2023-11-01"
                    },
                    "action_notes": {
                        "description": "Optional notes for the action",
                        "type": "string",
                        "example": "Installation completed successfully."
                    },
                    "user_id": {
                        "description": "ID of the user performing the action",
                        "type": "integer",
                        "example": 42
                    },
                    "status": {
                        "description": "Status of the action",
                        "type": "string",
                        "enum": [
                            "pending",
                            "in_progress",
                            "completed",
                            "failed"
                        ],
                        "example": "completed"
                    },
                    "created_by": {
                        "description": "User ID who created the action",
                        "type": "integer",
                        "example": 5
                    },
                    "updated_by": {
                        "description": "User ID who last updated the action",
                        "type": "integer",
                        "example": 6
                    }
                },
                "type": "object"
            },
            "ServiceActionResource": {
                "title": "Service Action Resource Schema",
                "description": "Representation of a service action",
                "type": "object",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/ServiceActionRequest"
                    },
                    {
                        "properties": {
                            "id": {
                                "description": "Unique identifier of the service action",
                                "type": "integer",
                                "example": 1
                            }
                        },
                        "type": "object"
                    }
                ]
            },
            "ServiceRequest": {
                "title": "Service Request Schema",
                "description": "Schema for creating or updating customer services",
                "required": [
                    "router_id",
                    "customer_id",
                    "plan_id",
                    "service_status",
                    "service_type"
                ],
                "properties": {
                    "router_id": {
                        "description": "ID of the router assigned to the service",
                        "type": "integer",
                        "example": 1
                    },
                    "customer_id": {
                        "description": "ID of the customer associated with the service",
                        "type": "integer",
                        "example": 10
                    },
                    "plan_id": {
                        "description": "ID of the plan associated with the service",
                        "type": "integer",
                        "example": 5
                    },
                    "service_ip": {
                        "description": "IP address assigned to the service",
                        "type": "string",
                        "maxLength": 255,
                        "example": "192.168.1.100"
                    },
                    "service_status": {
                        "description": "Current status of the service",
                        "type": "string",
                        "enum": [
                            "active",
                            "inactive",
                            "suspended",
                            "pending",
                            "free"
                        ],
                        "example": "active"
                    },
                    "service_type": {
                        "description": "Type of service connection",
                        "type": "string",
                        "enum": [
                            "ftth",
                            "adsl",
                            "satellite"
                        ],
                        "example": "ftth"
                    },
                    "activation_date": {
                        "description": "Date the service was activated",
                        "type": "string",
                        "format": "date",
                        "example": "2022-01-15"
                    },
                    "deactivation_date": {
                        "description": "Date the service was deactivated",
                        "type": "string",
                        "format": "date",
                        "example": "2023-11-01"
                    },
                    "bandwidth": {
                        "description": "Bandwidth allocated to the service (in Mbps)",
                        "type": "integer",
                        "example": 100
                    },
                    "mac_address": {
                        "description": "MAC address of the associated device",
                        "type": "string",
                        "maxLength": 255,
                        "example": "00:11:22:33:44:55"
                    },
                    "service_location": {
                        "description": "Physical location of the service",
                        "type": "string",
                        "maxLength": 255,
                        "example": "123 Main Street, City"
                    },
                    "support_contact": {
                        "description": "Contact information for technical support",
                        "type": "string",
                        "maxLength": 255,
                        "example": "+1 234 567 890"
                    },
                    "created_by": {
                        "description": "ID of the user who created the service",
                        "type": "integer",
                        "example": 1
                    },
                    "updated_by": {
                        "description": "ID of the user who last updated the service",
                        "type": "integer",
                        "example": 2
                    }
                },
                "type": "object"
            },
            "ServiceResource": {
                "title": "Service Resource Schema",
                "description": "Representation of a customer service",
                "type": "object",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/ServiceRequest"
                    },
                    {
                        "properties": {
                            "id": {
                                "description": "Unique identifier of the service",
                                "type": "integer",
                                "example": 1
                            }
                        },
                        "type": "object"
                    }
                ]
            },
            "BoardRequest": {
                "title": "Board Request Schema",
                "description": "Schema for creating or updating ticket boards",
                "required": [
                    "name"
                ],
                "properties": {
                    "name": {
                        "description": "Name of the board",
                        "type": "string",
                        "maxLength": 255,
                        "example": "Technical Support Board"
                    },
                    "description": {
                        "description": "Description of the board",
                        "type": "string",
                        "example": "Handles technical issues and resolutions."
                    },
                    "created_by": {
                        "description": "User ID who created the board",
                        "type": "integer",
                        "example": 1
                    },
                    "updated_by": {
                        "description": "User ID who last updated the board",
                        "type": "integer",
                        "example": 2
                    }
                },
                "type": "object"
            },
            "BoardResource": {
                "title": "Board Resource Schema",
                "description": "Representation of a ticket board",
                "type": "object",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/BoardRequest"
                    },
                    {
                        "properties": {
                            "id": {
                                "description": "Unique identifier of the board",
                                "type": "integer",
                                "example": 1
                            }
                        },
                        "type": "object"
                    }
                ]
            },
            "ColumnRequest": {
                "title": "Column Request Schema",
                "description": "Schema for creating or updating a board's column",
                "required": [
                    "board_id",
                    "title"
                ],
                "properties": {
                    "board_id": {
                        "description": "ID of the board to which the column belongs",
                        "type": "integer",
                        "example": 1
                    },
                    "title": {
                        "description": "Title of the column",
                        "type": "string",
                        "maxLength": 255,
                        "example": "To Do"
                    },
                    "position": {
                        "description": "Position of the column in the board",
                        "type": "integer",
                        "example": 2
                    }
                },
                "type": "object"
            },
            "ColumnResource": {
                "title": "Column Resource Schema",
                "description": "Representation of a board's column",
                "type": "object",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/ColumnRequest"
                    },
                    {
                        "properties": {
                            "id": {
                                "description": "Unique identifier of the column",
                                "type": "integer",
                                "example": 1
                            }
                        },
                        "type": "object"
                    }
                ]
            },
            "LabelRequest": {
                "title": "Label Request Schema",
                "description": "Schema for creating or updating a label",
                "required": [
                    "name",
                    "color"
                ],
                "properties": {
                    "name": {
                        "description": "Name of the label",
                        "type": "string",
                        "maxLength": 255,
                        "example": "Urgent"
                    },
                    "color": {
                        "description": "Color code of the label",
                        "type": "string",
                        "maxLength": 255,
                        "example": "#FF0000"
                    }
                },
                "type": "object"
            },
            "LabelResource": {
                "title": "Label Resource Schema",
                "description": "Representation of a label",
                "type": "object",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/LabelRequest"
                    },
                    {
                        "properties": {
                            "id": {
                                "description": "Unique identifier of the label",
                                "type": "integer",
                                "example": 1
                            }
                        },
                        "type": "object"
                    }
                ]
            },
            "LabelTaskRequest": {
                "title": "LabelTask Request Schema",
                "description": "Schema for creating or updating a label-task relationship",
                "required": [
                    "label_id",
                    "task_id"
                ],
                "properties": {
                    "label_id": {
                        "description": "ID of the label",
                        "type": "integer",
                        "example": 1
                    },
                    "task_id": {
                        "description": "ID of the task",
                        "type": "integer",
                        "example": 101
                    }
                },
                "type": "object"
            },
            "LabelTaskResource": {
                "title": "LabelTask Resource Schema",
                "description": "Representation of a label-task relationship",
                "type": "object",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/LabelTaskRequest"
                    },
                    {
                        "properties": {
                            "id": {
                                "description": "Unique identifier of the label-task relationship",
                                "type": "integer",
                                "example": 10
                            }
                        },
                        "type": "object"
                    }
                ]
            },
            "TaskAttachmentRequest": {
                "title": "Task Attachment Request Schema",
                "description": "Schema for creating or updating a task attachment",
                "required": [
                    "task_id",
                    "file_path",
                    "file_name",
                    "uploaded_by"
                ],
                "properties": {
                    "task_id": {
                        "description": "ID of the related task",
                        "type": "integer",
                        "example": 1
                    },
                    "file_path": {
                        "description": "Path to the attached file",
                        "type": "string",
                        "maxLength": 255,
                        "example": "/uploads/task_1/file.pdf"
                    },
                    "file_name": {
                        "description": "Name of the attached file",
                        "type": "string",
                        "maxLength": 255,
                        "example": "file.pdf"
                    },
                    "uploaded_by": {
                        "description": "ID of the user who uploaded the file",
                        "type": "integer",
                        "example": 5
                    }
                },
                "type": "object"
            },
            "TaskAttachmentResource": {
                "title": "Task Attachment Resource Schema",
                "description": "Representation of a task attachment",
                "type": "object",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/TaskAttachmentRequest"
                    },
                    {
                        "properties": {
                            "id": {
                                "description": "Unique identifier of the task attachment",
                                "type": "integer",
                                "example": 100
                            }
                        },
                        "type": "object"
                    }
                ]
            },
            "TaskCommentRequest": {
                "title": "Task Comment Request Schema",
                "description": "Schema for creating or updating a task comment",
                "required": [
                    "task_id",
                    "user_id",
                    "content"
                ],
                "properties": {
                    "task_id": {
                        "description": "ID of the task",
                        "type": "integer",
                        "example": 1
                    },
                    "user_id": {
                        "description": "ID of the user who made the comment",
                        "type": "integer",
                        "example": 5
                    },
                    "content": {
                        "description": "Content of the comment",
                        "type": "string",
                        "example": "This is a comment on the task."
                    }
                },
                "type": "object"
            },
            "TaskCommentResource": {
                "title": "Task Comment Resource Schema",
                "description": "Representation of a task comment",
                "type": "object",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/TaskCommentRequest"
                    },
                    {
                        "properties": {
                            "id": {
                                "description": "Unique identifier of the comment",
                                "type": "integer",
                                "example": 10
                            }
                        },
                        "type": "object"
                    }
                ]
            },
            "TaskRequest": {
                "title": "Task Request Schema",
                "description": "Schema for creating or updating a task",
                "required": [
                    "column_id",
                    "title",
                    "priority"
                ],
                "properties": {
                    "column_id": {
                        "description": "ID of the column where the task belongs",
                        "type": "integer",
                        "example": 1
                    },
                    "title": {
                        "description": "Title of the task",
                        "type": "string",
                        "maxLength": 255,
                        "example": "Fix login bug"
                    },
                    "description": {
                        "description": "Description of the task",
                        "type": "string",
                        "example": "Details about the issue."
                    },
                    "created_by": {
                        "description": "ID of the user who created the task",
                        "type": "integer",
                        "example": 10
                    },
                    "updated_by": {
                        "description": "ID of the user who last updated the task",
                        "type": "integer",
                        "example": 15
                    },
                    "customer_id": {
                        "description": "ID of the customer related to the task",
                        "type": "integer",
                        "example": 5
                    },
                    "service_id": {
                        "description": "ID of the associated service",
                        "type": "integer",
                        "example": 3
                    },
                    "due_date": {
                        "description": "Due date for the task",
                        "type": "string",
                        "format": "date",
                        "example": "2023-12-31"
                    },
                    "priority": {
                        "description": "Priority of the task (e.g., High, Medium, Low)",
                        "type": "string",
                        "maxLength": 255,
                        "example": "High"
                    }
                },
                "type": "object"
            },
            "TaskResource": {
                "title": "Task Resource Schema",
                "description": "Representation of a task",
                "type": "object",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/TaskRequest"
                    },
                    {
                        "properties": {
                            "id": {
                                "description": "Unique identifier of the task",
                                "type": "integer",
                                "example": 100
                            }
                        },
                        "type": "object"
                    }
                ]
            },
            "TicketRequest": {
                "title": "Ticket Request Schema",
                "description": "Schema for creating or updating a ticket",
                "required": [
                    "customer_id",
                    "service_id",
                    "title",
                    "issue_type"
                ],
                "properties": {
                    "customer_id": {
                        "description": "Customer ID related to the ticket",
                        "type": "integer",
                        "example": 1
                    },
                    "service_id": {
                        "description": "Service ID related to the ticket",
                        "type": "integer",
                        "example": 42
                    },
                    "issue_type": {
                        "description": "Type of issue reported",
                        "type": "string",
                        "example": "Technical Issue"
                    },
                    "priority": {
                        "description": "Priority of the ticket",
                        "type": "string",
                        "enum": [
                            "low",
                            "medium",
                            "high",
                            "urgent"
                        ],
                        "example": "high"
                    },
                    "status": {
                        "description": "Status of the ticket",
                        "type": "string",
                        "enum": [
                            "open",
                            "in_progress",
                            "resolved",
                            "closed"
                        ],
                        "example": "open"
                    },
                    "title": {
                        "description": "Title of the ticket",
                        "type": "string",
                        "example": "Issue with software installation"
                    },
                    "description": {
                        "description": "Detailed description of the issue",
                        "type": "string",
                        "example": "The software fails to install on Windows 11."
                    },
                    "closed_at": {
                        "description": "Timestamp when the ticket was closed",
                        "type": "string",
                        "format": "date-time",
                        "example": "2023-10-15T14:53:00Z"
                    },
                    "user_id": {
                        "description": "User ID assigned to the ticket",
                        "type": "integer",
                        "example": 7
                    },
                    "resolution_notes": {
                        "description": "Resolution notes added by the team",
                        "type": "string",
                        "example": "Issue fixed by updating the software version."
                    },
                    "attachments": {
                        "description": "Attachment file paths, if any",
                        "type": "string",
                        "example": "['attachment1.png', 'attachment2.pdf']"
                    },
                    "contact_method": {
                        "description": "Preferred contact method for this ticket",
                        "type": "string",
                        "example": "Email"
                    }
                },
                "type": "object"
            },
            "TicketResource": {
                "title": "Ticket Resource Schema",
                "description": "Representation of a ticket",
                "properties": {
                    "id": {
                        "description": "Ticket ID",
                        "type": "integer",
                        "example": 10
                    },
                    "customer_id": {
                        "description": "Customer ID",
                        "type": "integer",
                        "example": 1
                    },
                    "service_id": {
                        "description": "Service ID",
                        "type": "integer",
                        "example": 42
                    },
                    "issue_type": {
                        "description": "Type of issue",
                        "type": "string",
                        "example": "Technical Issue"
                    },
                    "priority": {
                        "description": "Priority of the ticket",
                        "type": "string",
                        "enum": [
                            "low",
                            "medium",
                            "high",
                            "urgent"
                        ],
                        "example": "high"
                    },
                    "status": {
                        "description": "Status of the ticket",
                        "type": "string",
                        "enum": [
                            "open",
                            "in_progress",
                            "resolved",
                            "closed"
                        ],
                        "example": "open"
                    },
                    "title": {
                        "description": "Ticket title",
                        "type": "string",
                        "example": "Issue with software installation"
                    },
                    "description": {
                        "description": "Description of the issue",
                        "type": "string",
                        "example": "The software fails to install on Windows 11."
                    },
                    "closed_at": {
                        "description": "Timestamp of closure",
                        "type": "string",
                        "format": "date-time",
                        "example": "2023-10-15T14:53:00Z"
                    },
                    "user_id": {
                        "description": "Assigned user ID",
                        "type": "integer",
                        "example": 7
                    },
                    "resolution_notes": {
                        "description": "Resolution notes",
                        "type": "string",
                        "example": "Issue fixed by updating the software version."
                    },
                    "attachments": {
                        "description": "Array of file paths for attachments",
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "example": "['attachment1.png', 'attachment2.pdf']"
                    },
                    "contact_method": {
                        "description": "Preferred contact method",
                        "type": "string",
                        "example": "Email"
                    }
                },
                "type": "object"
            }
        },
        "securitySchemes": {
            "passport": {
                "type": "oauth2",
                "description": "Laravel passport oauth2 security.",
                "in": "header",
                "scheme": "https",
                "flows": {
                    "password": {
                        "authorizationUrl": "http://localhost/oauth/authorize",
                        "tokenUrl": "http://localhost/oauth/token",
                        "refreshUrl": "http://localhost/token/refresh",
                        "grantTypes": [
                            "password"
                        ],
                        "scopes": []
                    }
                }
            }
        }
    },
    "tags": [
        {
            "name": "Boxes",
            "description": "API Endpoints for managing boxes"
        },
        {
            "name": "Contracts",
            "description": "API Endpoints for Contracts"
        },
        {
            "name": "Addresses",
            "description": "API Endpoints for managing customer addresses"
        },
        {
            "name": "Customers",
            "description": "API Endpoints for managing customers"
        },
        {
            "name": "Document Types",
            "description": "API Endpoints for managing document types"
        },
        {
            "name": "Fiscal Regimes",
            "description": "API Endpoints for managing fiscal regimes"
        },
        {
            "name": "Tax Details",
            "description": "API Endpoints for managing tax details"
        },
        {
            "name": "Tax Identification Types",
            "description": "API Endpoints for managing tax identification types"
        },
        {
            "name": "Taxpayer Types",
            "description": "API Endpoints for managing taxpayer types"
        },
        {
            "name": "DailyBoxes",
            "description": "API Endpoints for managing Daily Boxes"
        },
        {
            "name": "EmailTemplates",
            "description": "API Endpoints for managing Email Templates"
        },
        {
            "name": "Cash Registers",
            "description": "API Endpoints for managing cash registers"
        },
        {
            "name": "Expenses",
            "description": "API Endpoints for managing expenses"
        },
        {
            "name": "Incomes",
            "description": "API Endpoints for managing incomes"
        },
        {
            "name": "Transactions",
            "description": "API Endpoints for managing financial transactions"
        },
        {
            "name": "HtmlTemplates",
            "description": "API Endpoints for managing HTML Templates"
        },
        {
            "name": "Categories",
            "description": "API Endpoints for managing categories"
        },
        {
            "name": "EquipmentAssignments",
            "description": "API Endpoints for managing equipment assignments"
        },
        {
            "name": "Products",
            "description": "API Endpoints for managing products"
        },
        {
            "name": "Suppliers",
            "description": "API Endpoints for managing suppliers"
        },
        {
            "name": "Warehouses",
            "description": "API Endpoints for managing warehouses"
        },
        {
            "name": "CreditNotes",
            "description": "API Endpoints for managing credit notes"
        },
        {
            "name": "DailyInvoiceBalances",
            "description": "API Endpoints for managing daily invoice balances"
        },
        {
            "name": "Invoices",
            "description": "API Endpoints for managing invoices"
        },
        {
            "name": "PaymentPromises",
            "description": "API Endpoints for managing payment promises"
        },
        {
            "name": "PageTranslations",
            "description": "API Endpoints for managing page translations"
        },
        {
            "name": "Pages",
            "description": "API Endpoints for managing pages"
        },
        {
            "name": "PasswordResets",
            "description": "API Endpoints for managing Password Resets"
        },
        {
            "name": "Plans",
            "description": "API Endpoints for managing service plans"
        },
        {
            "name": "ServiceActions",
            "description": "API Endpoints for managing service actions such as installations and uninstallations"
        },
        {
            "name": "Services",
            "description": "API Endpoints for managing customer services"
        },
        {
            "name": "Boards",
            "description": "API Endpoints for managing support ticket boards"
        },
        {
            "name": "Columns",
            "description": "API Endpoints for managing board columns"
        },
        {
            "name": "Labels",
            "description": "API Endpoints for managing ticket labels"
        },
        {
            "name": "LabelTasks",
            "description": "API Endpoints for managing label-task relationships"
        },
        {
            "name": "Task Attachments",
            "description": "API Endpoints for managing task attachments"
        },
        {
            "name": "Task Comments",
            "description": "API Endpoints for managing task comments"
        },
        {
            "name": "Tasks",
            "description": "API Endpoints for managing tasks"
        },
        {
            "name": "Tickets",
            "description": "API Endpoints for managing tickets"
        },
        {
            "name": "Authentication",
            "description": "Authentication"
        }
    ]
}